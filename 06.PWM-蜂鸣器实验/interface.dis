
interface.elf：     文件格式 elf32-littlearm


Disassembly of section .text:

c0008000 <_start>:
.text

	.global	_start
_start:
@ 异常向量表
	b reset
c0008000:	ea00000d 	b	c000803c <reset>
	ldr pc, _undefined_instruction
c0008004:	e59ff014 	ldr	pc, [pc, #20]	; c0008020 <_undefined_instruction>
	ldr pc, _software_interrupt
c0008008:	e59ff014 	ldr	pc, [pc, #20]	; c0008024 <_software_interrupt>
	ldr pc, _prefetch_abort
c000800c:	e59ff014 	ldr	pc, [pc, #20]	; c0008028 <_prefetch_abort>
	ldr pc, _data_abort
c0008010:	e59ff014 	ldr	pc, [pc, #20]	; c000802c <_data_abort>
	ldr pc, _not_used
c0008014:	e59ff014 	ldr	pc, [pc, #20]	; c0008030 <_not_used>
	ldr pc, _irq
c0008018:	e59ff014 	ldr	pc, [pc, #20]	; c0008034 <_irq>
	ldr pc, _fiq
c000801c:	e59ff014 	ldr	pc, [pc, #20]	; c0008038 <_fiq>

c0008020 <_undefined_instruction>:
c0008020:	c0008140 	andgt	r8, r0, r0, asr #2

c0008024 <_software_interrupt>:
c0008024:	c0008160 	andgt	r8, r0, r0, ror #2

c0008028 <_prefetch_abort>:
c0008028:	c0008180 	andgt	r8, r0, r0, lsl #3

c000802c <_data_abort>:
c000802c:	c00081a0 	andgt	r8, r0, r0, lsr #3

c0008030 <_not_used>:
c0008030:	c00081c0 	andgt	r8, r0, r0, asr #3

c0008034 <_irq>:
c0008034:	c00081e0 	andgt	r8, r0, r0, ror #3

c0008038 <_fiq>:
c0008038:	c0008200 	andgt	r8, r0, r0, lsl #4

c000803c <reset>:

 /* The actual reset code */
reset:
	@ 重新映射异常向量表的入口地址
	/* Set Vector Base Address Register */
	mrc p15, 0, r0, c1, c0, 0
c000803c:	ee110f10 	mrc	15, 0, r0, cr1, cr0, {0}
	bic r0, #(1<<13)
c0008040:	e3c00a02 	bic	r0, r0, #8192	; 0x2000
	mcr p15, 0, r0, c1, c0, 0
c0008044:	ee010f10 	mcr	15, 0, r0, cr1, cr0, {0}
	ldr	r0,=0xc0008000
c0008048:	e59f01b8 	ldr	r0, [pc, #440]	; c0008208 <stacktop+0x4>
	mcr	p15,0,r0,c12,c0,0		@ Vector Base Address Register
c000804c:	ee0c0f10 	mcr	15, 0, r0, cr12, cr0, {0}

	/* Set the cpu to svc32 mode */
	mrs r0, cpsr
c0008050:	e10f0000 	mrs	r0, CPSR
	bic r0, r0, #0x1f
c0008054:	e3c0001f 	bic	r0, r0, #31
	orr r0, r0, #0xd3
c0008058:	e38000d3 	orr	r0, r0, #211	; 0xd3
	msr cpsr, r0
c000805c:	e129f000 	msr	CPSR_fc, r0

	/* Enable NEON/VFP unit */
	mrc p15, #0, r1, c1, c0, #2
c0008060:	ee111f50 	mrc	15, 0, r1, cr1, cr0, {2}
	orr r1, r1, #(0xf << 20)
c0008064:	e381160f 	orr	r1, r1, #15728640	; 0xf00000
	mcr p15, #0, r1, c1, c0, #2
c0008068:	ee011f50 	mcr	15, 0, r1, cr1, cr0, {2}
	mov r1, #0
c000806c:	e3a01000 	mov	r1, #0
	mcr p15, #0, r1, c7, c5, #4
c0008070:	ee071f95 	mcr	15, 0, r1, cr7, cr5, {4}
	mov r0, #0x40000000
c0008074:	e3a00101 	mov	r0, #1073741824	; 0x40000000
	fmxr fpexc, r0
c0008078:	eee80a10 	vmsr	fpexc, r0

	/* Cache init */
	mrc	p15, 0, r0, c0, c0, 0
c000807c:	ee100f10 	mrc	15, 0, r0, cr0, cr0, {0}
	and	r1, r0, #0x00f00000
c0008080:	e200160f 	and	r1, r0, #15728640	; 0xf00000
	and	r2, r0, #0x0000000f
c0008084:	e200200f 	and	r2, r0, #15
	orr r2, r2, r1, lsr #20-4
c0008088:	e1822821 	orr	r2, r2, r1, lsr #16
	cmp r2, #0x30
c000808c:	e3520030 	cmp	r2, #48	; 0x30
	mrceq p15, 0, r0, c1, c0, 1
c0008090:	0e110f30 	mrceq	15, 0, r0, cr1, cr0, {1}
	orreq r0, r0, #0x6
c0008094:	03800006 	orreq	r0, r0, #6
	mcreq p15, 0, r0, c1, c0, 1
c0008098:	0e010f30 	mcreq	15, 0, r0, cr1, cr0, {1}

	/* Invalidate L1 I/D */
	mov r0, #0
c000809c:	e3a00000 	mov	r0, #0
	mcr	p15, 0, r0, c8, c7, 0
c00080a0:	ee080f17 	mcr	15, 0, r0, cr8, cr7, {0}
	mcr	p15, 0, r0, c7, c5, 0
c00080a4:	ee070f15 	mcr	15, 0, r0, cr7, cr5, {0}

	/* Disable mmu stuff and caches */
	mrc p15, 0, r0, c1, c0, 0
c00080a8:	ee110f10 	mrc	15, 0, r0, cr1, cr0, {0}
	bic r0, r0, #0x00002000
c00080ac:	e3c00a02 	bic	r0, r0, #8192	; 0x2000
	bic r0, r0, #0x00000007
c00080b0:	e3c00007 	bic	r0, r0, #7
	orr r0, r0, #0x00001000
c00080b4:	e3800a01 	orr	r0, r0, #4096	; 0x1000
	orr r0, r0, #0x00000002
c00080b8:	e3800002 	orr	r0, r0, #2
	orr r0, r0, #0x00000800
c00080bc:	e3800b02 	orr	r0, r0, #2048	; 0x800
	mcr p15, 0, r0, c1, c0, 0
c00080c0:	ee010f10 	mcr	15, 0, r0, cr1, cr0, {0}

c00080c4 <init_stack>:

	/* Initialize stacks */
	@ 初始化各种模式下的栈空间
init_stack:
	ldr	r0, stacktop        /*get stack top pointer*/
c00080c4:	e59f0138 	ldr	r0, [pc, #312]	; c0008204 <stacktop>

	/********svc mode stack********/
	mov	sp, r0
c00080c8:	e1a0d000 	mov	sp, r0
	sub	r0, #128*4          /*512 byte  for irq mode of stack*/
c00080cc:	e2400c02 	sub	r0, r0, #512	; 0x200
	/********irq mode stack********/
	msr	cpsr, #0xd2
c00080d0:	e329f0d2 	msr	CPSR_fc, #210	; 0xd2
	mov	sp, r0
c00080d4:	e1a0d000 	mov	sp, r0
	sub	r0, #128*4          /*512 byte  for fiq mode of stack*/
c00080d8:	e2400c02 	sub	r0, r0, #512	; 0x200
	/********fiq mode stack********/
	msr	cpsr, #0xd1
c00080dc:	e329f0d1 	msr	CPSR_fc, #209	; 0xd1
	mov	sp, r0
c00080e0:	e1a0d000 	mov	sp, r0
	sub	r0, #0
c00080e4:	e2400000 	sub	r0, r0, #0
	/********abort mode stack******/
	msr	cpsr, #0xd7
c00080e8:	e329f0d7 	msr	CPSR_fc, #215	; 0xd7
	mov	sp, r0
c00080ec:	e1a0d000 	mov	sp, r0
	sub	r0, #0
c00080f0:	e2400000 	sub	r0, r0, #0
	/********undefine mode stack**/
	msr	cpsr, #0xdb
c00080f4:	e329f0db 	msr	CPSR_fc, #219	; 0xdb
	mov	sp, r0
c00080f8:	e1a0d000 	mov	sp, r0
	sub	r0, #0
c00080fc:	e2400000 	sub	r0, r0, #0
    /***sys mode and usr mode stack***/
	msr	cpsr, #0x10
c0008100:	e329f010 	msr	CPSR_fc, #16
	mov	sp, r0             /*1024 byte  for user mode of stack*/
c0008104:	e1a0d000 	mov	sp, r0

    /******clear bss section********/
	@ 清除BSS段
	ldr	r0, =__bss_start	/* this is auto-relocated! */
c0008108:	e59f00fc 	ldr	r0, [pc, #252]	; c000820c <stacktop+0x8>
	ldr	r1, =__bss_end__	/* this is auto-relocated! */
c000810c:	e59f10fc 	ldr	r1, [pc, #252]	; c0008210 <stacktop+0xc>
	mov	r2, #0x00000000		/* prepare zero to clear BSS */
c0008110:	e3a02000 	mov	r2, #0

c0008114 <clbss_l>:

clbss_l: cmp r0, r1			/* while not at end of BSS */
c0008114:	e1500001 	cmp	r0, r1
	strlo r2, [r0]			/* clear 32-bit BSS word */
c0008118:	35802000 	strcc	r2, [r0]
	addlo r0, r0, #4		/* move to next */
c000811c:	32800004 	addcc	r0, r0, #4
	blo	clbss_l
c0008120:	3afffffb 	bcc	c0008114 <clbss_l>

	/* Call _main */
	ldr pc, =main     @ 汇编调用C  跳转到main.c文件的main函数中
c0008124:	e59ff0e8 	ldr	pc, [pc, #232]	; c0008214 <stacktop+0x10>
c0008128:	e320f000 	nop	{0}
c000812c:	e320f000 	nop	{0}
c0008130:	e320f000 	nop	{0}
c0008134:	e320f000 	nop	{0}
c0008138:	e320f000 	nop	{0}
c000813c:	e320f000 	nop	{0}

c0008140 <undefined_instruction>:
/*
 * Exception handlers
 */
	.align 5  // 2的5次方，=32bit 也就是4字节对其
undefined_instruction:
	b	.
c0008140:	eafffffe 	b	c0008140 <undefined_instruction>
c0008144:	e320f000 	nop	{0}
c0008148:	e320f000 	nop	{0}
c000814c:	e320f000 	nop	{0}
c0008150:	e320f000 	nop	{0}
c0008154:	e320f000 	nop	{0}
c0008158:	e320f000 	nop	{0}
c000815c:	e320f000 	nop	{0}

c0008160 <software_interrupt>:

	.align 5
software_interrupt:
	b	.
c0008160:	eafffffe 	b	c0008160 <software_interrupt>
c0008164:	e320f000 	nop	{0}
c0008168:	e320f000 	nop	{0}
c000816c:	e320f000 	nop	{0}
c0008170:	e320f000 	nop	{0}
c0008174:	e320f000 	nop	{0}
c0008178:	e320f000 	nop	{0}
c000817c:	e320f000 	nop	{0}

c0008180 <prefetch_abort>:

	.align 5
prefetch_abort:
	b	.
c0008180:	eafffffe 	b	c0008180 <prefetch_abort>
c0008184:	e320f000 	nop	{0}
c0008188:	e320f000 	nop	{0}
c000818c:	e320f000 	nop	{0}
c0008190:	e320f000 	nop	{0}
c0008194:	e320f000 	nop	{0}
c0008198:	e320f000 	nop	{0}
c000819c:	e320f000 	nop	{0}

c00081a0 <data_abort>:

	.align 5
data_abort:
	b	.
c00081a0:	eafffffe 	b	c00081a0 <data_abort>
c00081a4:	e320f000 	nop	{0}
c00081a8:	e320f000 	nop	{0}
c00081ac:	e320f000 	nop	{0}
c00081b0:	e320f000 	nop	{0}
c00081b4:	e320f000 	nop	{0}
c00081b8:	e320f000 	nop	{0}
c00081bc:	e320f000 	nop	{0}

c00081c0 <not_used>:

	.align 5
not_used:
	b	.
c00081c0:	eafffffe 	b	c00081c0 <not_used>
c00081c4:	e320f000 	nop	{0}
c00081c8:	e320f000 	nop	{0}
c00081cc:	e320f000 	nop	{0}
c00081d0:	e320f000 	nop	{0}
c00081d4:	e320f000 	nop	{0}
c00081d8:	e320f000 	nop	{0}
c00081dc:	e320f000 	nop	{0}

c00081e0 <irq>:

	.align 5
	.global irq
irq:
	sub  lr, lr, #4
c00081e0:	e24ee004 	sub	lr, lr, #4
	stmfd sp!, {r0-r12, lr}
c00081e4:	e92d5fff 	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
	bl do_irq   @中断处理函数
c00081e8:	eb000540 	bl	c00096f0 <do_irq>
	ldmfd sp!, {r0-r12, pc}^
c00081ec:	e8fd9fff 	ldm	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}^
c00081f0:	e320f000 	nop	{0}
c00081f4:	e320f000 	nop	{0}
c00081f8:	e320f000 	nop	{0}
c00081fc:	e320f000 	nop	{0}

c0008200 <fiq>:

	.align 5
	.global fiq
fiq:
	b .
c0008200:	eafffffe 	b	c0008200 <fiq>

c0008204 <stacktop>:
c0008204:	c000a368 	andgt	sl, r0, r8, ror #6
	ldr	r0,=0xc0008000
c0008208:	c0008000 	andgt	r8, r0, r0
	ldr	r0, =__bss_start	/* this is auto-relocated! */
c000820c:	c000a468 	andgt	sl, r0, r8, ror #8
	ldr	r1, =__bss_end__	/* this is auto-relocated! */
c0008210:	c000a46c 	andgt	sl, r0, ip, ror #8
	ldr pc, =main     @ 汇编调用C  跳转到main.c文件的main函数中
c0008214:	c0009b00 	andgt	r9, r0, r0, lsl #22

c0008218 <__umodsi3>:
	.text
	.globl	 __umodsi3
	.type  __umodsi3       ,function
	.align 0
 __umodsi3      :
	cmp	divisor, #0
c0008218:	e3510000 	cmp	r1, #0
	beq	Ldiv0
c000821c:	0a000026 	beq	c00082bc <Ldiv0>
	mov	curbit, #1
c0008220:	e3a03001 	mov	r3, #1
	cmp	dividend, divisor
c0008224:	e1500001 	cmp	r0, r1
	movcc	pc, lr
c0008228:	31a0f00e 	movcc	pc, lr

c000822c <Loop1>:
Loop1:
	@ Unless the divisor is very big, shift it up in multiples of
	@ four bits, since this is the amount of unwinding in the main
	@ division loop.  Continue shifting until the divisor is
	@ larger than the dividend.
	cmp	divisor, #0x10000000
c000822c:	e3510201 	cmp	r1, #268435456	; 0x10000000
	cmpcc	divisor, dividend
c0008230:	31510000 	cmpcc	r1, r0
	movcc	divisor, divisor, lsl #4
c0008234:	31a01201 	lslcc	r1, r1, #4
	movcc	curbit, curbit, lsl #4
c0008238:	31a03203 	lslcc	r3, r3, #4
	bcc	Loop1
c000823c:	3afffffa 	bcc	c000822c <Loop1>

c0008240 <Lbignum>:
Lbignum:
	@ For very big divisors, we must shift it a bit at a time, or
	@ we will be in danger of overflowing.
	cmp	divisor, #0x80000000
c0008240:	e3510102 	cmp	r1, #-2147483648	; 0x80000000
	cmpcc	divisor, dividend
c0008244:	31510000 	cmpcc	r1, r0
	movcc	divisor, divisor, lsl #1
c0008248:	31a01081 	lslcc	r1, r1, #1
	movcc	curbit, curbit, lsl #1
c000824c:	31a03083 	lslcc	r3, r3, #1
	bcc	Lbignum
c0008250:	3afffffa 	bcc	c0008240 <Lbignum>

c0008254 <Loop3>:
Loop3:
	@ Test for possible subtractions.  On the final pass, this may
	@ subtract too much from the dividend, so keep track of which
	@ subtractions are done, we can fix them up afterwards...
	mov	overdone, #0
c0008254:	e3a02000 	mov	r2, #0
	cmp	dividend, divisor
c0008258:	e1500001 	cmp	r0, r1
	subcs	dividend, dividend, divisor
c000825c:	20400001 	subcs	r0, r0, r1
	cmp	dividend, divisor, lsr #1
c0008260:	e15000a1 	cmp	r0, r1, lsr #1
	subcs	dividend, dividend, divisor, lsr #1
c0008264:	204000a1 	subcs	r0, r0, r1, lsr #1
	orrcs	overdone, overdone, curbit, ror #1
c0008268:	218220e3 	orrcs	r2, r2, r3, ror #1
	cmp	dividend, divisor, lsr #2
c000826c:	e1500121 	cmp	r0, r1, lsr #2
	subcs	dividend, dividend, divisor, lsr #2
c0008270:	20400121 	subcs	r0, r0, r1, lsr #2
	orrcs	overdone, overdone, curbit, ror #2
c0008274:	21822163 	orrcs	r2, r2, r3, ror #2
	cmp	dividend, divisor, lsr #3
c0008278:	e15001a1 	cmp	r0, r1, lsr #3
	subcs	dividend, dividend, divisor, lsr #3
c000827c:	204001a1 	subcs	r0, r0, r1, lsr #3
	orrcs	overdone, overdone, curbit, ror #3
c0008280:	218221e3 	orrcs	r2, r2, r3, ror #3
	mov	ip, curbit
c0008284:	e1a0c003 	mov	ip, r3
	cmp	dividend, #0			@ Early termination?
c0008288:	e3500000 	cmp	r0, #0
	movnes	curbit, curbit, lsr #4		@ No, any more bits to do?
c000828c:	11b03223 	lsrsne	r3, r3, #4
	movne	divisor, divisor, lsr #4
c0008290:	11a01221 	lsrne	r1, r1, #4
	bne	Loop3
c0008294:	1affffee 	bne	c0008254 <Loop3>
	@ the top three bits of "overdone".  Exactly which were not needed
	@ are governed by the position of the bit, stored in ip.
	@ If we terminated early, because dividend became zero,
	@ then none of the below will match, since the bit in ip will not be
	@ in the bottom nibble.
	ands	overdone, overdone, #0xe0000000
c0008298:	e212220e 	ands	r2, r2, #-536870912	; 0xe0000000
	moveq	pc, lr				@ No fixups needed
c000829c:	01a0f00e 	moveq	pc, lr
	tst	overdone, ip, ror #3
c00082a0:	e11201ec 	tst	r2, ip, ror #3
	addne	dividend, dividend, divisor, lsr #3
c00082a4:	108001a1 	addne	r0, r0, r1, lsr #3
	tst	overdone, ip, ror #2
c00082a8:	e112016c 	tst	r2, ip, ror #2
	addne	dividend, dividend, divisor, lsr #2
c00082ac:	10800121 	addne	r0, r0, r1, lsr #2
	tst	overdone, ip, ror #1
c00082b0:	e11200ec 	tst	r2, ip, ror #1
	addne	dividend, dividend, divisor, lsr #1
c00082b4:	108000a1 	addne	r0, r0, r1, lsr #1
	mov	pc, lr
c00082b8:	e1a0f00e 	mov	pc, lr

c00082bc <Ldiv0>:
Ldiv0:
	str	lr, [sp, #-4]!
c00082bc:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
@	bl	 __div0       (PLT)
	mov	r0, #0			@ about as wrong as it could be
c00082c0:	e3a00000 	mov	r0, #0
	ldmia	sp!, {pc}
c00082c4:	e8bd8000 	ldmfd	sp!, {pc}

c00082c8 <__udivsi3>:
	.text
	.globl	 __udivsi3
	.type  __udivsi3       ,function
	.align	0
 __udivsi3      :
	cmp	divisor, #0
c00082c8:	e3510000 	cmp	r1, #0
	beq	Ldiv0
c00082cc:	0a00001f 	beq	c0008350 <Ldiv0>
	mov	curbit, #1
c00082d0:	e3a03001 	mov	r3, #1
	mov	result, #0
c00082d4:	e3a02000 	mov	r2, #0
	cmp	dividend, divisor
c00082d8:	e1500001 	cmp	r0, r1
	bcc	Lgot_result
c00082dc:	3a000019 	bcc	c0008348 <Lgot_result>

c00082e0 <Loop1>:
Loop1:
	@ Unless the divisor is very big, shift it up in multiples of
	@ four bits, since this is the amount of unwinding in the main
	@ division loop.  Continue shifting until the divisor is
	@ larger than the dividend.
	cmp	divisor, #0x10000000
c00082e0:	e3510201 	cmp	r1, #268435456	; 0x10000000
	cmpcc	divisor, dividend
c00082e4:	31510000 	cmpcc	r1, r0
	movcc	divisor, divisor, lsl #4
c00082e8:	31a01201 	lslcc	r1, r1, #4
	movcc	curbit, curbit, lsl #4
c00082ec:	31a03203 	lslcc	r3, r3, #4
	bcc	Loop1
c00082f0:	3afffffa 	bcc	c00082e0 <Loop1>

c00082f4 <Lbignum>:
Lbignum:
	@ For very big divisors, we must shift it a bit at a time, or
	@ we will be in danger of overflowing.
	cmp	divisor, #0x80000000
c00082f4:	e3510102 	cmp	r1, #-2147483648	; 0x80000000
	cmpcc	divisor, dividend
c00082f8:	31510000 	cmpcc	r1, r0
	movcc	divisor, divisor, lsl #1
c00082fc:	31a01081 	lslcc	r1, r1, #1
	movcc	curbit, curbit, lsl #1
c0008300:	31a03083 	lslcc	r3, r3, #1
	bcc	Lbignum
c0008304:	3afffffa 	bcc	c00082f4 <Lbignum>

c0008308 <Loop3>:
Loop3:
	@ Test for possible subtractions, and note which bits
	@ are done in the result.  On the final pass, this may subtract
	@ too much from the dividend, but the result will be ok, since the
	@ "bit" will have been shifted out at the bottom.
	cmp	dividend, divisor
c0008308:	e1500001 	cmp	r0, r1
	subcs	dividend, dividend, divisor
c000830c:	20400001 	subcs	r0, r0, r1
	orrcs	result, result, curbit
c0008310:	21822003 	orrcs	r2, r2, r3
	cmp	dividend, divisor, lsr #1
c0008314:	e15000a1 	cmp	r0, r1, lsr #1
	subcs	dividend, dividend, divisor, lsr #1
c0008318:	204000a1 	subcs	r0, r0, r1, lsr #1
	orrcs	result, result, curbit, lsr #1
c000831c:	218220a3 	orrcs	r2, r2, r3, lsr #1
	cmp	dividend, divisor, lsr #2
c0008320:	e1500121 	cmp	r0, r1, lsr #2
	subcs	dividend, dividend, divisor, lsr #2
c0008324:	20400121 	subcs	r0, r0, r1, lsr #2
	orrcs	result, result, curbit, lsr #2
c0008328:	21822123 	orrcs	r2, r2, r3, lsr #2
	cmp	dividend, divisor, lsr #3
c000832c:	e15001a1 	cmp	r0, r1, lsr #3
	subcs	dividend, dividend, divisor, lsr #3
c0008330:	204001a1 	subcs	r0, r0, r1, lsr #3
	orrcs	result, result, curbit, lsr #3
c0008334:	218221a3 	orrcs	r2, r2, r3, lsr #3
	cmp	dividend, #0			@ Early termination?
c0008338:	e3500000 	cmp	r0, #0
	movnes	curbit, curbit, lsr #4		@ No, any more bits to do?
c000833c:	11b03223 	lsrsne	r3, r3, #4
	movne	divisor, divisor, lsr #4
c0008340:	11a01221 	lsrne	r1, r1, #4
	bne	Loop3
c0008344:	1affffef 	bne	c0008308 <Loop3>

c0008348 <Lgot_result>:
Lgot_result:
	mov	r0, result
c0008348:	e1a00002 	mov	r0, r2
	mov	pc, lr
c000834c:	e1a0f00e 	mov	pc, lr

c0008350 <Ldiv0>:
Ldiv0:
	str	lr, [sp, #-4]!
c0008350:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	@bl	 __div0       (PLT)
	mov	r0, #0			@ about as wrong as it could be
c0008354:	e3a00000 	mov	r0, #0
	ldmia	sp!, {pc}
c0008358:	e8bd8000 	ldmfd	sp!, {pc}

c000835c <__toupper>:
		c -= 'A'-'a';
	return c;
}

static inline unsigned char __toupper(unsigned char c)
{
c000835c:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
c0008360:	e28db000 	add	fp, sp, #0
c0008364:	e24dd004 	sub	sp, sp, #4
c0008368:	e1a03000 	mov	r3, r0
c000836c:	e54b3004 	strb	r3, [fp, #-4]
	if (islower(c))
c0008370:	e55b2004 	ldrb	r2, [fp, #-4]
c0008374:	e30a3368 	movw	r3, #41832	; 0xa368
c0008378:	e34c3000 	movt	r3, #49152	; 0xc000
c000837c:	e7d33002 	ldrb	r3, [r3, r2]
c0008380:	e2033002 	and	r3, r3, #2
c0008384:	e3530000 	cmp	r3, #0
c0008388:	0a000002 	beq	c0008398 <__toupper+0x3c>
		c -= 'a'-'A';
c000838c:	e55b3004 	ldrb	r3, [fp, #-4]
c0008390:	e2433020 	sub	r3, r3, #32
c0008394:	e54b3004 	strb	r3, [fp, #-4]
	return c;
c0008398:	e55b3004 	ldrb	r3, [fp, #-4]
}
c000839c:	e1a00003 	mov	r0, r3
c00083a0:	e28bd000 	add	sp, fp, #0
c00083a4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
c00083a8:	e12fff1e 	bx	lr

c00083ac <simple_strtoul>:
#include <ctype.h>
#include "uart.h"
#define size_t unsigned int

unsigned long simple_strtoul(const char *cp,char **endp,unsigned int base)
{
c00083ac:	e92d4800 	push	{fp, lr}
c00083b0:	e28db004 	add	fp, sp, #4
c00083b4:	e24dd014 	sub	sp, sp, #20
c00083b8:	e50b0010 	str	r0, [fp, #-16]
c00083bc:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
c00083c0:	e50b2018 	str	r2, [fp, #-24]	; 0xffffffe8
	unsigned long result = 0,value;
c00083c4:	e3a03000 	mov	r3, #0
c00083c8:	e50b3008 	str	r3, [fp, #-8]

	if (*cp == '0') {
c00083cc:	e51b3010 	ldr	r3, [fp, #-16]
c00083d0:	e5d33000 	ldrb	r3, [r3]
c00083d4:	e3530030 	cmp	r3, #48	; 0x30
c00083d8:	1a00001a 	bne	c0008448 <simple_strtoul+0x9c>
		cp++;
c00083dc:	e51b3010 	ldr	r3, [fp, #-16]
c00083e0:	e2833001 	add	r3, r3, #1
c00083e4:	e50b3010 	str	r3, [fp, #-16]
		if ((*cp == 'x') && isxdigit(cp[1])) {
c00083e8:	e51b3010 	ldr	r3, [fp, #-16]
c00083ec:	e5d33000 	ldrb	r3, [r3]
c00083f0:	e3530078 	cmp	r3, #120	; 0x78
c00083f4:	1a00000e 	bne	c0008434 <simple_strtoul+0x88>
c00083f8:	e51b3010 	ldr	r3, [fp, #-16]
c00083fc:	e2833001 	add	r3, r3, #1
c0008400:	e5d33000 	ldrb	r3, [r3]
c0008404:	e1a02003 	mov	r2, r3
c0008408:	e30a3368 	movw	r3, #41832	; 0xa368
c000840c:	e34c3000 	movt	r3, #49152	; 0xc000
c0008410:	e7d33002 	ldrb	r3, [r3, r2]
c0008414:	e2033044 	and	r3, r3, #68	; 0x44
c0008418:	e3530000 	cmp	r3, #0
c000841c:	0a000004 	beq	c0008434 <simple_strtoul+0x88>
			base = 16;
c0008420:	e3a03010 	mov	r3, #16
c0008424:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
			cp++;
c0008428:	e51b3010 	ldr	r3, [fp, #-16]
c000842c:	e2833001 	add	r3, r3, #1
c0008430:	e50b3010 	str	r3, [fp, #-16]
		}
		if (!base) {
c0008434:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
c0008438:	e3530000 	cmp	r3, #0
c000843c:	1a000001 	bne	c0008448 <simple_strtoul+0x9c>
			base = 8;
c0008440:	e3a03008 	mov	r3, #8
c0008444:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
		}
	}
	if (!base) {
c0008448:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
c000844c:	e3530000 	cmp	r3, #0
c0008450:	1a00000b 	bne	c0008484 <simple_strtoul+0xd8>
		base = 10;
c0008454:	e3a0300a 	mov	r3, #10
c0008458:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
	}
	while (isxdigit(*cp) && (value = isdigit(*cp) ? *cp-'0' : (islower(*cp)
c000845c:	ea000008 	b	c0008484 <simple_strtoul+0xd8>
	    ? toupper(*cp) : *cp)-'A'+10) < base) {
		result = result*base + value;
c0008460:	e51b3008 	ldr	r3, [fp, #-8]
c0008464:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
c0008468:	e0030392 	mul	r3, r2, r3
c000846c:	e51b200c 	ldr	r2, [fp, #-12]
c0008470:	e0823003 	add	r3, r2, r3
c0008474:	e50b3008 	str	r3, [fp, #-8]
		cp++;
c0008478:	e51b3010 	ldr	r3, [fp, #-16]
c000847c:	e2833001 	add	r3, r3, #1
c0008480:	e50b3010 	str	r3, [fp, #-16]
	while (isxdigit(*cp) && (value = isdigit(*cp) ? *cp-'0' : (islower(*cp)
c0008484:	e51b3010 	ldr	r3, [fp, #-16]
c0008488:	e5d33000 	ldrb	r3, [r3]
c000848c:	e1a02003 	mov	r2, r3
c0008490:	e30a3368 	movw	r3, #41832	; 0xa368
c0008494:	e34c3000 	movt	r3, #49152	; 0xc000
c0008498:	e7d33002 	ldrb	r3, [r3, r2]
c000849c:	e2033044 	and	r3, r3, #68	; 0x44
c00084a0:	e3530000 	cmp	r3, #0
c00084a4:	0a000024 	beq	c000853c <simple_strtoul+0x190>
c00084a8:	e51b3010 	ldr	r3, [fp, #-16]
c00084ac:	e5d33000 	ldrb	r3, [r3]
c00084b0:	e1a02003 	mov	r2, r3
c00084b4:	e30a3368 	movw	r3, #41832	; 0xa368
c00084b8:	e34c3000 	movt	r3, #49152	; 0xc000
c00084bc:	e7d33002 	ldrb	r3, [r3, r2]
c00084c0:	e2033004 	and	r3, r3, #4
c00084c4:	e3530000 	cmp	r3, #0
c00084c8:	0a000003 	beq	c00084dc <simple_strtoul+0x130>
c00084cc:	e51b3010 	ldr	r3, [fp, #-16]
c00084d0:	e5d33000 	ldrb	r3, [r3]
c00084d4:	e2433030 	sub	r3, r3, #48	; 0x30
c00084d8:	ea000012 	b	c0008528 <simple_strtoul+0x17c>
c00084dc:	e51b3010 	ldr	r3, [fp, #-16]
c00084e0:	e5d33000 	ldrb	r3, [r3]
c00084e4:	e1a02003 	mov	r2, r3
c00084e8:	e30a3368 	movw	r3, #41832	; 0xa368
c00084ec:	e34c3000 	movt	r3, #49152	; 0xc000
c00084f0:	e7d33002 	ldrb	r3, [r3, r2]
c00084f4:	e2033002 	and	r3, r3, #2
c00084f8:	e3530000 	cmp	r3, #0
c00084fc:	0a000006 	beq	c000851c <simple_strtoul+0x170>
	    ? toupper(*cp) : *cp)-'A'+10) < base) {
c0008500:	e51b3010 	ldr	r3, [fp, #-16]
c0008504:	e5d33000 	ldrb	r3, [r3]
c0008508:	e1a00003 	mov	r0, r3
c000850c:	ebffff92 	bl	c000835c <__toupper>
c0008510:	e1a03000 	mov	r3, r0
c0008514:	e2433037 	sub	r3, r3, #55	; 0x37
c0008518:	ea000002 	b	c0008528 <simple_strtoul+0x17c>
c000851c:	e51b3010 	ldr	r3, [fp, #-16]
c0008520:	e5d33000 	ldrb	r3, [r3]
c0008524:	e2433037 	sub	r3, r3, #55	; 0x37
	while (isxdigit(*cp) && (value = isdigit(*cp) ? *cp-'0' : (islower(*cp)
c0008528:	e50b300c 	str	r3, [fp, #-12]
c000852c:	e51b200c 	ldr	r2, [fp, #-12]
c0008530:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
c0008534:	e1520003 	cmp	r2, r3
c0008538:	3affffc8 	bcc	c0008460 <simple_strtoul+0xb4>
	}
	if (endp)
c000853c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
c0008540:	e3530000 	cmp	r3, #0
c0008544:	0a000002 	beq	c0008554 <simple_strtoul+0x1a8>
		*endp = (char *)cp;
c0008548:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
c000854c:	e51b2010 	ldr	r2, [fp, #-16]
c0008550:	e5832000 	str	r2, [r3]
	return result;
c0008554:	e51b3008 	ldr	r3, [fp, #-8]
}
c0008558:	e1a00003 	mov	r0, r3
c000855c:	e24bd004 	sub	sp, fp, #4
c0008560:	e8bd8800 	pop	{fp, pc}

c0008564 <simple_strtol>:

long simple_strtol(const char *cp,char **endp,unsigned int base)
{
c0008564:	e92d4800 	push	{fp, lr}
c0008568:	e28db004 	add	fp, sp, #4
c000856c:	e24dd00c 	sub	sp, sp, #12
c0008570:	e50b0008 	str	r0, [fp, #-8]
c0008574:	e50b100c 	str	r1, [fp, #-12]
c0008578:	e50b2010 	str	r2, [fp, #-16]
	if(*cp=='-')
c000857c:	e51b3008 	ldr	r3, [fp, #-8]
c0008580:	e5d33000 	ldrb	r3, [r3]
c0008584:	e353002d 	cmp	r3, #45	; 0x2d
c0008588:	1a000008 	bne	c00085b0 <simple_strtol+0x4c>
		return -simple_strtoul(cp+1,endp,base);
c000858c:	e51b3008 	ldr	r3, [fp, #-8]
c0008590:	e2833001 	add	r3, r3, #1
c0008594:	e51b2010 	ldr	r2, [fp, #-16]
c0008598:	e51b100c 	ldr	r1, [fp, #-12]
c000859c:	e1a00003 	mov	r0, r3
c00085a0:	ebffff81 	bl	c00083ac <simple_strtoul>
c00085a4:	e1a03000 	mov	r3, r0
c00085a8:	e2633000 	rsb	r3, r3, #0
c00085ac:	ea000004 	b	c00085c4 <simple_strtol+0x60>
	return simple_strtoul(cp,endp,base);
c00085b0:	e51b2010 	ldr	r2, [fp, #-16]
c00085b4:	e51b100c 	ldr	r1, [fp, #-12]
c00085b8:	e51b0008 	ldr	r0, [fp, #-8]
c00085bc:	ebffff7a 	bl	c00083ac <simple_strtoul>
c00085c0:	e1a03000 	mov	r3, r0
}
c00085c4:	e1a00003 	mov	r0, r3
c00085c8:	e24bd004 	sub	sp, fp, #4
c00085cc:	e8bd8800 	pop	{fp, pc}

c00085d0 <skip_atoi>:

/* we use this so that we can do without the ctype library */
#define is_digit(c)	((c) >= '0' && (c) <= '9')

static int skip_atoi(const char **s)
{
c00085d0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
c00085d4:	e28db000 	add	fp, sp, #0
c00085d8:	e24dd008 	sub	sp, sp, #8
c00085dc:	e50b0008 	str	r0, [fp, #-8]
	int i=0;
c00085e0:	e3a03000 	mov	r3, #0
c00085e4:	e50b3004 	str	r3, [fp, #-4]

	while (is_digit(**s))
c00085e8:	ea00000e 	b	c0008628 <skip_atoi+0x58>
		i = i*10 + *((*s)++) - '0';
c00085ec:	e51b2004 	ldr	r2, [fp, #-4]
c00085f0:	e1a03002 	mov	r3, r2
c00085f4:	e1a03103 	lsl	r3, r3, #2
c00085f8:	e0833002 	add	r3, r3, r2
c00085fc:	e1a03083 	lsl	r3, r3, #1
c0008600:	e1a00003 	mov	r0, r3
c0008604:	e51b3008 	ldr	r3, [fp, #-8]
c0008608:	e5933000 	ldr	r3, [r3]
c000860c:	e2831001 	add	r1, r3, #1
c0008610:	e51b2008 	ldr	r2, [fp, #-8]
c0008614:	e5821000 	str	r1, [r2]
c0008618:	e5d33000 	ldrb	r3, [r3]
c000861c:	e0803003 	add	r3, r0, r3
c0008620:	e2433030 	sub	r3, r3, #48	; 0x30
c0008624:	e50b3004 	str	r3, [fp, #-4]
	while (is_digit(**s))
c0008628:	e51b3008 	ldr	r3, [fp, #-8]
c000862c:	e5933000 	ldr	r3, [r3]
c0008630:	e5d33000 	ldrb	r3, [r3]
c0008634:	e353002f 	cmp	r3, #47	; 0x2f
c0008638:	9a000004 	bls	c0008650 <skip_atoi+0x80>
c000863c:	e51b3008 	ldr	r3, [fp, #-8]
c0008640:	e5933000 	ldr	r3, [r3]
c0008644:	e5d33000 	ldrb	r3, [r3]
c0008648:	e3530039 	cmp	r3, #57	; 0x39
c000864c:	9affffe6 	bls	c00085ec <skip_atoi+0x1c>
	return i;
c0008650:	e51b3004 	ldr	r3, [fp, #-4]
}
c0008654:	e1a00003 	mov	r0, r3
c0008658:	e28bd000 	add	sp, fp, #0
c000865c:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
c0008660:	e12fff1e 	bx	lr

c0008664 <number>:
#ifdef CFG_64BIT_VSPRINTF
static char * number(char * str, long long num, unsigned int base, int size, int precision ,int type)
#else
static char * number(char * str, long num, unsigned int base, int size, int precision ,int type)
#endif
{
c0008664:	e92d4800 	push	{fp, lr}
c0008668:	e28db004 	add	fp, sp, #4
c000866c:	e24dd068 	sub	sp, sp, #104	; 0x68
c0008670:	e50b0060 	str	r0, [fp, #-96]	; 0xffffffa0
c0008674:	e50b1064 	str	r1, [fp, #-100]	; 0xffffff9c
c0008678:	e50b2068 	str	r2, [fp, #-104]	; 0xffffff98
c000867c:	e50b306c 	str	r3, [fp, #-108]	; 0xffffff94
	char c,sign,tmp[66];
	const char *digits="0123456789abcdefghijklmnopqrstuvwxyz";
c0008680:	e3093b10 	movw	r3, #39696	; 0x9b10
c0008684:	e34c3000 	movt	r3, #49152	; 0xc000
c0008688:	e50b300c 	str	r3, [fp, #-12]
	int i;

	if (type & LARGE)
c000868c:	e59b3008 	ldr	r3, [fp, #8]
c0008690:	e2033040 	and	r3, r3, #64	; 0x40
c0008694:	e3530000 	cmp	r3, #0
c0008698:	0a000002 	beq	c00086a8 <number+0x44>
		digits = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";
c000869c:	e3093b38 	movw	r3, #39736	; 0x9b38
c00086a0:	e34c3000 	movt	r3, #49152	; 0xc000
c00086a4:	e50b300c 	str	r3, [fp, #-12]
	if (type & LEFT)
c00086a8:	e59b3008 	ldr	r3, [fp, #8]
c00086ac:	e2033010 	and	r3, r3, #16
c00086b0:	e3530000 	cmp	r3, #0
c00086b4:	0a000002 	beq	c00086c4 <number+0x60>
		type &= ~ZEROPAD;
c00086b8:	e59b3008 	ldr	r3, [fp, #8]
c00086bc:	e3c33001 	bic	r3, r3, #1
c00086c0:	e58b3008 	str	r3, [fp, #8]
	if (base < 2 || base > 36)
c00086c4:	e51b3068 	ldr	r3, [fp, #-104]	; 0xffffff98
c00086c8:	e3530001 	cmp	r3, #1
c00086cc:	9a000002 	bls	c00086dc <number+0x78>
c00086d0:	e51b3068 	ldr	r3, [fp, #-104]	; 0xffffff98
c00086d4:	e3530024 	cmp	r3, #36	; 0x24
c00086d8:	9a000001 	bls	c00086e4 <number+0x80>
		return 0;
c00086dc:	e3a03000 	mov	r3, #0
c00086e0:	ea0000d5 	b	c0008a3c <number+0x3d8>
	c = (type & ZEROPAD) ? '0' : ' ';
c00086e4:	e59b3008 	ldr	r3, [fp, #8]
c00086e8:	e2033001 	and	r3, r3, #1
c00086ec:	e3530000 	cmp	r3, #0
c00086f0:	0a000001 	beq	c00086fc <number+0x98>
c00086f4:	e3a03030 	mov	r3, #48	; 0x30
c00086f8:	ea000000 	b	c0008700 <number+0x9c>
c00086fc:	e3a03020 	mov	r3, #32
c0008700:	e54b3011 	strb	r3, [fp, #-17]	; 0xffffffef
	sign = 0;
c0008704:	e3a03000 	mov	r3, #0
c0008708:	e54b3005 	strb	r3, [fp, #-5]
	if (type & SIGN) {
c000870c:	e59b3008 	ldr	r3, [fp, #8]
c0008710:	e2033002 	and	r3, r3, #2
c0008714:	e3530000 	cmp	r3, #0
c0008718:	0a00001e 	beq	c0008798 <number+0x134>
		if (num < 0) {
c000871c:	e51b3064 	ldr	r3, [fp, #-100]	; 0xffffff9c
c0008720:	e3530000 	cmp	r3, #0
c0008724:	aa000008 	bge	c000874c <number+0xe8>
			sign = '-';
c0008728:	e3a0302d 	mov	r3, #45	; 0x2d
c000872c:	e54b3005 	strb	r3, [fp, #-5]
			num = -num;
c0008730:	e51b3064 	ldr	r3, [fp, #-100]	; 0xffffff9c
c0008734:	e2633000 	rsb	r3, r3, #0
c0008738:	e50b3064 	str	r3, [fp, #-100]	; 0xffffff9c
			size--;
c000873c:	e51b306c 	ldr	r3, [fp, #-108]	; 0xffffff94
c0008740:	e2433001 	sub	r3, r3, #1
c0008744:	e50b306c 	str	r3, [fp, #-108]	; 0xffffff94
c0008748:	ea000012 	b	c0008798 <number+0x134>
		} else if (type & PLUS) {
c000874c:	e59b3008 	ldr	r3, [fp, #8]
c0008750:	e2033004 	and	r3, r3, #4
c0008754:	e3530000 	cmp	r3, #0
c0008758:	0a000005 	beq	c0008774 <number+0x110>
			sign = '+';
c000875c:	e3a0302b 	mov	r3, #43	; 0x2b
c0008760:	e54b3005 	strb	r3, [fp, #-5]
			size--;
c0008764:	e51b306c 	ldr	r3, [fp, #-108]	; 0xffffff94
c0008768:	e2433001 	sub	r3, r3, #1
c000876c:	e50b306c 	str	r3, [fp, #-108]	; 0xffffff94
c0008770:	ea000008 	b	c0008798 <number+0x134>
		} else if (type & SPACE) {
c0008774:	e59b3008 	ldr	r3, [fp, #8]
c0008778:	e2033008 	and	r3, r3, #8
c000877c:	e3530000 	cmp	r3, #0
c0008780:	0a000004 	beq	c0008798 <number+0x134>
			sign = ' ';
c0008784:	e3a03020 	mov	r3, #32
c0008788:	e54b3005 	strb	r3, [fp, #-5]
			size--;
c000878c:	e51b306c 	ldr	r3, [fp, #-108]	; 0xffffff94
c0008790:	e2433001 	sub	r3, r3, #1
c0008794:	e50b306c 	str	r3, [fp, #-108]	; 0xffffff94
		}
	}
	if (type & SPECIAL) {
c0008798:	e59b3008 	ldr	r3, [fp, #8]
c000879c:	e2033020 	and	r3, r3, #32
c00087a0:	e3530000 	cmp	r3, #0
c00087a4:	0a00000c 	beq	c00087dc <number+0x178>
		if (base == 16)
c00087a8:	e51b3068 	ldr	r3, [fp, #-104]	; 0xffffff98
c00087ac:	e3530010 	cmp	r3, #16
c00087b0:	1a000003 	bne	c00087c4 <number+0x160>
			size -= 2;
c00087b4:	e51b306c 	ldr	r3, [fp, #-108]	; 0xffffff94
c00087b8:	e2433002 	sub	r3, r3, #2
c00087bc:	e50b306c 	str	r3, [fp, #-108]	; 0xffffff94
c00087c0:	ea000005 	b	c00087dc <number+0x178>
		else if (base == 8)
c00087c4:	e51b3068 	ldr	r3, [fp, #-104]	; 0xffffff98
c00087c8:	e3530008 	cmp	r3, #8
c00087cc:	1a000002 	bne	c00087dc <number+0x178>
			size--;
c00087d0:	e51b306c 	ldr	r3, [fp, #-108]	; 0xffffff94
c00087d4:	e2433001 	sub	r3, r3, #1
c00087d8:	e50b306c 	str	r3, [fp, #-108]	; 0xffffff94
	}
	i = 0;
c00087dc:	e3a03000 	mov	r3, #0
c00087e0:	e50b3010 	str	r3, [fp, #-16]
	if (num == 0)
c00087e4:	e51b3064 	ldr	r3, [fp, #-100]	; 0xffffff9c
c00087e8:	e3530000 	cmp	r3, #0
c00087ec:	1a000022 	bne	c000887c <number+0x218>
		tmp[i++]='0';
c00087f0:	e51b3010 	ldr	r3, [fp, #-16]
c00087f4:	e2832001 	add	r2, r3, #1
c00087f8:	e50b2010 	str	r2, [fp, #-16]
c00087fc:	e24b2004 	sub	r2, fp, #4
c0008800:	e0823003 	add	r3, r2, r3
c0008804:	e3a02030 	mov	r2, #48	; 0x30
c0008808:	e5432058 	strb	r2, [r3, #-88]	; 0xffffffa8
c000880c:	ea00001d 	b	c0008888 <number+0x224>
	else while (num != 0)
	if (i > precision)
c0008810:	e51b2010 	ldr	r2, [fp, #-16]
c0008814:	e59b3004 	ldr	r3, [fp, #4]
c0008818:	e1520003 	cmp	r2, r3
c000881c:	da000016 	ble	c000887c <number+0x218>
		tmp[i++] = digits[do_div(num,base)];
c0008820:	e51b3064 	ldr	r3, [fp, #-100]	; 0xffffff9c
c0008824:	e51b1068 	ldr	r1, [fp, #-104]	; 0xffffff98
c0008828:	e1a00003 	mov	r0, r3
c000882c:	ebfffe79 	bl	c0008218 <__umodsi3>
c0008830:	e1a03000 	mov	r3, r0
c0008834:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
c0008838:	e51b3064 	ldr	r3, [fp, #-100]	; 0xffffff9c
c000883c:	e51b1068 	ldr	r1, [fp, #-104]	; 0xffffff98
c0008840:	e1a00003 	mov	r0, r3
c0008844:	ebfffe9f 	bl	c00082c8 <__udivsi3>
c0008848:	e1a03000 	mov	r3, r0
c000884c:	e50b3064 	str	r3, [fp, #-100]	; 0xffffff9c
c0008850:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
c0008854:	e1a02003 	mov	r2, r3
c0008858:	e51b300c 	ldr	r3, [fp, #-12]
c000885c:	e0832002 	add	r2, r3, r2
c0008860:	e51b3010 	ldr	r3, [fp, #-16]
c0008864:	e2831001 	add	r1, r3, #1
c0008868:	e50b1010 	str	r1, [fp, #-16]
c000886c:	e5d22000 	ldrb	r2, [r2]
c0008870:	e24b1004 	sub	r1, fp, #4
c0008874:	e0813003 	add	r3, r1, r3
c0008878:	e5432058 	strb	r2, [r3, #-88]	; 0xffffffa8
	else while (num != 0)
c000887c:	e51b3064 	ldr	r3, [fp, #-100]	; 0xffffff9c
c0008880:	e3530000 	cmp	r3, #0
c0008884:	1affffe1 	bne	c0008810 <number+0x1ac>
	precision = i;
c0008888:	e51b3010 	ldr	r3, [fp, #-16]
c000888c:	e58b3004 	str	r3, [fp, #4]
	size -= precision;
c0008890:	e51b206c 	ldr	r2, [fp, #-108]	; 0xffffff94
c0008894:	e59b3004 	ldr	r3, [fp, #4]
c0008898:	e0423003 	sub	r3, r2, r3
c000889c:	e50b306c 	str	r3, [fp, #-108]	; 0xffffff94
	if (!(type&(ZEROPAD+LEFT)))
c00088a0:	e59b3008 	ldr	r3, [fp, #8]
c00088a4:	e2033011 	and	r3, r3, #17
c00088a8:	e3530000 	cmp	r3, #0
c00088ac:	1a00000a 	bne	c00088dc <number+0x278>
		while(size-->0)
c00088b0:	ea000004 	b	c00088c8 <number+0x264>
			*str++ = ' ';
c00088b4:	e51b3060 	ldr	r3, [fp, #-96]	; 0xffffffa0
c00088b8:	e2832001 	add	r2, r3, #1
c00088bc:	e50b2060 	str	r2, [fp, #-96]	; 0xffffffa0
c00088c0:	e3a02020 	mov	r2, #32
c00088c4:	e5c32000 	strb	r2, [r3]
		while(size-->0)
c00088c8:	e51b306c 	ldr	r3, [fp, #-108]	; 0xffffff94
c00088cc:	e2432001 	sub	r2, r3, #1
c00088d0:	e50b206c 	str	r2, [fp, #-108]	; 0xffffff94
c00088d4:	e3530000 	cmp	r3, #0
c00088d8:	cafffff5 	bgt	c00088b4 <number+0x250>
	if (sign)
c00088dc:	e55b3005 	ldrb	r3, [fp, #-5]
c00088e0:	e3530000 	cmp	r3, #0
c00088e4:	0a000004 	beq	c00088fc <number+0x298>
		*str++ = sign;
c00088e8:	e51b3060 	ldr	r3, [fp, #-96]	; 0xffffffa0
c00088ec:	e2832001 	add	r2, r3, #1
c00088f0:	e50b2060 	str	r2, [fp, #-96]	; 0xffffffa0
c00088f4:	e55b2005 	ldrb	r2, [fp, #-5]
c00088f8:	e5c32000 	strb	r2, [r3]
	if (type & SPECIAL) {
c00088fc:	e59b3008 	ldr	r3, [fp, #8]
c0008900:	e2033020 	and	r3, r3, #32
c0008904:	e3530000 	cmp	r3, #0
c0008908:	0a000016 	beq	c0008968 <number+0x304>
		if (base==8)
c000890c:	e51b3068 	ldr	r3, [fp, #-104]	; 0xffffff98
c0008910:	e3530008 	cmp	r3, #8
c0008914:	1a000005 	bne	c0008930 <number+0x2cc>
			*str++ = '0';
c0008918:	e51b3060 	ldr	r3, [fp, #-96]	; 0xffffffa0
c000891c:	e2832001 	add	r2, r3, #1
c0008920:	e50b2060 	str	r2, [fp, #-96]	; 0xffffffa0
c0008924:	e3a02030 	mov	r2, #48	; 0x30
c0008928:	e5c32000 	strb	r2, [r3]
c000892c:	ea00000d 	b	c0008968 <number+0x304>
		else if (base==16) {
c0008930:	e51b3068 	ldr	r3, [fp, #-104]	; 0xffffff98
c0008934:	e3530010 	cmp	r3, #16
c0008938:	1a00000a 	bne	c0008968 <number+0x304>
			*str++ = '0';
c000893c:	e51b3060 	ldr	r3, [fp, #-96]	; 0xffffffa0
c0008940:	e2832001 	add	r2, r3, #1
c0008944:	e50b2060 	str	r2, [fp, #-96]	; 0xffffffa0
c0008948:	e3a02030 	mov	r2, #48	; 0x30
c000894c:	e5c32000 	strb	r2, [r3]
			*str++ = digits[33];
c0008950:	e51b3060 	ldr	r3, [fp, #-96]	; 0xffffffa0
c0008954:	e2832001 	add	r2, r3, #1
c0008958:	e50b2060 	str	r2, [fp, #-96]	; 0xffffffa0
c000895c:	e51b200c 	ldr	r2, [fp, #-12]
c0008960:	e5d22021 	ldrb	r2, [r2, #33]	; 0x21
c0008964:	e5c32000 	strb	r2, [r3]
		}
	}
	if (!(type & LEFT))
c0008968:	e59b3008 	ldr	r3, [fp, #8]
c000896c:	e2033010 	and	r3, r3, #16
c0008970:	e3530000 	cmp	r3, #0
c0008974:	1a000010 	bne	c00089bc <number+0x358>
		while (size-- > 0)
c0008978:	ea000004 	b	c0008990 <number+0x32c>
			*str++ = c;
c000897c:	e51b3060 	ldr	r3, [fp, #-96]	; 0xffffffa0
c0008980:	e2832001 	add	r2, r3, #1
c0008984:	e50b2060 	str	r2, [fp, #-96]	; 0xffffffa0
c0008988:	e55b2011 	ldrb	r2, [fp, #-17]	; 0xffffffef
c000898c:	e5c32000 	strb	r2, [r3]
		while (size-- > 0)
c0008990:	e51b306c 	ldr	r3, [fp, #-108]	; 0xffffff94
c0008994:	e2432001 	sub	r2, r3, #1
c0008998:	e50b206c 	str	r2, [fp, #-108]	; 0xffffff94
c000899c:	e3530000 	cmp	r3, #0
c00089a0:	cafffff5 	bgt	c000897c <number+0x318>
	while (i < precision--)
c00089a4:	ea000004 	b	c00089bc <number+0x358>
		*str++ = '0';
c00089a8:	e51b3060 	ldr	r3, [fp, #-96]	; 0xffffffa0
c00089ac:	e2832001 	add	r2, r3, #1
c00089b0:	e50b2060 	str	r2, [fp, #-96]	; 0xffffffa0
c00089b4:	e3a02030 	mov	r2, #48	; 0x30
c00089b8:	e5c32000 	strb	r2, [r3]
	while (i < precision--)
c00089bc:	e59b3004 	ldr	r3, [fp, #4]
c00089c0:	e2432001 	sub	r2, r3, #1
c00089c4:	e58b2004 	str	r2, [fp, #4]
c00089c8:	e51b2010 	ldr	r2, [fp, #-16]
c00089cc:	e1520003 	cmp	r2, r3
c00089d0:	bafffff4 	blt	c00089a8 <number+0x344>
	while (i-- > 0)
c00089d4:	ea000007 	b	c00089f8 <number+0x394>
		*str++ = tmp[i];
c00089d8:	e51b3060 	ldr	r3, [fp, #-96]	; 0xffffffa0
c00089dc:	e2832001 	add	r2, r3, #1
c00089e0:	e50b2060 	str	r2, [fp, #-96]	; 0xffffffa0
c00089e4:	e24b105c 	sub	r1, fp, #92	; 0x5c
c00089e8:	e51b2010 	ldr	r2, [fp, #-16]
c00089ec:	e0812002 	add	r2, r1, r2
c00089f0:	e5d22000 	ldrb	r2, [r2]
c00089f4:	e5c32000 	strb	r2, [r3]
	while (i-- > 0)
c00089f8:	e51b3010 	ldr	r3, [fp, #-16]
c00089fc:	e2432001 	sub	r2, r3, #1
c0008a00:	e50b2010 	str	r2, [fp, #-16]
c0008a04:	e3530000 	cmp	r3, #0
c0008a08:	cafffff2 	bgt	c00089d8 <number+0x374>
	while (size-- > 0)
c0008a0c:	ea000004 	b	c0008a24 <number+0x3c0>
		*str++ = ' ';
c0008a10:	e51b3060 	ldr	r3, [fp, #-96]	; 0xffffffa0
c0008a14:	e2832001 	add	r2, r3, #1
c0008a18:	e50b2060 	str	r2, [fp, #-96]	; 0xffffffa0
c0008a1c:	e3a02020 	mov	r2, #32
c0008a20:	e5c32000 	strb	r2, [r3]
	while (size-- > 0)
c0008a24:	e51b306c 	ldr	r3, [fp, #-108]	; 0xffffff94
c0008a28:	e2432001 	sub	r2, r3, #1
c0008a2c:	e50b206c 	str	r2, [fp, #-108]	; 0xffffff94
c0008a30:	e3530000 	cmp	r3, #0
c0008a34:	cafffff5 	bgt	c0008a10 <number+0x3ac>
	return str;
c0008a38:	e51b3060 	ldr	r3, [fp, #-96]	; 0xffffffa0
}
c0008a3c:	e1a00003 	mov	r0, r3
c0008a40:	e24bd004 	sub	sp, fp, #4
c0008a44:	e8bd8800 	pop	{fp, pc}

c0008a48 <strnlen>:

/* Forward decl. needed for IP address printing stuff... */
int sprintf(char * buf, const char *fmt, ...);
size_t strnlen(const char * s, size_t count)
{
c0008a48:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
c0008a4c:	e28db000 	add	fp, sp, #0
c0008a50:	e24dd00c 	sub	sp, sp, #12
c0008a54:	e50b0008 	str	r0, [fp, #-8]
c0008a58:	e50b100c 	str	r1, [fp, #-12]
	const char *sc;

	for (sc = s; count-- && *sc != '\0'; ++sc)
c0008a5c:	e51b3008 	ldr	r3, [fp, #-8]
c0008a60:	e50b3004 	str	r3, [fp, #-4]
c0008a64:	ea000002 	b	c0008a74 <strnlen+0x2c>
c0008a68:	e51b3004 	ldr	r3, [fp, #-4]
c0008a6c:	e2833001 	add	r3, r3, #1
c0008a70:	e50b3004 	str	r3, [fp, #-4]
c0008a74:	e51b300c 	ldr	r3, [fp, #-12]
c0008a78:	e2432001 	sub	r2, r3, #1
c0008a7c:	e50b200c 	str	r2, [fp, #-12]
c0008a80:	e3530000 	cmp	r3, #0
c0008a84:	0a000003 	beq	c0008a98 <strnlen+0x50>
c0008a88:	e51b3004 	ldr	r3, [fp, #-4]
c0008a8c:	e5d33000 	ldrb	r3, [r3]
c0008a90:	e3530000 	cmp	r3, #0
c0008a94:	1afffff3 	bne	c0008a68 <strnlen+0x20>
		/* nothing */;
	return sc - s;
c0008a98:	e51b2004 	ldr	r2, [fp, #-4]
c0008a9c:	e51b3008 	ldr	r3, [fp, #-8]
c0008aa0:	e0423003 	sub	r3, r2, r3
}
c0008aa4:	e1a00003 	mov	r0, r3
c0008aa8:	e28bd000 	add	sp, fp, #0
c0008aac:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
c0008ab0:	e12fff1e 	bx	lr

c0008ab4 <vsprintf>:
int vsprintf(char *buf, const char *fmt, va_list args)
{
c0008ab4:	e92d4800 	push	{fp, lr}
c0008ab8:	e28db004 	add	fp, sp, #4
c0008abc:	e24dd044 	sub	sp, sp, #68	; 0x44
c0008ac0:	e50b0038 	str	r0, [fp, #-56]	; 0xffffffc8
c0008ac4:	e50b103c 	str	r1, [fp, #-60]	; 0xffffffc4
c0008ac8:	e50b2040 	str	r2, [fp, #-64]	; 0xffffffc0
	int field_width;	/* width of output field */
	int precision;		/* min. # of digits for integers; max
				   number of chars for from string */
	int qualifier;		/* 'h', 'l', or 'q' for integer fields */

	for (str=buf ; *fmt ; ++fmt) {
c0008acc:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
c0008ad0:	e50b3014 	str	r3, [fp, #-20]	; 0xffffffec
c0008ad4:	ea00021b 	b	c0009348 <vsprintf+0x894>
		if (*fmt != '%') {
c0008ad8:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
c0008adc:	e5d33000 	ldrb	r3, [r3]
c0008ae0:	e3530025 	cmp	r3, #37	; 0x25
c0008ae4:	0a000006 	beq	c0008b04 <vsprintf+0x50>
			*str++ = *fmt;
c0008ae8:	e51b203c 	ldr	r2, [fp, #-60]	; 0xffffffc4
c0008aec:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
c0008af0:	e2831001 	add	r1, r3, #1
c0008af4:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
c0008af8:	e5d22000 	ldrb	r2, [r2]
c0008afc:	e5c32000 	strb	r2, [r3]
			continue;
c0008b00:	ea00020d 	b	c000933c <vsprintf+0x888>
		}

		/* process flags */
		flags = 0;
c0008b04:	e3a03000 	mov	r3, #0
c0008b08:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
		repeat:
			++fmt;		/* this also skips first '%' */
c0008b0c:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
c0008b10:	e2833001 	add	r3, r3, #1
c0008b14:	e50b303c 	str	r3, [fp, #-60]	; 0xffffffc4
			switch (*fmt) {
c0008b18:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
c0008b1c:	e5d33000 	ldrb	r3, [r3]
c0008b20:	e2433020 	sub	r3, r3, #32
c0008b24:	e3530010 	cmp	r3, #16
c0008b28:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
c0008b2c:	ea000024 	b	c0008bc4 <vsprintf+0x110>
c0008b30:	c0008b94 	mulgt	r0, r4, fp
c0008b34:	c0008bc4 	andgt	r8, r0, r4, asr #23
c0008b38:	c0008bc4 	andgt	r8, r0, r4, asr #23
c0008b3c:	c0008ba4 	andgt	r8, r0, r4, lsr #23
c0008b40:	c0008bc4 	andgt	r8, r0, r4, asr #23
c0008b44:	c0008bc4 	andgt	r8, r0, r4, asr #23
c0008b48:	c0008bc4 	andgt	r8, r0, r4, asr #23
c0008b4c:	c0008bc4 	andgt	r8, r0, r4, asr #23
c0008b50:	c0008bc4 	andgt	r8, r0, r4, asr #23
c0008b54:	c0008bc4 	andgt	r8, r0, r4, asr #23
c0008b58:	c0008bc4 	andgt	r8, r0, r4, asr #23
c0008b5c:	c0008b84 	andgt	r8, r0, r4, lsl #23
c0008b60:	c0008bc4 	andgt	r8, r0, r4, asr #23
c0008b64:	c0008b74 	andgt	r8, r0, r4, ror fp
c0008b68:	c0008bc4 	andgt	r8, r0, r4, asr #23
c0008b6c:	c0008bc4 	andgt	r8, r0, r4, asr #23
c0008b70:	c0008bb4 			; <UNDEFINED> instruction: 0xc0008bb4
				case '-': flags |= LEFT; goto repeat;
c0008b74:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
c0008b78:	e3833010 	orr	r3, r3, #16
c0008b7c:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
c0008b80:	eaffffe1 	b	c0008b0c <vsprintf+0x58>
				case '+': flags |= PLUS; goto repeat;
c0008b84:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
c0008b88:	e3833004 	orr	r3, r3, #4
c0008b8c:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
c0008b90:	eaffffdd 	b	c0008b0c <vsprintf+0x58>
				case ' ': flags |= SPACE; goto repeat;
c0008b94:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
c0008b98:	e3833008 	orr	r3, r3, #8
c0008b9c:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
c0008ba0:	eaffffd9 	b	c0008b0c <vsprintf+0x58>
				case '#': flags |= SPECIAL; goto repeat;
c0008ba4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
c0008ba8:	e3833020 	orr	r3, r3, #32
c0008bac:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
c0008bb0:	eaffffd5 	b	c0008b0c <vsprintf+0x58>
				case '0': flags |= ZEROPAD; goto repeat;
c0008bb4:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
c0008bb8:	e3833001 	orr	r3, r3, #1
c0008bbc:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
c0008bc0:	eaffffd1 	b	c0008b0c <vsprintf+0x58>
				}

		/* get field width */
		field_width = -1;
c0008bc4:	e3e03000 	mvn	r3, #0
c0008bc8:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
		if (is_digit(*fmt))
c0008bcc:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
c0008bd0:	e5d33000 	ldrb	r3, [r3]
c0008bd4:	e353002f 	cmp	r3, #47	; 0x2f
c0008bd8:	9a000008 	bls	c0008c00 <vsprintf+0x14c>
c0008bdc:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
c0008be0:	e5d33000 	ldrb	r3, [r3]
c0008be4:	e3530039 	cmp	r3, #57	; 0x39
c0008be8:	8a000004 	bhi	c0008c00 <vsprintf+0x14c>
			field_width = skip_atoi(&fmt);
c0008bec:	e24b303c 	sub	r3, fp, #60	; 0x3c
c0008bf0:	e1a00003 	mov	r0, r3
c0008bf4:	ebfffe75 	bl	c00085d0 <skip_atoi>
c0008bf8:	e50b0020 	str	r0, [fp, #-32]	; 0xffffffe0
c0008bfc:	ea000014 	b	c0008c54 <vsprintf+0x1a0>
		else if (*fmt == '*') {
c0008c00:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
c0008c04:	e5d33000 	ldrb	r3, [r3]
c0008c08:	e353002a 	cmp	r3, #42	; 0x2a
c0008c0c:	1a000010 	bne	c0008c54 <vsprintf+0x1a0>
			++fmt;
c0008c10:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
c0008c14:	e2833001 	add	r3, r3, #1
c0008c18:	e50b303c 	str	r3, [fp, #-60]	; 0xffffffc4
			/* it's the next argument */
			field_width = va_arg(args, int);
c0008c1c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
c0008c20:	e2832004 	add	r2, r3, #4
c0008c24:	e50b2040 	str	r2, [fp, #-64]	; 0xffffffc0
c0008c28:	e5933000 	ldr	r3, [r3]
c0008c2c:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
			if (field_width < 0) {
c0008c30:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
c0008c34:	e3530000 	cmp	r3, #0
c0008c38:	aa000005 	bge	c0008c54 <vsprintf+0x1a0>
				field_width = -field_width;
c0008c3c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
c0008c40:	e2633000 	rsb	r3, r3, #0
c0008c44:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
				flags |= LEFT;
c0008c48:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
c0008c4c:	e3833010 	orr	r3, r3, #16
c0008c50:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
			}
		}

		/* get the precision */
		precision = -1;
c0008c54:	e3e03000 	mvn	r3, #0
c0008c58:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
		if (*fmt == '.') {
c0008c5c:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
c0008c60:	e5d33000 	ldrb	r3, [r3]
c0008c64:	e353002e 	cmp	r3, #46	; 0x2e
c0008c68:	1a000020 	bne	c0008cf0 <vsprintf+0x23c>
			++fmt;
c0008c6c:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
c0008c70:	e2833001 	add	r3, r3, #1
c0008c74:	e50b303c 	str	r3, [fp, #-60]	; 0xffffffc4
			if (is_digit(*fmt))
c0008c78:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
c0008c7c:	e5d33000 	ldrb	r3, [r3]
c0008c80:	e353002f 	cmp	r3, #47	; 0x2f
c0008c84:	9a000008 	bls	c0008cac <vsprintf+0x1f8>
c0008c88:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
c0008c8c:	e5d33000 	ldrb	r3, [r3]
c0008c90:	e3530039 	cmp	r3, #57	; 0x39
c0008c94:	8a000004 	bhi	c0008cac <vsprintf+0x1f8>
				precision = skip_atoi(&fmt);
c0008c98:	e24b303c 	sub	r3, fp, #60	; 0x3c
c0008c9c:	e1a00003 	mov	r0, r3
c0008ca0:	ebfffe4a 	bl	c00085d0 <skip_atoi>
c0008ca4:	e50b0024 	str	r0, [fp, #-36]	; 0xffffffdc
c0008ca8:	ea00000b 	b	c0008cdc <vsprintf+0x228>
			else if (*fmt == '*') {
c0008cac:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
c0008cb0:	e5d33000 	ldrb	r3, [r3]
c0008cb4:	e353002a 	cmp	r3, #42	; 0x2a
c0008cb8:	1a000007 	bne	c0008cdc <vsprintf+0x228>
				++fmt;
c0008cbc:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
c0008cc0:	e2833001 	add	r3, r3, #1
c0008cc4:	e50b303c 	str	r3, [fp, #-60]	; 0xffffffc4
				/* it's the next argument */
				precision = va_arg(args, int);
c0008cc8:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
c0008ccc:	e2832004 	add	r2, r3, #4
c0008cd0:	e50b2040 	str	r2, [fp, #-64]	; 0xffffffc0
c0008cd4:	e5933000 	ldr	r3, [r3]
c0008cd8:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
			}
			if (precision < 0)
c0008cdc:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
c0008ce0:	e3530000 	cmp	r3, #0
c0008ce4:	aa000001 	bge	c0008cf0 <vsprintf+0x23c>
				precision = 0;
c0008ce8:	e3a03000 	mov	r3, #0
c0008cec:	e50b3024 	str	r3, [fp, #-36]	; 0xffffffdc
		}

		/* get the conversion qualifier */
		qualifier = -1;
c0008cf0:	e3e03000 	mvn	r3, #0
c0008cf4:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
		if (*fmt == 'h' || *fmt == 'l' || *fmt == 'L' ||
c0008cf8:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
c0008cfc:	e5d33000 	ldrb	r3, [r3]
c0008d00:	e3530068 	cmp	r3, #104	; 0x68
c0008d04:	0a000017 	beq	c0008d68 <vsprintf+0x2b4>
c0008d08:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
c0008d0c:	e5d33000 	ldrb	r3, [r3]
c0008d10:	e353006c 	cmp	r3, #108	; 0x6c
c0008d14:	0a000013 	beq	c0008d68 <vsprintf+0x2b4>
c0008d18:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
c0008d1c:	e5d33000 	ldrb	r3, [r3]
c0008d20:	e353004c 	cmp	r3, #76	; 0x4c
c0008d24:	0a00000f 	beq	c0008d68 <vsprintf+0x2b4>
		    *fmt == 'Z' || *fmt == 'z' || *fmt == 't' ||
c0008d28:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
c0008d2c:	e5d33000 	ldrb	r3, [r3]
		if (*fmt == 'h' || *fmt == 'l' || *fmt == 'L' ||
c0008d30:	e353005a 	cmp	r3, #90	; 0x5a
c0008d34:	0a00000b 	beq	c0008d68 <vsprintf+0x2b4>
		    *fmt == 'Z' || *fmt == 'z' || *fmt == 't' ||
c0008d38:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
c0008d3c:	e5d33000 	ldrb	r3, [r3]
c0008d40:	e353007a 	cmp	r3, #122	; 0x7a
c0008d44:	0a000007 	beq	c0008d68 <vsprintf+0x2b4>
c0008d48:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
c0008d4c:	e5d33000 	ldrb	r3, [r3]
c0008d50:	e3530074 	cmp	r3, #116	; 0x74
c0008d54:	0a000003 	beq	c0008d68 <vsprintf+0x2b4>
		    *fmt == 'q' ) {
c0008d58:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
c0008d5c:	e5d33000 	ldrb	r3, [r3]
		    *fmt == 'Z' || *fmt == 'z' || *fmt == 't' ||
c0008d60:	e3530071 	cmp	r3, #113	; 0x71
c0008d64:	1a000012 	bne	c0008db4 <vsprintf+0x300>
			qualifier = *fmt;
c0008d68:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
c0008d6c:	e5d33000 	ldrb	r3, [r3]
c0008d70:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
			if (qualifier == 'l' && *(fmt+1) == 'l') {
c0008d74:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
c0008d78:	e353006c 	cmp	r3, #108	; 0x6c
c0008d7c:	1a000009 	bne	c0008da8 <vsprintf+0x2f4>
c0008d80:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
c0008d84:	e2833001 	add	r3, r3, #1
c0008d88:	e5d33000 	ldrb	r3, [r3]
c0008d8c:	e353006c 	cmp	r3, #108	; 0x6c
c0008d90:	1a000004 	bne	c0008da8 <vsprintf+0x2f4>
				qualifier = 'q';
c0008d94:	e3a03071 	mov	r3, #113	; 0x71
c0008d98:	e50b3028 	str	r3, [fp, #-40]	; 0xffffffd8
				++fmt;
c0008d9c:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
c0008da0:	e2833001 	add	r3, r3, #1
c0008da4:	e50b303c 	str	r3, [fp, #-60]	; 0xffffffc4
			}
			++fmt;
c0008da8:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
c0008dac:	e2833001 	add	r3, r3, #1
c0008db0:	e50b303c 	str	r3, [fp, #-60]	; 0xffffffc4
		}

		/* default base */
		base = 10;
c0008db4:	e3a0300a 	mov	r3, #10
c0008db8:	e50b3010 	str	r3, [fp, #-16]

		switch (*fmt) {
c0008dbc:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
c0008dc0:	e5d33000 	ldrb	r3, [r3]
c0008dc4:	e2433025 	sub	r3, r3, #37	; 0x25
c0008dc8:	e3530053 	cmp	r3, #83	; 0x53
c0008dcc:	979ff103 	ldrls	pc, [pc, r3, lsl #2]
c0008dd0:	ea0000fc 	b	c00091c8 <vsprintf+0x714>
c0008dd4:	c000917c 	andgt	r9, r0, ip, ror r1
c0008dd8:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008ddc:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008de0:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008de4:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008de8:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008dec:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008df0:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008df4:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008df8:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008dfc:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e00:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e04:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e08:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e0c:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e10:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e14:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e18:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e1c:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e20:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e24:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e28:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e2c:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e30:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e34:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e38:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e3c:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e40:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e44:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e48:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e4c:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e50:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e54:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e58:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e5c:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e60:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e64:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e68:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e6c:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e70:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e74:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e78:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e7c:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e80:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e84:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e88:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e8c:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e90:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e94:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e98:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008e9c:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008ea0:	c00091a0 	andgt	r9, r0, r0, lsr #3
c0008ea4:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008ea8:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008eac:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008eb0:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008eb4:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008eb8:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008ebc:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008ec0:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008ec4:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008ec8:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008ecc:	c0008f24 	andgt	r8, r0, r4, lsr #30
c0008ed0:	c00091b8 			; <UNDEFINED> instruction: 0xc00091b8
c0008ed4:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008ed8:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008edc:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008ee0:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008ee4:	c00091b8 			; <UNDEFINED> instruction: 0xc00091b8
c0008ee8:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008eec:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008ef0:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008ef4:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008ef8:	c0009118 	andgt	r9, r0, r8, lsl r1
c0008efc:	c0009194 	mulgt	r0, r4, r1
c0008f00:	c00090bc 	strhgt	r9, [r0], -ip
c0008f04:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008f08:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008f0c:	c0008fbc 			; <UNDEFINED> instruction: 0xc0008fbc
c0008f10:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008f14:	c0009218 	andgt	r9, r0, r8, lsl r2
c0008f18:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008f1c:	c00091c8 	andgt	r9, r0, r8, asr #3
c0008f20:	c00091ac 	andgt	r9, r0, ip, lsr #3
		case 'c':
			if (!(flags & LEFT))
c0008f24:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
c0008f28:	e2033010 	and	r3, r3, #16
c0008f2c:	e3530000 	cmp	r3, #0
c0008f30:	1a00000b 	bne	c0008f64 <vsprintf+0x4b0>
				while (--field_width > 0)
c0008f34:	ea000004 	b	c0008f4c <vsprintf+0x498>
					*str++ = ' ';
c0008f38:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
c0008f3c:	e2832001 	add	r2, r3, #1
c0008f40:	e50b2014 	str	r2, [fp, #-20]	; 0xffffffec
c0008f44:	e3a02020 	mov	r2, #32
c0008f48:	e5c32000 	strb	r2, [r3]
				while (--field_width > 0)
c0008f4c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
c0008f50:	e2433001 	sub	r3, r3, #1
c0008f54:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
c0008f58:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
c0008f5c:	e3530000 	cmp	r3, #0
c0008f60:	cafffff4 	bgt	c0008f38 <vsprintf+0x484>
			*str++ = (unsigned char) va_arg(args, int);
c0008f64:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
c0008f68:	e2832004 	add	r2, r3, #4
c0008f6c:	e50b2040 	str	r2, [fp, #-64]	; 0xffffffc0
c0008f70:	e5931000 	ldr	r1, [r3]
c0008f74:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
c0008f78:	e2832001 	add	r2, r3, #1
c0008f7c:	e50b2014 	str	r2, [fp, #-20]	; 0xffffffec
c0008f80:	e6ef2071 	uxtb	r2, r1
c0008f84:	e5c32000 	strb	r2, [r3]
			while (--field_width > 0)
c0008f88:	ea000004 	b	c0008fa0 <vsprintf+0x4ec>
				*str++ = ' ';
c0008f8c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
c0008f90:	e2832001 	add	r2, r3, #1
c0008f94:	e50b2014 	str	r2, [fp, #-20]	; 0xffffffec
c0008f98:	e3a02020 	mov	r2, #32
c0008f9c:	e5c32000 	strb	r2, [r3]
			while (--field_width > 0)
c0008fa0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
c0008fa4:	e2433001 	sub	r3, r3, #1
c0008fa8:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
c0008fac:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
c0008fb0:	e3530000 	cmp	r3, #0
c0008fb4:	cafffff4 	bgt	c0008f8c <vsprintf+0x4d8>
			continue;
c0008fb8:	ea0000df 	b	c000933c <vsprintf+0x888>

		case 's':
			s = va_arg(args, char *);
c0008fbc:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
c0008fc0:	e2832004 	add	r2, r3, #4
c0008fc4:	e50b2040 	str	r2, [fp, #-64]	; 0xffffffc0
c0008fc8:	e5933000 	ldr	r3, [r3]
c0008fcc:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
			if (!s)
c0008fd0:	e51b3018 	ldr	r3, [fp, #-24]	; 0xffffffe8
c0008fd4:	e3530000 	cmp	r3, #0
c0008fd8:	1a000002 	bne	c0008fe8 <vsprintf+0x534>
				s = "<NULL>";
c0008fdc:	e3093b60 	movw	r3, #39776	; 0x9b60
c0008fe0:	e34c3000 	movt	r3, #49152	; 0xc000
c0008fe4:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8

			len = strnlen(s, precision);
c0008fe8:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
c0008fec:	e1a01003 	mov	r1, r3
c0008ff0:	e51b0018 	ldr	r0, [fp, #-24]	; 0xffffffe8
c0008ff4:	ebfffe93 	bl	c0008a48 <strnlen>
c0008ff8:	e1a03000 	mov	r3, r0
c0008ffc:	e50b302c 	str	r3, [fp, #-44]	; 0xffffffd4

			if (!(flags & LEFT))
c0009000:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
c0009004:	e2033010 	and	r3, r3, #16
c0009008:	e3530000 	cmp	r3, #0
c000900c:	1a00000b 	bne	c0009040 <vsprintf+0x58c>
				while (len < field_width--)
c0009010:	ea000004 	b	c0009028 <vsprintf+0x574>
					*str++ = ' ';
c0009014:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
c0009018:	e2832001 	add	r2, r3, #1
c000901c:	e50b2014 	str	r2, [fp, #-20]	; 0xffffffec
c0009020:	e3a02020 	mov	r2, #32
c0009024:	e5c32000 	strb	r2, [r3]
				while (len < field_width--)
c0009028:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
c000902c:	e2432001 	sub	r2, r3, #1
c0009030:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
c0009034:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
c0009038:	e1520003 	cmp	r2, r3
c000903c:	bafffff4 	blt	c0009014 <vsprintf+0x560>
			for (i = 0; i < len; ++i)
c0009040:	e3a03000 	mov	r3, #0
c0009044:	e50b300c 	str	r3, [fp, #-12]
c0009048:	ea00000a 	b	c0009078 <vsprintf+0x5c4>
				*str++ = *s++;
c000904c:	e51b2018 	ldr	r2, [fp, #-24]	; 0xffffffe8
c0009050:	e2823001 	add	r3, r2, #1
c0009054:	e50b3018 	str	r3, [fp, #-24]	; 0xffffffe8
c0009058:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
c000905c:	e2831001 	add	r1, r3, #1
c0009060:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
c0009064:	e5d22000 	ldrb	r2, [r2]
c0009068:	e5c32000 	strb	r2, [r3]
			for (i = 0; i < len; ++i)
c000906c:	e51b300c 	ldr	r3, [fp, #-12]
c0009070:	e2833001 	add	r3, r3, #1
c0009074:	e50b300c 	str	r3, [fp, #-12]
c0009078:	e51b200c 	ldr	r2, [fp, #-12]
c000907c:	e51b302c 	ldr	r3, [fp, #-44]	; 0xffffffd4
c0009080:	e1520003 	cmp	r2, r3
c0009084:	bafffff0 	blt	c000904c <vsprintf+0x598>
			while (len < field_width--)
c0009088:	ea000004 	b	c00090a0 <vsprintf+0x5ec>
				*str++ = ' ';
c000908c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
c0009090:	e2832001 	add	r2, r3, #1
c0009094:	e50b2014 	str	r2, [fp, #-20]	; 0xffffffec
c0009098:	e3a02020 	mov	r2, #32
c000909c:	e5c32000 	strb	r2, [r3]
			while (len < field_width--)
c00090a0:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
c00090a4:	e2432001 	sub	r2, r3, #1
c00090a8:	e50b2020 	str	r2, [fp, #-32]	; 0xffffffe0
c00090ac:	e51b202c 	ldr	r2, [fp, #-44]	; 0xffffffd4
c00090b0:	e1520003 	cmp	r2, r3
c00090b4:	bafffff4 	blt	c000908c <vsprintf+0x5d8>
			continue;
c00090b8:	ea00009f 	b	c000933c <vsprintf+0x888>

		case 'p':
			if (field_width == -1) {
c00090bc:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
c00090c0:	e3730001 	cmn	r3, #1
c00090c4:	1a000004 	bne	c00090dc <vsprintf+0x628>
				field_width = 2*sizeof(void *);
c00090c8:	e3a03008 	mov	r3, #8
c00090cc:	e50b3020 	str	r3, [fp, #-32]	; 0xffffffe0
				flags |= ZEROPAD;
c00090d0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
c00090d4:	e3833001 	orr	r3, r3, #1
c00090d8:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
			}
			str = number(str,
				(unsigned long) va_arg(args, void *), 16,
c00090dc:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
c00090e0:	e2832004 	add	r2, r3, #4
c00090e4:	e50b2040 	str	r2, [fp, #-64]	; 0xffffffc0
c00090e8:	e5933000 	ldr	r3, [r3]
			str = number(str,
c00090ec:	e1a01003 	mov	r1, r3
c00090f0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
c00090f4:	e58d3004 	str	r3, [sp, #4]
c00090f8:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
c00090fc:	e58d3000 	str	r3, [sp]
c0009100:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
c0009104:	e3a02010 	mov	r2, #16
c0009108:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
c000910c:	ebfffd54 	bl	c0008664 <number>
c0009110:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
				field_width, precision, flags);
			continue;
c0009114:	ea000088 	b	c000933c <vsprintf+0x888>


		case 'n':
			if (qualifier == 'l') {
c0009118:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
c000911c:	e353006c 	cmp	r3, #108	; 0x6c
c0009120:	1a00000a 	bne	c0009150 <vsprintf+0x69c>
				long * ip = va_arg(args, long *);
c0009124:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
c0009128:	e2832004 	add	r2, r3, #4
c000912c:	e50b2040 	str	r2, [fp, #-64]	; 0xffffffc0
c0009130:	e5933000 	ldr	r3, [r3]
c0009134:	e50b3034 	str	r3, [fp, #-52]	; 0xffffffcc
				*ip = (str - buf);
c0009138:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
c000913c:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
c0009140:	e0422003 	sub	r2, r2, r3
c0009144:	e51b3034 	ldr	r3, [fp, #-52]	; 0xffffffcc
c0009148:	e5832000 	str	r2, [r3]
			} else {
				int * ip = va_arg(args, int *);
				*ip = (str - buf);
			}
			continue;
c000914c:	ea00007a 	b	c000933c <vsprintf+0x888>
				int * ip = va_arg(args, int *);
c0009150:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
c0009154:	e2832004 	add	r2, r3, #4
c0009158:	e50b2040 	str	r2, [fp, #-64]	; 0xffffffc0
c000915c:	e5933000 	ldr	r3, [r3]
c0009160:	e50b3030 	str	r3, [fp, #-48]	; 0xffffffd0
				*ip = (str - buf);
c0009164:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
c0009168:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
c000916c:	e0422003 	sub	r2, r2, r3
c0009170:	e51b3030 	ldr	r3, [fp, #-48]	; 0xffffffd0
c0009174:	e5832000 	str	r2, [r3]
			continue;
c0009178:	ea00006f 	b	c000933c <vsprintf+0x888>

		case '%':
			*str++ = '%';
c000917c:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
c0009180:	e2832001 	add	r2, r3, #1
c0009184:	e50b2014 	str	r2, [fp, #-20]	; 0xffffffec
c0009188:	e3a02025 	mov	r2, #37	; 0x25
c000918c:	e5c32000 	strb	r2, [r3]
			continue;
c0009190:	ea000069 	b	c000933c <vsprintf+0x888>

		/* integer number formats - set up the flags and "break" */
		case 'o':
			base = 8;
c0009194:	e3a03008 	mov	r3, #8
c0009198:	e50b3010 	str	r3, [fp, #-16]
			break;
c000919c:	ea00001e 	b	c000921c <vsprintf+0x768>

		case 'X':
			flags |= LARGE;
c00091a0:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
c00091a4:	e3833040 	orr	r3, r3, #64	; 0x40
c00091a8:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
		case 'x':
			base = 16;
c00091ac:	e3a03010 	mov	r3, #16
c00091b0:	e50b3010 	str	r3, [fp, #-16]
			break;
c00091b4:	ea000018 	b	c000921c <vsprintf+0x768>

		case 'd':
		case 'i':
			flags |= SIGN;
c00091b8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
c00091bc:	e3833002 	orr	r3, r3, #2
c00091c0:	e50b301c 	str	r3, [fp, #-28]	; 0xffffffe4
		case 'u':
			break;
c00091c4:	ea000013 	b	c0009218 <vsprintf+0x764>

		default:
			*str++ = '%';
c00091c8:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
c00091cc:	e2832001 	add	r2, r3, #1
c00091d0:	e50b2014 	str	r2, [fp, #-20]	; 0xffffffec
c00091d4:	e3a02025 	mov	r2, #37	; 0x25
c00091d8:	e5c32000 	strb	r2, [r3]
			if (*fmt)
c00091dc:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
c00091e0:	e5d33000 	ldrb	r3, [r3]
c00091e4:	e3530000 	cmp	r3, #0
c00091e8:	0a000006 	beq	c0009208 <vsprintf+0x754>
				*str++ = *fmt;
c00091ec:	e51b203c 	ldr	r2, [fp, #-60]	; 0xffffffc4
c00091f0:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
c00091f4:	e2831001 	add	r1, r3, #1
c00091f8:	e50b1014 	str	r1, [fp, #-20]	; 0xffffffec
c00091fc:	e5d22000 	ldrb	r2, [r2]
c0009200:	e5c32000 	strb	r2, [r3]
			else
				--fmt;
			continue;
c0009204:	ea00004c 	b	c000933c <vsprintf+0x888>
				--fmt;
c0009208:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
c000920c:	e2433001 	sub	r3, r3, #1
c0009210:	e50b303c 	str	r3, [fp, #-60]	; 0xffffffc4
			continue;
c0009214:	ea000048 	b	c000933c <vsprintf+0x888>
			break;
c0009218:	e320f000 	nop	{0}
#ifdef CFG_64BIT_VSPRINTF
		if (qualifier == 'q')  /* "quad" for 64 bit variables */
			num = va_arg(args, unsigned long long);
		else
#endif
		if (qualifier == 'l') {
c000921c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
c0009220:	e353006c 	cmp	r3, #108	; 0x6c
c0009224:	1a000005 	bne	c0009240 <vsprintf+0x78c>
			num = va_arg(args, unsigned long);
c0009228:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
c000922c:	e2832004 	add	r2, r3, #4
c0009230:	e50b2040 	str	r2, [fp, #-64]	; 0xffffffc0
c0009234:	e5933000 	ldr	r3, [r3]
c0009238:	e50b3008 	str	r3, [fp, #-8]
c000923c:	ea000034 	b	c0009314 <vsprintf+0x860>
		} else if (qualifier == 'Z' || qualifier == 'z') {
c0009240:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
c0009244:	e353005a 	cmp	r3, #90	; 0x5a
c0009248:	0a000002 	beq	c0009258 <vsprintf+0x7a4>
c000924c:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
c0009250:	e353007a 	cmp	r3, #122	; 0x7a
c0009254:	1a000005 	bne	c0009270 <vsprintf+0x7bc>
			num = va_arg(args, size_t);
c0009258:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
c000925c:	e2832004 	add	r2, r3, #4
c0009260:	e50b2040 	str	r2, [fp, #-64]	; 0xffffffc0
c0009264:	e5933000 	ldr	r3, [r3]
c0009268:	e50b3008 	str	r3, [fp, #-8]
c000926c:	ea000028 	b	c0009314 <vsprintf+0x860>
		} else if (qualifier == 't') {
c0009270:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
c0009274:	e3530074 	cmp	r3, #116	; 0x74
c0009278:	1a000005 	bne	c0009294 <vsprintf+0x7e0>
			num = va_arg(args, long);
c000927c:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
c0009280:	e2832004 	add	r2, r3, #4
c0009284:	e50b2040 	str	r2, [fp, #-64]	; 0xffffffc0
c0009288:	e5933000 	ldr	r3, [r3]
c000928c:	e50b3008 	str	r3, [fp, #-8]
c0009290:	ea00001f 	b	c0009314 <vsprintf+0x860>
		} else if (qualifier == 'h') {
c0009294:	e51b3028 	ldr	r3, [fp, #-40]	; 0xffffffd8
c0009298:	e3530068 	cmp	r3, #104	; 0x68
c000929c:	1a00000d 	bne	c00092d8 <vsprintf+0x824>
			num = (unsigned short) va_arg(args, int);
c00092a0:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
c00092a4:	e2832004 	add	r2, r3, #4
c00092a8:	e50b2040 	str	r2, [fp, #-64]	; 0xffffffc0
c00092ac:	e5933000 	ldr	r3, [r3]
c00092b0:	e6ff3073 	uxth	r3, r3
c00092b4:	e50b3008 	str	r3, [fp, #-8]
			if (flags & SIGN)
c00092b8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
c00092bc:	e2033002 	and	r3, r3, #2
c00092c0:	e3530000 	cmp	r3, #0
c00092c4:	0a000012 	beq	c0009314 <vsprintf+0x860>
				num = (short) num;
c00092c8:	e51b3008 	ldr	r3, [fp, #-8]
c00092cc:	e6bf3073 	sxth	r3, r3
c00092d0:	e50b3008 	str	r3, [fp, #-8]
c00092d4:	ea00000e 	b	c0009314 <vsprintf+0x860>
		} else if (flags & SIGN)
c00092d8:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
c00092dc:	e2033002 	and	r3, r3, #2
c00092e0:	e3530000 	cmp	r3, #0
c00092e4:	0a000005 	beq	c0009300 <vsprintf+0x84c>
			num = va_arg(args, int);
c00092e8:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
c00092ec:	e2832004 	add	r2, r3, #4
c00092f0:	e50b2040 	str	r2, [fp, #-64]	; 0xffffffc0
c00092f4:	e5933000 	ldr	r3, [r3]
c00092f8:	e50b3008 	str	r3, [fp, #-8]
c00092fc:	ea000004 	b	c0009314 <vsprintf+0x860>
		else
			num = va_arg(args, unsigned int);
c0009300:	e51b3040 	ldr	r3, [fp, #-64]	; 0xffffffc0
c0009304:	e2832004 	add	r2, r3, #4
c0009308:	e50b2040 	str	r2, [fp, #-64]	; 0xffffffc0
c000930c:	e5933000 	ldr	r3, [r3]
c0009310:	e50b3008 	str	r3, [fp, #-8]
		str = number(str, num, base, field_width, precision, flags);
c0009314:	e51b1008 	ldr	r1, [fp, #-8]
c0009318:	e51b2010 	ldr	r2, [fp, #-16]
c000931c:	e51b301c 	ldr	r3, [fp, #-28]	; 0xffffffe4
c0009320:	e58d3004 	str	r3, [sp, #4]
c0009324:	e51b3024 	ldr	r3, [fp, #-36]	; 0xffffffdc
c0009328:	e58d3000 	str	r3, [sp]
c000932c:	e51b3020 	ldr	r3, [fp, #-32]	; 0xffffffe0
c0009330:	e51b0014 	ldr	r0, [fp, #-20]	; 0xffffffec
c0009334:	ebfffcca 	bl	c0008664 <number>
c0009338:	e50b0014 	str	r0, [fp, #-20]	; 0xffffffec
	for (str=buf ; *fmt ; ++fmt) {
c000933c:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
c0009340:	e2833001 	add	r3, r3, #1
c0009344:	e50b303c 	str	r3, [fp, #-60]	; 0xffffffc4
c0009348:	e51b303c 	ldr	r3, [fp, #-60]	; 0xffffffc4
c000934c:	e5d33000 	ldrb	r3, [r3]
c0009350:	e3530000 	cmp	r3, #0
c0009354:	1afffddf 	bne	c0008ad8 <vsprintf+0x24>
	}
	*str = '\0';
c0009358:	e51b3014 	ldr	r3, [fp, #-20]	; 0xffffffec
c000935c:	e3a02000 	mov	r2, #0
c0009360:	e5c32000 	strb	r2, [r3]
	return str-buf;
c0009364:	e51b2014 	ldr	r2, [fp, #-20]	; 0xffffffec
c0009368:	e51b3038 	ldr	r3, [fp, #-56]	; 0xffffffc8
c000936c:	e0423003 	sub	r3, r2, r3
}
c0009370:	e1a00003 	mov	r0, r3
c0009374:	e24bd004 	sub	sp, fp, #4
c0009378:	e8bd8800 	pop	{fp, pc}

c000937c <sprintf>:

int sprintf(char * buf, const char *fmt, ...)
{
c000937c:	e92d000e 	push	{r1, r2, r3}
c0009380:	e92d4800 	push	{fp, lr}
c0009384:	e28db004 	add	fp, sp, #4
c0009388:	e24dd00c 	sub	sp, sp, #12
c000938c:	e50b0010 	str	r0, [fp, #-16]
	va_list args;
	int i;

	va_start(args, fmt);
c0009390:	e28b3008 	add	r3, fp, #8
c0009394:	e50b300c 	str	r3, [fp, #-12]
	i=vsprintf(buf,fmt,args);
c0009398:	e51b300c 	ldr	r3, [fp, #-12]
c000939c:	e1a02003 	mov	r2, r3
c00093a0:	e59b1004 	ldr	r1, [fp, #4]
c00093a4:	e51b0010 	ldr	r0, [fp, #-16]
c00093a8:	ebfffdc1 	bl	c0008ab4 <vsprintf>
c00093ac:	e50b0008 	str	r0, [fp, #-8]
	va_end(args);
	return i;
c00093b0:	e51b3008 	ldr	r3, [fp, #-8]
}
c00093b4:	e1a00003 	mov	r0, r3
c00093b8:	e24bd004 	sub	sp, fp, #4
c00093bc:	e8bd4800 	pop	{fp, lr}
c00093c0:	e28dd00c 	add	sp, sp, #12
c00093c4:	e12fff1e 	bx	lr

c00093c8 <printf>:

void printf (const char *fmt, ...)
{
c00093c8:	e92d000f 	push	{r0, r1, r2, r3}
c00093cc:	e92d4800 	push	{fp, lr}
c00093d0:	e28db004 	add	fp, sp, #4
c00093d4:	e24dd068 	sub	sp, sp, #104	; 0x68
	va_list args;
	char printbuffer[100];
	va_start (args, fmt);
c00093d8:	e28b3008 	add	r3, fp, #8
c00093dc:	e50b3008 	str	r3, [fp, #-8]

	/* For this to work, printbuffer must be larger than
	 * anything we ever want to print.
	 */
	vsprintf (printbuffer, fmt, args);
c00093e0:	e51b2008 	ldr	r2, [fp, #-8]
c00093e4:	e24b306c 	sub	r3, fp, #108	; 0x6c
c00093e8:	e59b1004 	ldr	r1, [fp, #4]
c00093ec:	e1a00003 	mov	r0, r3
c00093f0:	ebfffdaf 	bl	c0008ab4 <vsprintf>
	va_end (args);
	__uart_puts (printbuffer);
c00093f4:	e24b306c 	sub	r3, fp, #108	; 0x6c
c00093f8:	e1a00003 	mov	r0, r3
c00093fc:	eb000096 	bl	c000965c <__uart_puts>
}
c0009400:	e320f000 	nop	{0}
c0009404:	e24bd004 	sub	sp, fp, #4
c0009408:	e8bd4800 	pop	{fp, lr}
c000940c:	e28dd010 	add	sp, sp, #16
c0009410:	e12fff1e 	bx	lr

c0009414 <__uart_init>:
#include "stm32mp1xx_gpio.h"
#include "stm32mp1xx_uart.h"
// UART4_TX : PG11  AF6
// UART4_RX : PB2   AF8
void __uart_init()
{
c0009414:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
c0009418:	e28db000 	add	fp, sp, #0
   	// GPIOB2 设置为复用功能
   	GPIOB->MODER &= (~(0x3 << 4));
c000941c:	e3a03a03 	mov	r3, #12288	; 0x3000
c0009420:	e3453000 	movt	r3, #20480	; 0x5000
c0009424:	e5932000 	ldr	r2, [r3]
c0009428:	e3a03a03 	mov	r3, #12288	; 0x3000
c000942c:	e3453000 	movt	r3, #20480	; 0x5000
c0009430:	e3c22030 	bic	r2, r2, #48	; 0x30
c0009434:	e5832000 	str	r2, [r3]
   	GPIOB->MODER |= (0x2 << 4);
c0009438:	e3a03a03 	mov	r3, #12288	; 0x3000
c000943c:	e3453000 	movt	r3, #20480	; 0x5000
c0009440:	e5932000 	ldr	r2, [r3]
c0009444:	e3a03a03 	mov	r3, #12288	; 0x3000
c0009448:	e3453000 	movt	r3, #20480	; 0x5000
c000944c:	e3822020 	orr	r2, r2, #32
c0009450:	e5832000 	str	r2, [r3]
	GPIOB->AFRL &= (~(0xF << 8));
c0009454:	e3a03a03 	mov	r3, #12288	; 0x3000
c0009458:	e3453000 	movt	r3, #20480	; 0x5000
c000945c:	e5932020 	ldr	r2, [r3, #32]
c0009460:	e3a03a03 	mov	r3, #12288	; 0x3000
c0009464:	e3453000 	movt	r3, #20480	; 0x5000
c0009468:	e3c22c0f 	bic	r2, r2, #3840	; 0xf00
c000946c:	e5832020 	str	r2, [r3, #32]
	GPIOB->AFRL |= (0x8 << 8);
c0009470:	e3a03a03 	mov	r3, #12288	; 0x3000
c0009474:	e3453000 	movt	r3, #20480	; 0x5000
c0009478:	e5932020 	ldr	r2, [r3, #32]
c000947c:	e3a03a03 	mov	r3, #12288	; 0x3000
c0009480:	e3453000 	movt	r3, #20480	; 0x5000
c0009484:	e3822b02 	orr	r2, r2, #2048	; 0x800
c0009488:	e5832020 	str	r2, [r3, #32]
	// GPIOG11 设置为复用功能 
	GPIOG->MODER &= (~(0x3 << 22));
c000948c:	e3a03902 	mov	r3, #32768	; 0x8000
c0009490:	e3453000 	movt	r3, #20480	; 0x5000
c0009494:	e5932000 	ldr	r2, [r3]
c0009498:	e3a03902 	mov	r3, #32768	; 0x8000
c000949c:	e3453000 	movt	r3, #20480	; 0x5000
c00094a0:	e3c22503 	bic	r2, r2, #12582912	; 0xc00000
c00094a4:	e5832000 	str	r2, [r3]
	GPIOG->MODER |= (0x2 << 4);
c00094a8:	e3a03902 	mov	r3, #32768	; 0x8000
c00094ac:	e3453000 	movt	r3, #20480	; 0x5000
c00094b0:	e5932000 	ldr	r2, [r3]
c00094b4:	e3a03902 	mov	r3, #32768	; 0x8000
c00094b8:	e3453000 	movt	r3, #20480	; 0x5000
c00094bc:	e3822020 	orr	r2, r2, #32
c00094c0:	e5832000 	str	r2, [r3]
	GPIOG->AFRH &= (~(0xF << 12));
c00094c4:	e3a03902 	mov	r3, #32768	; 0x8000
c00094c8:	e3453000 	movt	r3, #20480	; 0x5000
c00094cc:	e5932024 	ldr	r2, [r3, #36]	; 0x24
c00094d0:	e3a03902 	mov	r3, #32768	; 0x8000
c00094d4:	e3453000 	movt	r3, #20480	; 0x5000
c00094d8:	e3c22a0f 	bic	r2, r2, #61440	; 0xf000
c00094dc:	e5832024 	str	r2, [r3, #36]	; 0x24
	GPIOG->AFRH |= (0x6 << 12);
c00094e0:	e3a03902 	mov	r3, #32768	; 0x8000
c00094e4:	e3453000 	movt	r3, #20480	; 0x5000
c00094e8:	e5932024 	ldr	r2, [r3, #36]	; 0x24
c00094ec:	e3a03902 	mov	r3, #32768	; 0x8000
c00094f0:	e3453000 	movt	r3, #20480	; 0x5000
c00094f4:	e3822a06 	orr	r2, r2, #24576	; 0x6000
c00094f8:	e5832024 	str	r2, [r3, #36]	; 0x24
	// 设置数据长度为8位   USART_CR1  
	USART4->CR1 &= (~(0x1 << 28));
c00094fc:	e3a03000 	mov	r3, #0
c0009500:	e3443001 	movt	r3, #16385	; 0x4001
c0009504:	e5932000 	ldr	r2, [r3]
c0009508:	e3a03000 	mov	r3, #0
c000950c:	e3443001 	movt	r3, #16385	; 0x4001
c0009510:	e3c22201 	bic	r2, r2, #268435456	; 0x10000000
c0009514:	e5832000 	str	r2, [r3]
	USART4->CR1 &= (~(0x1 << 12));
c0009518:	e3a03000 	mov	r3, #0
c000951c:	e3443001 	movt	r3, #16385	; 0x4001
c0009520:	e5932000 	ldr	r2, [r3]
c0009524:	e3a03000 	mov	r3, #0
c0009528:	e3443001 	movt	r3, #16385	; 0x4001
c000952c:	e3c22a01 	bic	r2, r2, #4096	; 0x1000
c0009530:	e5832000 	str	r2, [r3]
	// 采样率为16位 
	USART4->CR1 &= (~(0x1 << 15));
c0009534:	e3a03000 	mov	r3, #0
c0009538:	e3443001 	movt	r3, #16385	; 0x4001
c000953c:	e5932000 	ldr	r2, [r3]
c0009540:	e3a03000 	mov	r3, #0
c0009544:	e3443001 	movt	r3, #16385	; 0x4001
c0009548:	e3c22902 	bic	r2, r2, #32768	; 0x8000
c000954c:	e5832000 	str	r2, [r3]
	// 设置波特率为115200bps 
	USART4->PRESC &= (~(0xF << 0));
c0009550:	e3a03000 	mov	r3, #0
c0009554:	e3443001 	movt	r3, #16385	; 0x4001
c0009558:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
c000955c:	e3a03000 	mov	r3, #0
c0009560:	e3443001 	movt	r3, #16385	; 0x4001
c0009564:	e3c2200f 	bic	r2, r2, #15
c0009568:	e583202c 	str	r2, [r3, #44]	; 0x2c
	USART4->BRR = 0xD0;
c000956c:	e3a03000 	mov	r3, #0
c0009570:	e3443001 	movt	r3, #16385	; 0x4001
c0009574:	e3a020d0 	mov	r2, #208	; 0xd0
c0009578:	e583200c 	str	r2, [r3, #12]
	// 停止位1位
	USART4->CR2 &= (~(0x3 << 12));
c000957c:	e3a03000 	mov	r3, #0
c0009580:	e3443001 	movt	r3, #16385	; 0x4001
c0009584:	e5932004 	ldr	r2, [r3, #4]
c0009588:	e3a03000 	mov	r3, #0
c000958c:	e3443001 	movt	r3, #16385	; 0x4001
c0009590:	e3c22a03 	bic	r2, r2, #12288	; 0x3000
c0009594:	e5832004 	str	r2, [r3, #4]
	// 使能USART串口 
	USART4->CR1 |= (0x1 << 0);
c0009598:	e3a03000 	mov	r3, #0
c000959c:	e3443001 	movt	r3, #16385	; 0x4001
c00095a0:	e5932000 	ldr	r2, [r3]
c00095a4:	e3a03000 	mov	r3, #0
c00095a8:	e3443001 	movt	r3, #16385	; 0x4001
c00095ac:	e3822001 	orr	r2, r2, #1
c00095b0:	e5832000 	str	r2, [r3]
	// 使能USART的发送或者接收功能 
	USART4->CR1 |= (0x1 << 3);
c00095b4:	e3a03000 	mov	r3, #0
c00095b8:	e3443001 	movt	r3, #16385	; 0x4001
c00095bc:	e5932000 	ldr	r2, [r3]
c00095c0:	e3a03000 	mov	r3, #0
c00095c4:	e3443001 	movt	r3, #16385	; 0x4001
c00095c8:	e3822008 	orr	r2, r2, #8
c00095cc:	e5832000 	str	r2, [r3]
	USART4->CR1 |= (0x1 << 2);
c00095d0:	e3a03000 	mov	r3, #0
c00095d4:	e3443001 	movt	r3, #16385	; 0x4001
c00095d8:	e5932000 	ldr	r2, [r3]
c00095dc:	e3a03000 	mov	r3, #0
c00095e0:	e3443001 	movt	r3, #16385	; 0x4001
c00095e4:	e3822004 	orr	r2, r2, #4
c00095e8:	e5832000 	str	r2, [r3]

}
c00095ec:	e320f000 	nop	{0}
c00095f0:	e28bd000 	add	sp, fp, #0
c00095f4:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
c00095f8:	e12fff1e 	bx	lr

c00095fc <__uart_putc>:

void __uart_putc(const char data)
{
c00095fc:	e92d4800 	push	{fp, lr}
c0009600:	e28db004 	add	fp, sp, #4
c0009604:	e24dd004 	sub	sp, sp, #4
c0009608:	e1a03000 	mov	r3, r0
c000960c:	e54b3008 	strb	r3, [fp, #-8]
	while (!(USART4->ISR & (0x1 << 7)));
c0009610:	e320f000 	nop	{0}
c0009614:	e3a03000 	mov	r3, #0
c0009618:	e3443001 	movt	r3, #16385	; 0x4001
c000961c:	e593301c 	ldr	r3, [r3, #28]
c0009620:	e2033080 	and	r3, r3, #128	; 0x80
c0009624:	e3530000 	cmp	r3, #0
c0009628:	0afffff9 	beq	c0009614 <__uart_putc+0x18>
	USART4->TDR = data;
c000962c:	e3a03000 	mov	r3, #0
c0009630:	e3443001 	movt	r3, #16385	; 0x4001
c0009634:	e55b2008 	ldrb	r2, [fp, #-8]
c0009638:	e5832028 	str	r2, [r3, #40]	; 0x28
	if (data == '\n')
c000963c:	e55b3008 	ldrb	r3, [fp, #-8]
c0009640:	e353000a 	cmp	r3, #10
c0009644:	1a000001 	bne	c0009650 <__uart_putc+0x54>
		__uart_putc('\r');
c0009648:	e3a0000d 	mov	r0, #13
c000964c:	ebffffea 	bl	c00095fc <__uart_putc>
}
c0009650:	e320f000 	nop	{0}
c0009654:	e24bd004 	sub	sp, fp, #4
c0009658:	e8bd8800 	pop	{fp, pc}

c000965c <__uart_puts>:
void __uart_puts(const  char  *pstr)
{
c000965c:	e92d4800 	push	{fp, lr}
c0009660:	e28db004 	add	fp, sp, #4
c0009664:	e24dd004 	sub	sp, sp, #4
c0009668:	e50b0008 	str	r0, [fp, #-8]
	while(*pstr != '\0')
c000966c:	ea000005 	b	c0009688 <__uart_puts+0x2c>
		__uart_putc(*pstr++);
c0009670:	e51b3008 	ldr	r3, [fp, #-8]
c0009674:	e2832001 	add	r2, r3, #1
c0009678:	e50b2008 	str	r2, [fp, #-8]
c000967c:	e5d33000 	ldrb	r3, [r3]
c0009680:	e1a00003 	mov	r0, r3
c0009684:	ebffffdc 	bl	c00095fc <__uart_putc>
	while(*pstr != '\0')
c0009688:	e51b3008 	ldr	r3, [fp, #-8]
c000968c:	e5d33000 	ldrb	r3, [r3]
c0009690:	e3530000 	cmp	r3, #0
c0009694:	1afffff5 	bne	c0009670 <__uart_puts+0x14>
}
c0009698:	e320f000 	nop	{0}
c000969c:	e24bd004 	sub	sp, fp, #4
c00096a0:	e8bd8800 	pop	{fp, pc}

c00096a4 <__uart_getc>:

char __uart_getc(void)
{
c00096a4:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
c00096a8:	e28db000 	add	fp, sp, #0
c00096ac:	e24dd004 	sub	sp, sp, #4
	char ch;
	while(!(USART4->ISR & (0x1 << 5)));
c00096b0:	e320f000 	nop	{0}
c00096b4:	e3a03000 	mov	r3, #0
c00096b8:	e3443001 	movt	r3, #16385	; 0x4001
c00096bc:	e593301c 	ldr	r3, [r3, #28]
c00096c0:	e2033020 	and	r3, r3, #32
c00096c4:	e3530000 	cmp	r3, #0
c00096c8:	0afffff9 	beq	c00096b4 <__uart_getc+0x10>
	ch = (char)USART4->RDR;
c00096cc:	e3a03000 	mov	r3, #0
c00096d0:	e3443001 	movt	r3, #16385	; 0x4001
c00096d4:	e5933024 	ldr	r3, [r3, #36]	; 0x24
c00096d8:	e54b3001 	strb	r3, [fp, #-1]
	return ch;
c00096dc:	e55b3001 	ldrb	r3, [fp, #-1]
}
c00096e0:	e1a00003 	mov	r0, r3
c00096e4:	e28bd000 	add	sp, fp, #0
c00096e8:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
c00096ec:	e12fff1e 	bx	lr

c00096f0 <do_irq>:
extern void printf(const char *fmt, ...);
unsigned int i = 0;
void do_irq(void) 
{
c00096f0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
c00096f4:	e28db000 	add	fp, sp, #0
}
c00096f8:	e320f000 	nop	{0}
c00096fc:	e28bd000 	add	sp, fp, #0
c0009700:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
c0009704:	e12fff1e 	bx	lr

c0009708 <hal_tim4_beep_init>:
 * @brief   蜂鸣器初始化
 * @param   无
 * @return  无
 */
void hal_tim4_beep_init()
{
c0009708:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
c000970c:	e28db000 	add	fp, sp, #0

	//GPIOB使能
	RCC->MP_AHB4ENSETR |= (0x1 << 1);
c0009710:	e3a03205 	mov	r3, #1342177280	; 0x50000000
c0009714:	e5933a28 	ldr	r3, [r3, #2600]	; 0xa28
c0009718:	e3a02205 	mov	r2, #1342177280	; 0x50000000
c000971c:	e3833002 	orr	r3, r3, #2
c0009720:	e5823a28 	str	r3, [r2, #2600]	; 0xa28
	//TIM4EN使能
	RCC->MP_APB1ENSETR |= (0x1 << 2);
c0009724:	e3a03205 	mov	r3, #1342177280	; 0x50000000
c0009728:	e5933a00 	ldr	r3, [r3, #2560]	; 0xa00
c000972c:	e3a02205 	mov	r2, #1342177280	; 0x50000000
c0009730:	e3833004 	orr	r3, r3, #4
c0009734:	e5823a00 	str	r3, [r2, #2560]	; 0xa00

	//设置PB6引脚为复用模式
	GPIOB->MODER &= (~(0x3 <<12));
c0009738:	e3a03a03 	mov	r3, #12288	; 0x3000
c000973c:	e3453000 	movt	r3, #20480	; 0x5000
c0009740:	e5932000 	ldr	r2, [r3]
c0009744:	e3a03a03 	mov	r3, #12288	; 0x3000
c0009748:	e3453000 	movt	r3, #20480	; 0x5000
c000974c:	e3c22a03 	bic	r2, r2, #12288	; 0x3000
c0009750:	e5832000 	str	r2, [r3]
	GPIOB->MODER |= (0x1 << 13);
c0009754:	e3a03a03 	mov	r3, #12288	; 0x3000
c0009758:	e3453000 	movt	r3, #20480	; 0x5000
c000975c:	e5932000 	ldr	r2, [r3]
c0009760:	e3a03a03 	mov	r3, #12288	; 0x3000
c0009764:	e3453000 	movt	r3, #20480	; 0x5000
c0009768:	e3822a02 	orr	r2, r2, #8192	; 0x2000
c000976c:	e5832000 	str	r2, [r3]
	//设置PB6引脚功能为AF2--->TIM4_CH1
	GPIOB->AFRL &= (~(0xf << 24));
c0009770:	e3a03a03 	mov	r3, #12288	; 0x3000
c0009774:	e3453000 	movt	r3, #20480	; 0x5000
c0009778:	e5932020 	ldr	r2, [r3, #32]
c000977c:	e3a03a03 	mov	r3, #12288	; 0x3000
c0009780:	e3453000 	movt	r3, #20480	; 0x5000
c0009784:	e3c2240f 	bic	r2, r2, #251658240	; 0xf000000
c0009788:	e5832020 	str	r2, [r3, #32]
	GPIOB->AFRL |= (0x1 << 25);
c000978c:	e3a03a03 	mov	r3, #12288	; 0x3000
c0009790:	e3453000 	movt	r3, #20480	; 0x5000
c0009794:	e5932020 	ldr	r2, [r3, #32]
c0009798:	e3a03a03 	mov	r3, #12288	; 0x3000
c000979c:	e3453000 	movt	r3, #20480	; 0x5000
c00097a0:	e3822402 	orr	r2, r2, #33554432	; 0x2000000
c00097a4:	e5832020 	str	r2, [r3, #32]


    // 配置TIM4_PSC寄存器
    TIM4->PSC &= (~(0xffff << 0));
c00097a8:	e3a03a02 	mov	r3, #8192	; 0x2000
c00097ac:	e3443000 	movt	r3, #16384	; 0x4000
c00097b0:	e5933028 	ldr	r3, [r3, #40]	; 0x28
c00097b4:	e3a02a02 	mov	r2, #8192	; 0x2000
c00097b8:	e3442000 	movt	r2, #16384	; 0x4000
c00097bc:	e1a03823 	lsr	r3, r3, #16
c00097c0:	e1a03803 	lsl	r3, r3, #16
c00097c4:	e5823028 	str	r3, [r2, #40]	; 0x28
    TIM4->PSC |= (0xD0 << 0);
c00097c8:	e3a03a02 	mov	r3, #8192	; 0x2000
c00097cc:	e3443000 	movt	r3, #16384	; 0x4000
c00097d0:	e5932028 	ldr	r2, [r3, #40]	; 0x28
c00097d4:	e3a03a02 	mov	r3, #8192	; 0x2000
c00097d8:	e3443000 	movt	r3, #16384	; 0x4000
c00097dc:	e38220d0 	orr	r2, r2, #208	; 0xd0
c00097e0:	e5832028 	str	r2, [r3, #40]	; 0x28

    // 配置TIM4_ARR寄存器——影响周期和频率
    TIM4->ARR &= (~(0xffff << 0));
c00097e4:	e3a03a02 	mov	r3, #8192	; 0x2000
c00097e8:	e3443000 	movt	r3, #16384	; 0x4000
c00097ec:	e593302c 	ldr	r3, [r3, #44]	; 0x2c
c00097f0:	e3a02a02 	mov	r2, #8192	; 0x2000
c00097f4:	e3442000 	movt	r2, #16384	; 0x4000
c00097f8:	e1a03823 	lsr	r3, r3, #16
c00097fc:	e1a03803 	lsl	r3, r3, #16
c0009800:	e582302c 	str	r3, [r2, #44]	; 0x2c
    TIM4->ARR |= (0x3E8 << 0);
c0009804:	e3a03a02 	mov	r3, #8192	; 0x2000
c0009808:	e3443000 	movt	r3, #16384	; 0x4000
c000980c:	e593202c 	ldr	r2, [r3, #44]	; 0x2c
c0009810:	e3a03a02 	mov	r3, #8192	; 0x2000
c0009814:	e3443000 	movt	r3, #16384	; 0x4000
c0009818:	e3822ffa 	orr	r2, r2, #1000	; 0x3e8
c000981c:	e583202c 	str	r2, [r3, #44]	; 0x2c

    // 配置TIM4_CCR1寄存器
    TIM4->CCR1 &= (~(0xffff << 0));
c0009820:	e3a03a02 	mov	r3, #8192	; 0x2000
c0009824:	e3443000 	movt	r3, #16384	; 0x4000
c0009828:	e5933034 	ldr	r3, [r3, #52]	; 0x34
c000982c:	e3a02a02 	mov	r2, #8192	; 0x2000
c0009830:	e3442000 	movt	r2, #16384	; 0x4000
c0009834:	e1a03823 	lsr	r3, r3, #16
c0009838:	e1a03803 	lsl	r3, r3, #16
c000983c:	e5823034 	str	r3, [r2, #52]	; 0x34
    TIM4->CCR1 |= (0x12C << 0);
c0009840:	e3a03a02 	mov	r3, #8192	; 0x2000
c0009844:	e3443000 	movt	r3, #16384	; 0x4000
c0009848:	e5932034 	ldr	r2, [r3, #52]	; 0x34
c000984c:	e3a03a02 	mov	r3, #8192	; 0x2000
c0009850:	e3443000 	movt	r3, #16384	; 0x4000
c0009854:	e3822f4b 	orr	r2, r2, #300	; 0x12c
c0009858:	e5832034 	str	r2, [r3, #52]	; 0x34

    // 配置TIM4_CCMR1寄存器
    // 1.设置为pwm模式
    TIM4->CCMR1 &= (~(0x1 << 16));
c000985c:	e3a03a02 	mov	r3, #8192	; 0x2000
c0009860:	e3443000 	movt	r3, #16384	; 0x4000
c0009864:	e5932018 	ldr	r2, [r3, #24]
c0009868:	e3a03a02 	mov	r3, #8192	; 0x2000
c000986c:	e3443000 	movt	r3, #16384	; 0x4000
c0009870:	e3c22801 	bic	r2, r2, #65536	; 0x10000
c0009874:	e5832018 	str	r2, [r3, #24]
    TIM4->CCMR1 &= (~(0x1 << 4));
c0009878:	e3a03a02 	mov	r3, #8192	; 0x2000
c000987c:	e3443000 	movt	r3, #16384	; 0x4000
c0009880:	e5932018 	ldr	r2, [r3, #24]
c0009884:	e3a03a02 	mov	r3, #8192	; 0x2000
c0009888:	e3443000 	movt	r3, #16384	; 0x4000
c000988c:	e3c22010 	bic	r2, r2, #16
c0009890:	e5832018 	str	r2, [r3, #24]
    TIM4->CCMR1 |= (0x3 << 5);
c0009894:	e3a03a02 	mov	r3, #8192	; 0x2000
c0009898:	e3443000 	movt	r3, #16384	; 0x4000
c000989c:	e5932018 	ldr	r2, [r3, #24]
c00098a0:	e3a03a02 	mov	r3, #8192	; 0x2000
c00098a4:	e3443000 	movt	r3, #16384	; 0x4000
c00098a8:	e3822060 	orr	r2, r2, #96	; 0x60
c00098ac:	e5832018 	str	r2, [r3, #24]
    // 2.设置预加载使能
    TIM4->CCMR1 |= (0x1 << 3);
c00098b0:	e3a03a02 	mov	r3, #8192	; 0x2000
c00098b4:	e3443000 	movt	r3, #16384	; 0x4000
c00098b8:	e5932018 	ldr	r2, [r3, #24]
c00098bc:	e3a03a02 	mov	r3, #8192	; 0x2000
c00098c0:	e3443000 	movt	r3, #16384	; 0x4000
c00098c4:	e3822008 	orr	r2, r2, #8
c00098c8:	e5832018 	str	r2, [r3, #24]
    // 3.设置为输出模式
    TIM4->CCMR1 &= (~(0x3 << 0));
c00098cc:	e3a03a02 	mov	r3, #8192	; 0x2000
c00098d0:	e3443000 	movt	r3, #16384	; 0x4000
c00098d4:	e5932018 	ldr	r2, [r3, #24]
c00098d8:	e3a03a02 	mov	r3, #8192	; 0x2000
c00098dc:	e3443000 	movt	r3, #16384	; 0x4000
c00098e0:	e3c22003 	bic	r2, r2, #3
c00098e4:	e5832018 	str	r2, [r3, #24]

    // 配置TIM4_CCER寄存器
    // 1.配置起始状态高电平
    TIM4->CCER &= (~(0x1 << 1));
c00098e8:	e3a03a02 	mov	r3, #8192	; 0x2000
c00098ec:	e3443000 	movt	r3, #16384	; 0x4000
c00098f0:	e5932020 	ldr	r2, [r3, #32]
c00098f4:	e3a03a02 	mov	r3, #8192	; 0x2000
c00098f8:	e3443000 	movt	r3, #16384	; 0x4000
c00098fc:	e3c22002 	bic	r2, r2, #2
c0009900:	e5832020 	str	r2, [r3, #32]
    // 2.配置输出使能
    TIM4->CCER |= (0x1 << 0);
c0009904:	e3a03a02 	mov	r3, #8192	; 0x2000
c0009908:	e3443000 	movt	r3, #16384	; 0x4000
c000990c:	e5932020 	ldr	r2, [r3, #32]
c0009910:	e3a03a02 	mov	r3, #8192	; 0x2000
c0009914:	e3443000 	movt	r3, #16384	; 0x4000
c0009918:	e3822001 	orr	r2, r2, #1
c000991c:	e5832020 	str	r2, [r3, #32]

    // 配置tim计算器方式--TIM4_CR1
    // 1.自动重载计数器预加载使能
    TIM4->CR1 |= (0x1 << 7);
c0009920:	e3a03a02 	mov	r3, #8192	; 0x2000
c0009924:	e3443000 	movt	r3, #16384	; 0x4000
c0009928:	e5932000 	ldr	r2, [r3]
c000992c:	e3a03a02 	mov	r3, #8192	; 0x2000
c0009930:	e3443000 	movt	r3, #16384	; 0x4000
c0009934:	e3822080 	orr	r2, r2, #128	; 0x80
c0009938:	e5832000 	str	r2, [r3]
    // 2.设置边沿对齐模式
    TIM4->CR1 &= (~(0x3 << 5));
c000993c:	e3a03a02 	mov	r3, #8192	; 0x2000
c0009940:	e3443000 	movt	r3, #16384	; 0x4000
c0009944:	e5932000 	ldr	r2, [r3]
c0009948:	e3a03a02 	mov	r3, #8192	; 0x2000
c000994c:	e3443000 	movt	r3, #16384	; 0x4000
c0009950:	e3c22060 	bic	r2, r2, #96	; 0x60
c0009954:	e5832000 	str	r2, [r3]
    // 3.设置递减计数器
    TIM4->CR1 |= (0x1 << 4);
c0009958:	e3a03a02 	mov	r3, #8192	; 0x2000
c000995c:	e3443000 	movt	r3, #16384	; 0x4000
c0009960:	e5932000 	ldr	r2, [r3]
c0009964:	e3a03a02 	mov	r3, #8192	; 0x2000
c0009968:	e3443000 	movt	r3, #16384	; 0x4000
c000996c:	e3822010 	orr	r2, r2, #16
c0009970:	e5832000 	str	r2, [r3]
    // 4.设置计数器使能
    TIM4->CR1 |= (0x1 << 0);
c0009974:	e3a03a02 	mov	r3, #8192	; 0x2000
c0009978:	e3443000 	movt	r3, #16384	; 0x4000
c000997c:	e5932000 	ldr	r2, [r3]
c0009980:	e3a03a02 	mov	r3, #8192	; 0x2000
c0009984:	e3443000 	movt	r3, #16384	; 0x4000
c0009988:	e3822001 	orr	r2, r2, #1
c000998c:	e5832000 	str	r2, [r3]
}
c0009990:	e320f000 	nop	{0}
c0009994:	e28bd000 	add	sp, fp, #0
c0009998:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
c000999c:	e12fff1e 	bx	lr

c00099a0 <hal_tim1_fan_init>:
 * @brief   风扇初始化
 * @param   无
 * @return  无
 */
void hal_tim1_fan_init()
{
c00099a0:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
c00099a4:	e28db000 	add	fp, sp, #0
    /* RCC */
    RCC->MP_AHB4ENSETR |= (0x1 << 4); // GPIOE = AHB4[4]使能
c00099a8:	e3a03205 	mov	r3, #1342177280	; 0x50000000
c00099ac:	e5933a28 	ldr	r3, [r3, #2600]	; 0xa28
c00099b0:	e3a02205 	mov	r2, #1342177280	; 0x50000000
c00099b4:	e3833010 	orr	r3, r3, #16
c00099b8:	e5823a28 	str	r3, [r2, #2600]	; 0xa28
    RCC->MP_APB2ENSETR |= (0x1 << 0); // TIM1_CH1 = APB2[0]使能
c00099bc:	e3a03205 	mov	r3, #1342177280	; 0x50000000
c00099c0:	e5933a08 	ldr	r3, [r3, #2568]	; 0xa08
c00099c4:	e3a02205 	mov	r2, #1342177280	; 0x50000000
c00099c8:	e3833001 	orr	r3, r3, #1
c00099cc:	e5823a08 	str	r3, [r2, #2568]	; 0xa08

    /* GPIO */
    GPIOE->MODER &= (~(0x3)); // 清零
c00099d0:	e3a03a06 	mov	r3, #24576	; 0x6000
c00099d4:	e3453000 	movt	r3, #20480	; 0x5000
c00099d8:	e5932000 	ldr	r2, [r3]
c00099dc:	e3a03a06 	mov	r3, #24576	; 0x6000
c00099e0:	e3453000 	movt	r3, #20480	; 0x5000
c00099e4:	e3c22003 	bic	r2, r2, #3
c00099e8:	e5832000 	str	r2, [r3]
    GPIOE->MODER |= (0x2); // PE9设置复用模式
c00099ec:	e3a03a06 	mov	r3, #24576	; 0x6000
c00099f0:	e3453000 	movt	r3, #20480	; 0x5000
c00099f4:	e5932000 	ldr	r2, [r3]
c00099f8:	e3a03a06 	mov	r3, #24576	; 0x6000
c00099fc:	e3453000 	movt	r3, #20480	; 0x5000
c0009a00:	e3822002 	orr	r2, r2, #2
c0009a04:	e5832000 	str	r2, [r3]
    GPIOE->AFRH &= (~(0xf << 4)); // 清零
c0009a08:	e3a03a06 	mov	r3, #24576	; 0x6000
c0009a0c:	e3453000 	movt	r3, #20480	; 0x5000
c0009a10:	e5932024 	ldr	r2, [r3, #36]	; 0x24
c0009a14:	e3a03a06 	mov	r3, #24576	; 0x6000
c0009a18:	e3453000 	movt	r3, #20480	; 0x5000
c0009a1c:	e3c220f0 	bic	r2, r2, #240	; 0xf0
c0009a20:	e5832024 	str	r2, [r3, #36]	; 0x24
    GPIOE->AFRH |= (0x1 << 4); // PE9设置 TIM1_CH1复用 AF1
c0009a24:	e3a03a06 	mov	r3, #24576	; 0x6000
c0009a28:	e3453000 	movt	r3, #20480	; 0x5000
c0009a2c:	e5932024 	ldr	r2, [r3, #36]	; 0x24
c0009a30:	e3a03a06 	mov	r3, #24576	; 0x6000
c0009a34:	e3453000 	movt	r3, #20480	; 0x5000
c0009a38:	e3822010 	orr	r2, r2, #16
c0009a3c:	e5832024 	str	r2, [r3, #36]	; 0x24
}
c0009a40:	e320f000 	nop	{0}
c0009a44:	e28bd000 	add	sp, fp, #0
c0009a48:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
c0009a4c:	e12fff1e 	bx	lr

c0009a50 <hal_tim16_monitor_init>:
 * @brief   马达初始化
 * @param
 * @return
 */
void hal_tim16_monitor_init()
{
c0009a50:	e52db004 	push	{fp}		; (str fp, [sp, #-4]!)
c0009a54:	e28db000 	add	fp, sp, #0
    /* RCC */
    RCC->MP_AHB4ENSETR |= (0x1 << 5); // PF6 ---> AHB4[5]使能
c0009a58:	e3a03205 	mov	r3, #1342177280	; 0x50000000
c0009a5c:	e5933a28 	ldr	r3, [r3, #2600]	; 0xa28
c0009a60:	e3a02205 	mov	r2, #1342177280	; 0x50000000
c0009a64:	e3833020 	orr	r3, r3, #32
c0009a68:	e5823a28 	str	r3, [r2, #2600]	; 0xa28
    RCC->MP_APB2ENSETR |= (0x1 << 3); // TIM16_CH1 ---> APB2[3]使能
c0009a6c:	e3a03205 	mov	r3, #1342177280	; 0x50000000
c0009a70:	e5933a08 	ldr	r3, [r3, #2568]	; 0xa08
c0009a74:	e3a02205 	mov	r2, #1342177280	; 0x50000000
c0009a78:	e3833008 	orr	r3, r3, #8
c0009a7c:	e5823a08 	str	r3, [r2, #2568]	; 0xa08

    /* GPIO */
    GPIOF->MODER &= (~(0x3 << 12)); // 清零
c0009a80:	e3a03a07 	mov	r3, #28672	; 0x7000
c0009a84:	e3453000 	movt	r3, #20480	; 0x5000
c0009a88:	e5932000 	ldr	r2, [r3]
c0009a8c:	e3a03a07 	mov	r3, #28672	; 0x7000
c0009a90:	e3453000 	movt	r3, #20480	; 0x5000
c0009a94:	e3c22a03 	bic	r2, r2, #12288	; 0x3000
c0009a98:	e5832000 	str	r2, [r3]
    GPIOF->MODER |= (0x2 << 12); // PF6 设置端口复用
c0009a9c:	e3a03a07 	mov	r3, #28672	; 0x7000
c0009aa0:	e3453000 	movt	r3, #20480	; 0x5000
c0009aa4:	e5932000 	ldr	r2, [r3]
c0009aa8:	e3a03a07 	mov	r3, #28672	; 0x7000
c0009aac:	e3453000 	movt	r3, #20480	; 0x5000
c0009ab0:	e3822a02 	orr	r2, r2, #8192	; 0x2000
c0009ab4:	e5832000 	str	r2, [r3]
    GPIOF->AFRL &= (~(0xf << 24)); // 清零
c0009ab8:	e3a03a07 	mov	r3, #28672	; 0x7000
c0009abc:	e3453000 	movt	r3, #20480	; 0x5000
c0009ac0:	e5932020 	ldr	r2, [r3, #32]
c0009ac4:	e3a03a07 	mov	r3, #28672	; 0x7000
c0009ac8:	e3453000 	movt	r3, #20480	; 0x5000
c0009acc:	e3c2240f 	bic	r2, r2, #251658240	; 0xf000000
c0009ad0:	e5832020 	str	r2, [r3, #32]
    GPIOF->AFRL |= (0x1 << 24); // PF6 设置 TIM16_CH1复用 AF1
c0009ad4:	e3a03a07 	mov	r3, #28672	; 0x7000
c0009ad8:	e3453000 	movt	r3, #20480	; 0x5000
c0009adc:	e5932020 	ldr	r2, [r3, #32]
c0009ae0:	e3a03a07 	mov	r3, #28672	; 0x7000
c0009ae4:	e3453000 	movt	r3, #20480	; 0x5000
c0009ae8:	e3822401 	orr	r2, r2, #16777216	; 0x1000000
c0009aec:	e5832020 	str	r2, [r3, #32]
c0009af0:	e320f000 	nop	{0}
c0009af4:	e28bd000 	add	sp, fp, #0
c0009af8:	e49db004 	pop	{fp}		; (ldr fp, [sp], #4)
c0009afc:	e12fff1e 	bx	lr

c0009b00 <main>:
#include "pwm.h"

extern void printf(const char *fmt, ...);

int main()
{
c0009b00:	e92d4800 	push	{fp, lr}
c0009b04:	e28db004 	add	fp, sp, #4
    hal_tim4_beep_init();
c0009b08:	ebfffefe 	bl	c0009708 <hal_tim4_beep_init>

    while (1) {
c0009b0c:	eafffffe 	b	c0009b0c <main+0xc>

Disassembly of section .rodata:

c0009b10 <.LC0>:
c0009b10:	33323130 	teqcc	r2, #48, 2
c0009b14:	37363534 			; <UNDEFINED> instruction: 0x37363534
c0009b18:	62613938 	rsbvs	r3, r1, #56, 18	; 0xe0000
c0009b1c:	66656463 	strbtvs	r6, [r5], -r3, ror #8
c0009b20:	6a696867 	bvs	c1a63cc4 <__bss_end__+0x1a59858>
c0009b24:	6e6d6c6b 	cdpvs	12, 6, cr6, cr13, cr11, {3}
c0009b28:	7271706f 	rsbsvc	r7, r1, #111	; 0x6f
c0009b2c:	76757473 			; <UNDEFINED> instruction: 0x76757473
c0009b30:	7a797877 	bvc	c1e67d14 <__bss_end__+0x1e5d8a8>
c0009b34:	00000000 	andeq	r0, r0, r0

c0009b38 <.LC1>:
c0009b38:	33323130 	teqcc	r2, #48, 2
c0009b3c:	37363534 			; <UNDEFINED> instruction: 0x37363534
c0009b40:	42413938 	submi	r3, r1, #56, 18	; 0xe0000
c0009b44:	46454443 	strbmi	r4, [r5], -r3, asr #8
c0009b48:	4a494847 	bmi	c125bc6c <__bss_end__+0x1251800>
c0009b4c:	4e4d4c4b 	cdpmi	12, 4, cr4, cr13, cr11, {2}
c0009b50:	5251504f 	subspl	r5, r1, #79	; 0x4f
c0009b54:	56555453 			; <UNDEFINED> instruction: 0x56555453
c0009b58:	5a595857 	bpl	c165fcbc <__bss_end__+0x1655850>
c0009b5c:	00000000 	andeq	r0, r0, r0

c0009b60 <.LC2>:
c0009b60:	4c554e3c 	mrrcmi	14, 3, r4, r5, cr12
c0009b64:	地址 0xc0009b64 越界。


Disassembly of section .data:

c0009b68 <stack>:
	...

c000a368 <_ctype>:
c000a368:	08080808 	stmdaeq	r8, {r3, fp}
c000a36c:	08080808 	stmdaeq	r8, {r3, fp}
c000a370:	28282808 	stmdacs	r8!, {r3, fp, sp}
c000a374:	08082828 	stmdaeq	r8, {r3, r5, fp, sp}
c000a378:	08080808 	stmdaeq	r8, {r3, fp}
c000a37c:	08080808 	stmdaeq	r8, {r3, fp}
c000a380:	08080808 	stmdaeq	r8, {r3, fp}
c000a384:	08080808 	stmdaeq	r8, {r3, fp}
c000a388:	101010a0 	andsne	r1, r0, r0, lsr #1
c000a38c:	10101010 	andsne	r1, r0, r0, lsl r0
c000a390:	10101010 	andsne	r1, r0, r0, lsl r0
c000a394:	10101010 	andsne	r1, r0, r0, lsl r0
c000a398:	04040404 	streq	r0, [r4], #-1028	; 0xfffffbfc
c000a39c:	04040404 	streq	r0, [r4], #-1028	; 0xfffffbfc
c000a3a0:	10100404 	andsne	r0, r0, r4, lsl #8
c000a3a4:	10101010 	andsne	r1, r0, r0, lsl r0
c000a3a8:	41414110 	cmpmi	r1, r0, lsl r1
c000a3ac:	01414141 	cmpeq	r1, r1, asr #2
c000a3b0:	01010101 	tsteq	r1, r1, lsl #2
c000a3b4:	01010101 	tsteq	r1, r1, lsl #2
c000a3b8:	01010101 	tsteq	r1, r1, lsl #2
c000a3bc:	01010101 	tsteq	r1, r1, lsl #2
c000a3c0:	10010101 	andne	r0, r1, r1, lsl #2
c000a3c4:	10101010 	andsne	r1, r0, r0, lsl r0
c000a3c8:	42424210 	submi	r4, r2, #16, 4
c000a3cc:	02424242 	subeq	r4, r2, #536870916	; 0x20000004
c000a3d0:	02020202 	andeq	r0, r2, #536870912	; 0x20000000
c000a3d4:	02020202 	andeq	r0, r2, #536870912	; 0x20000000
c000a3d8:	02020202 	andeq	r0, r2, #536870912	; 0x20000000
c000a3dc:	02020202 	andeq	r0, r2, #536870912	; 0x20000000
c000a3e0:	10020202 	andne	r0, r2, r2, lsl #4
c000a3e4:	08101010 	ldmdaeq	r0, {r4, ip}
	...
c000a408:	101010a0 	andsne	r1, r0, r0, lsr #1
c000a40c:	10101010 	andsne	r1, r0, r0, lsl r0
c000a410:	10101010 	andsne	r1, r0, r0, lsl r0
c000a414:	10101010 	andsne	r1, r0, r0, lsl r0
c000a418:	10101010 	andsne	r1, r0, r0, lsl r0
c000a41c:	10101010 	andsne	r1, r0, r0, lsl r0
c000a420:	10101010 	andsne	r1, r0, r0, lsl r0
c000a424:	10101010 	andsne	r1, r0, r0, lsl r0
c000a428:	01010101 	tsteq	r1, r1, lsl #2
c000a42c:	01010101 	tsteq	r1, r1, lsl #2
c000a430:	01010101 	tsteq	r1, r1, lsl #2
c000a434:	01010101 	tsteq	r1, r1, lsl #2
c000a438:	01010101 	tsteq	r1, r1, lsl #2
c000a43c:	10010101 	andne	r0, r1, r1, lsl #2
c000a440:	01010101 	tsteq	r1, r1, lsl #2
c000a444:	02010101 	andeq	r0, r1, #1073741824	; 0x40000000
c000a448:	02020202 	andeq	r0, r2, #536870912	; 0x20000000
c000a44c:	02020202 	andeq	r0, r2, #536870912	; 0x20000000
c000a450:	02020202 	andeq	r0, r2, #536870912	; 0x20000000
c000a454:	02020202 	andeq	r0, r2, #536870912	; 0x20000000
c000a458:	02020202 	andeq	r0, r2, #536870912	; 0x20000000
c000a45c:	10020202 	andne	r0, r2, r2, lsl #4
c000a460:	02020202 	andeq	r0, r2, #536870912	; 0x20000000
c000a464:	02020202 	andeq	r0, r2, #536870912	; 0x20000000

Disassembly of section .bss:

c000a468 <i>:
c000a468:	00000000 	andeq	r0, r0, r0

Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002041 	andeq	r2, r0, r1, asr #32
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000016 	andeq	r0, r0, r6, lsl r0
  10:	412d3705 			; <UNDEFINED> instruction: 0x412d3705
  14:	070a0600 	streq	r0, [sl, -r0, lsl #12]
  18:	09010841 	stmdbeq	r1, {r0, r6, fp}
  1c:	0c030a02 			; <UNDEFINED> instruction: 0x0c030a02
  20:	地址 0x00000020 越界。


Disassembly of section .comment:

00000000 <.comment>:
   0:	3a434347 	bcc	10d0d24 <_start-0xbef372dc>
   4:	694c2820 	stmdbvs	ip, {r5, fp, sp}^
   8:	6f72616e 	svcvs	0x0072616e
   c:	43434720 	movtmi	r4, #14112	; 0x3720
  10:	352e3720 	strcc	r3, [lr, #-1824]!	; 0xfffff8e0
  14:	3130322d 	teqcc	r0, sp, lsr #4
  18:	32312e39 	eorscc	r2, r1, #912	; 0x390
  1c:	2e372029 	cdpcs	0, 3, cr2, cr7, cr9, {1}
  20:	00302e35 	eorseq	r2, r0, r5, lsr lr

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	00000093 	muleq	r0, r3, r0
   4:	00240002 	eoreq	r0, r4, r2
   8:	01020000 	mrseq	r0, (UNDEF: 2)
   c:	000d0efb 	strdeq	r0, [sp], -fp
  10:	01010101 	tsteq	r1, r1, lsl #2
  14:	01000000 	mrseq	r0, (UNDEF: 0)
  18:	73010000 	movwvc	r0, #4096	; 0x1000
  1c:	74726174 	ldrbtvc	r6, [r2], #-372	; 0xfffffe8c
  20:	74730000 	ldrbtvc	r0, [r3], #-0
  24:	2e747261 	cdpcs	2, 7, cr7, cr4, cr1, {3}
  28:	00010053 	andeq	r0, r1, r3, asr r0
  2c:	05000000 	streq	r0, [r0, #-0]
  30:	00800002 	addeq	r0, r0, r2
  34:	011b03c0 	tsteq	fp, r0, asr #7
  38:	2f2f2f2f 	svccs	0x002f2f2f
  3c:	032f2f2f 			; <UNDEFINED> instruction: 0x032f2f2f
  40:	2f2ff215 	svccs	0x002ff215
  44:	2f312f2f 	svccs	0x00312f2f
  48:	2f312f2f 	svccs	0x00312f2f
  4c:	2f2f2f2f 	svccs	0x002f2f2f
  50:	2f2f312f 	svccs	0x002f312f
  54:	2f2f2f2f 	svccs	0x002f2f2f
  58:	2f2f312f 	svccs	0x002f312f
  5c:	2f2f2f31 	svccs	0x002f2f31
  60:	332f2f2f 			; <UNDEFINED> instruction: 0x332f2f2f
  64:	2f302f31 	svccs	0x00302f31
  68:	2f2f302f 	svccs	0x002f302f
  6c:	302f2f30 	eorcc	r2, pc, r0, lsr pc	; <UNPREDICTABLE>
  70:	2f302f2f 	svccs	0x00302f2f
  74:	302f2f32 	eorcc	r2, pc, r2, lsr pc	; <UNPREDICTABLE>
  78:	312f2f2f 			; <UNDEFINED> instruction: 0x312f2f2f
  7c:	f6f6f6de 			; <UNDEFINED> instruction: 0xf6f6f6de
  80:	2f2ff7f6 	svccs	0x002ff7f6
  84:	8903a32f 	stmdbhi	r3, {r0, r1, r2, r3, r5, r8, r9, sp, pc}
  88:	c8034a7f 	stmdagt	r3, {r0, r1, r2, r3, r4, r5, r6, r9, fp, lr}
  8c:	032f2e00 			; <UNDEFINED> instruction: 0x032f2e00
  90:	02022e09 	andeq	r2, r2, #9, 28	; 0x90
  94:	6c010100 	stfvss	f0, [r1], {-0}
  98:	02000000 	andeq	r0, r0, #0
  9c:	00002c00 	andeq	r2, r0, r0, lsl #24
  a0:	fb010200 	blx	408aa <_start-0xbffc7756>
  a4:	01000d0e 	tsteq	r0, lr, lsl #26
  a8:	00010101 	andeq	r0, r1, r1, lsl #2
  ac:	00010000 	andeq	r0, r1, r0
  b0:	6f630100 	svcvs	0x00630100
  b4:	6e6f6d6d 	cdpvs	13, 6, cr6, cr15, cr13, {3}
  b8:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
  bc:	755f0000 	ldrbvc	r0, [pc, #-0]	; c4 <_start-0xc0007f3c>
  c0:	73646f6d 	cmnvc	r4, #436	; 0x1b4
  c4:	532e3369 			; <UNDEFINED> instruction: 0x532e3369
  c8:	00000100 	andeq	r0, r0, r0, lsl #2
  cc:	02050000 	andeq	r0, r5, #0
  d0:	c0008218 	andgt	r8, r0, r8, lsl r2
  d4:	2f011203 	svccs	0x00011203
  d8:	342f2f2f 	strtcc	r2, [pc], #-3887	; e0 <_start-0xc0007f20>
  dc:	2f2f2f2f 	svccs	0x002f2f2f
  e0:	2f2f2f32 	svccs	0x002f2f32
  e4:	2f2f332f 	svccs	0x002f332f
  e8:	2f2f2f2f 	svccs	0x002f2f2f
  ec:	2f2f2f2f 	svccs	0x002f2f2f
  f0:	2f2f2f2f 	svccs	0x002f2f2f
  f4:	2f352f2f 	svccs	0x00352f2f
  f8:	2f2f2f2f 	svccs	0x002f2f2f
  fc:	302f2f2f 	eorcc	r2, pc, pc, lsr #30
 100:	02022f30 	andeq	r2, r2, #48, 30	; 0xc0
 104:	65010100 	strvs	r0, [r1, #-256]	; 0xffffff00
 108:	02000000 	andeq	r0, r0, #0
 10c:	00002c00 	andeq	r2, r0, r0, lsl #24
 110:	fb010200 	blx	4091a <_start-0xbffc76e6>
 114:	01000d0e 	tsteq	r0, lr, lsl #26
 118:	00010101 	andeq	r0, r1, r1, lsl #2
 11c:	00010000 	andeq	r0, r1, r0
 120:	6f630100 	svcvs	0x00630100
 124:	6e6f6d6d 	cdpvs	13, 6, cr6, cr15, cr13, {3}
 128:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
 12c:	755f0000 	ldrbvc	r0, [pc, #-0]	; 134 <_start-0xc0007ecc>
 130:	73766964 	cmnvc	r6, #100, 18	; 0x190000
 134:	532e3369 			; <UNDEFINED> instruction: 0x532e3369
 138:	00000100 	andeq	r0, r0, r0, lsl #2
 13c:	02050000 	andeq	r0, r5, #0
 140:	c00082c8 	andgt	r8, r0, r8, asr #5
 144:	2f011103 	svccs	0x00011103
 148:	2f2f2f2f 	svccs	0x002f2f2f
 14c:	2f2f2f34 	svccs	0x002f2f34
 150:	2f2f322f 	svccs	0x002f322f
 154:	2f342f2f 	svccs	0x00342f2f
 158:	2f2f2f2f 	svccs	0x002f2f2f
 15c:	2f2f2f2f 	svccs	0x002f2f2f
 160:	2f2f2f2f 	svccs	0x002f2f2f
 164:	2f302f2f 	svccs	0x00302f2f
 168:	022f3030 	eoreq	r3, pc, #48	; 0x30
 16c:	01010002 	tsteq	r1, r2
 170:	0000022e 	andeq	r0, r0, lr, lsr #4
 174:	00520002 	subseq	r0, r2, r2
 178:	01020000 	mrseq	r0, (UNDEF: 2)
 17c:	000d0efb 	strdeq	r0, [sp], -fp
 180:	01010101 	tsteq	r1, r1, lsl #2
 184:	01000000 	mrseq	r0, (UNDEF: 0)
 188:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
 18c:	6d6f632f 	stclvs	3, cr6, [pc, #-188]!	; d8 <_start-0xc0007f28>
 190:	2f6e6f6d 	svccs	0x006e6f6d
 194:	6c636e69 	stclvs	14, cr6, [r3], #-420	; 0xfffffe5c
 198:	00656475 	rsbeq	r6, r5, r5, ror r4
 19c:	6d6d6f63 	stclvs	15, cr6, [sp, #-396]!	; 0xfffffe74
 1a0:	732f6e6f 			; <UNDEFINED> instruction: 0x732f6e6f
 1a4:	00006372 	andeq	r6, r0, r2, ror r3
 1a8:	70797463 	rsbsvc	r7, r9, r3, ror #8
 1ac:	00682e65 	rsbeq	r2, r8, r5, ror #28
 1b0:	70000001 	andvc	r0, r0, r1
 1b4:	746e6972 	strbtvc	r6, [lr], #-2418	; 0xfffff68e
 1b8:	00632e66 	rsbeq	r2, r3, r6, ror #28
 1bc:	73000002 	movwvc	r0, #2
 1c0:	72616474 	rsbvc	r6, r1, #116, 8	; 0x74000000
 1c4:	00682e67 	rsbeq	r2, r8, r7, ror #28
 1c8:	00000001 	andeq	r0, r0, r1
 1cc:	5c020500 	cfstr32pl	mvfx0, [r2], {-0}
 1d0:	03c00083 	biceq	r0, r0, #131	; 0x83
 1d4:	9f0100c4 	svcls	0x000100c4
 1d8:	042f67d7 	strteq	r6, [pc], #-2007	; 1e0 <_start-0xc0007e20>
 1dc:	7fbe0302 	svcvc	0x00be0302
 1e0:	834cbb82 	movthi	fp, #52098	; 0xcb82
 1e4:	04020067 	streq	r0, [r2], #-103	; 0xffffff99
 1e8:	06820601 	streq	r0, [r2], r1, lsl #12
 1ec:	684b3d08 	stmdavs	fp, {r3, r8, sl, fp, ip, sp}^
 1f0:	4c674d67 	stclmi	13, cr4, [r7], #-412	; 0xfffffe64
 1f4:	0063bb30 	rsbeq	fp, r3, r0, lsr fp
 1f8:	06010402 	streq	r0, [r1], -r2, lsl #8
 1fc:	02002008 	andeq	r2, r0, #8
 200:	20080204 	andcs	r0, r8, r4, lsl #4
 204:	03040200 	movweq	r0, #16896	; 0x4200
 208:	04020082 	streq	r0, [r2], #-130	; 0xffffff7e
 20c:	21080605 	tstcs	r8, r5, lsl #12
 210:	06040200 	streq	r0, [r4], -r0, lsl #4
 214:	0200d606 	andeq	sp, r0, #6291456	; 0x600000
 218:	65060904 	strvs	r0, [r6, #-2308]	; 0xfffff6fc
 21c:	2f6767a3 	svccs	0x006767a3
 220:	0883bb69 	stmeq	r3, {r0, r3, r5, r6, r8, r9, fp, ip, sp, pc}
 224:	24039f21 	strcs	r9, [r3], #-3873	; 0xfffff0df
 228:	2f4c8366 	svccs	0x004c8366
 22c:	0200c708 	andeq	ip, r0, #8, 14	; 0x200000
 230:	9e060104 	adflss	f0, f6, f4
 234:	032fa006 			; <UNDEFINED> instruction: 0x032fa006
 238:	69d88220 	ldmibvs	r8, {r5, r9, pc}^
 23c:	67836783 	strvs	r6, [r3, r3, lsl #15]
 240:	01040200 	mrseq	r0, R12_usr
 244:	67066606 	strvs	r6, [r6, -r6, lsl #12]
 248:	0402004b 	streq	r0, [r2], #-75	; 0xffffffb5
 24c:	00820601 	addeq	r0, r2, r1, lsl #12
 250:	4a020402 	bmi	81260 <_start-0xbff86da0>
 254:	04040200 	streq	r0, [r4], #-512	; 0xfffffe00
 258:	0402002e 	streq	r0, [r2], #-46	; 0xffffffd2
 25c:	002f0604 	eoreq	r0, pc, r4, lsl #12
 260:	4b040402 	blmi	101270 <_start-0xbff06d90>
 264:	674b6783 	strbvs	r6, [fp, -r3, lsl #15]
 268:	834b8383 	movthi	r8, #45955	; 0xb383
 26c:	83694b83 	cmnhi	r9, #134144	; 0x20c00
 270:	68678367 	stmdavs	r7!, {r0, r1, r2, r5, r6, r8, r9, pc}^
 274:	83f4674b 	mvnshi	r6, #19660800	; 0x12c0000
 278:	69102e02 	ldmdbvs	r0, {r1, r9, sl, fp, sp}
 27c:	2f83834b 	svccs	0x0083834b
 280:	9f67a09d 	svcls	0x0067a09d
 284:	67bb6783 	ldrvs	r6, [fp, r3, lsl #15]!
 288:	2f83bd9f 	svccs	0x0083bd9f
 28c:	9d2fa09d 	stcls	0, cr10, [pc, #-628]!	; 20 <_start-0xc0007fe0>
 290:	a0f12fbc 	ldrhtge	r2, [r1], #252	; 0xfc
 294:	00a09d2f 	adceq	r9, r0, pc, lsr #26
 298:	2f010402 	svccs	0x00010402
 29c:	0200a16b 	andeq	sl, r0, #-1073741798	; 0xc000001a
 2a0:	66060404 	strvs	r0, [r6], -r4, lsl #8
 2a4:	01040200 	mrseq	r0, R12_usr
 2a8:	04020066 	streq	r0, [r2], #-102	; 0xffffff9a
 2ac:	84069e03 	strhi	r9, [r6], #-3587	; 0xfffff1fd
 2b0:	12038467 	andne	r8, r3, #1728053248	; 0x67000000
 2b4:	bb8367ba 	bllt	fe0da1a4 <__bss_end__+0x3e0cfd38>
 2b8:	02674c32 	rsbeq	r4, r7, #12800	; 0x3200
 2bc:	8383132e 	orrhi	r1, r3, #-1207959552	; 0xb8000000
 2c0:	4b868383 	blmi	fe1a10d4 <__bss_end__+0x3e196c68>
 2c4:	01040200 	mrseq	r0, R12_usr
 2c8:	83068206 	movwhi	r8, #25094	; 0x6206
 2cc:	9f68839f 	svcls	0x0068839f
 2d0:	4b6b6767 	blmi	1ada074 <_start-0xbe52df8c>
 2d4:	02006783 	andeq	r6, r0, #34340864	; 0x20c0000
 2d8:	82060104 	andhi	r0, r6, #4, 2
 2dc:	839f8306 	orrshi	r8, pc, #402653184	; 0x18000000
 2e0:	4e67a068 	cdpmi	0, 6, cr10, cr7, cr8, {3}
 2e4:	0402004b 	streq	r0, [r2], #-75	; 0xffffffb5
 2e8:	00820601 	addeq	r0, r2, r1, lsl #12
 2ec:	82020402 	andhi	r0, r2, #33554432	; 0x2000000
 2f0:	03040200 	movweq	r0, #16896	; 0x4200
 2f4:	02008306 	andeq	r8, r0, #402653184	; 0x18000000
 2f8:	4b490304 	blmi	1240f10 <_start-0xbedc70f0>
 2fc:	01040200 	mrseq	r0, R12_usr
 300:	02008206 	andeq	r8, r0, #1610612736	; 0x60000000
 304:	83060204 	movwhi	r0, #25092	; 0x6204
 308:	02040200 	andeq	r0, r4, #0, 4
 30c:	00674c49 	rsbeq	r4, r7, r9, asr #24
 310:	06010402 	streq	r0, [r1], -r2, lsl #8
 314:	4b9f0666 	blmi	fe7c1cb4 <__bss_end__+0x3e7b7848>
 318:	024c6a68 	subeq	r6, ip, #104, 20	; 0x68000
 31c:	831401b4 	tsthi	r4, #180, 2	; 0x2d
 320:	08bc9d2f 	ldmeq	ip!, {r0, r1, r2, r3, r5, r8, sl, fp, ip, pc}
 324:	bc9d2f21 	ldclt	15, cr2, [sp], {33}	; 0x21
 328:	68679f31 	stmdavs	r7!, {r0, r4, r5, r8, r9, sl, fp, ip, pc}^
 32c:	9d2f83bc 	stcls	3, cr8, [pc, #-752]!	; 44 <_start-0xc0007fbc>
 330:	040200bc 	streq	r0, [r2], #-188	; 0xffffff44
 334:	02006703 	andeq	r6, r0, #786432	; 0xc0000
 338:	00f10304 	rscseq	r0, r1, r4, lsl #6
 33c:	06010402 	streq	r0, [r1], -r2, lsl #8
 340:	2f840666 	svccs	0x00840666
 344:	6731bc9d 			; <UNDEFINED> instruction: 0x6731bc9d
 348:	0881694b 	stmeq	r1, {r0, r1, r3, r6, r8, fp, sp, lr}
 34c:	9f67323f 	svcls	0x0067323f
 350:	a09f2ba3 	addsge	r2, pc, r3, lsr #23
 354:	4b329f31 	blmi	ca8020 <_start-0xbf35ffe0>
 358:	324b6831 	subcc	r6, fp, #3211264	; 0x310000
 35c:	839f3168 	orrshi	r3, pc, #104, 2
 360:	03672dbd 	cmneq	r7, #12096	; 0x2f40
 364:	0f032e78 	svceq	0x00032e78
 368:	00bb672e 	adcseq	r6, fp, lr, lsr #14
 36c:	06010402 	streq	r0, [r1], -r2, lsl #8
 370:	bb670666 	bllt	19c1d10 <_start-0xbe6462f0>
 374:	bb67bb67 	bllt	19ef118 <_start-0xbe618ee8>
 378:	bc838383 	stclt	3, cr8, [r3], {131}	; 0x83
 37c:	0402009f 	streq	r0, [r2], #-159	; 0xffffff61
 380:	7ee20302 	cdpvc	3, 14, cr0, cr2, cr2, {0}
 384:	02003c08 	andeq	r3, r0, #8, 24	; 0x800
 388:	66060104 	strvs	r0, [r6], -r4, lsl #2
 38c:	01a00306 	lsleq	r0, r6, #6
 390:	69676782 	stmdbvs	r7!, {r1, r7, r8, r9, sl, sp, lr}^
 394:	2fbc4ba2 	svccs	0x00bc4ba2
 398:	a04f85a1 	subge	r8, pc, r1, lsr #11
 39c:	000a0267 	andeq	r0, sl, r7, ror #4
 3a0:	00a60101 	adceq	r0, r6, r1, lsl #2
 3a4:	00020000 	andeq	r0, r2, r0
 3a8:	00000063 	andeq	r0, r0, r3, rrx
 3ac:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
 3b0:	0101000d 	tsteq	r1, sp
 3b4:	00000101 	andeq	r0, r0, r1, lsl #2
 3b8:	00000100 	andeq	r0, r0, r0, lsl #2
 3bc:	6d6f6301 	stclvs	3, cr6, [pc, #-4]!	; 3c0 <_start-0xc0007c40>
 3c0:	2f6e6f6d 	svccs	0x006e6f6d
 3c4:	00637273 	rsbeq	r7, r3, r3, ror r2
 3c8:	6f632f2e 	svcvs	0x00632f2e
 3cc:	6e6f6d6d 	cdpvs	13, 6, cr6, cr15, cr13, {3}
 3d0:	636e692f 	cmnvs	lr, #770048	; 0xbc000
 3d4:	6564756c 	strbvs	r7, [r4, #-1388]!	; 0xfffffa94
 3d8:	61750000 	cmnvs	r5, r0
 3dc:	632e7472 			; <UNDEFINED> instruction: 0x632e7472
 3e0:	00000100 	andeq	r0, r0, r0, lsl #2
 3e4:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
 3e8:	31706d32 	cmncc	r0, r2, lsr sp
 3ec:	675f7878 			; <UNDEFINED> instruction: 0x675f7878
 3f0:	2e6f6970 			; <UNDEFINED> instruction: 0x2e6f6970
 3f4:	00020068 	andeq	r0, r2, r8, rrx
 3f8:	6d747300 	ldclvs	3, cr7, [r4, #-0]
 3fc:	706d3233 	rsbvc	r3, sp, r3, lsr r2
 400:	5f787831 	svcpl	0x00787831
 404:	74726175 	ldrbtvc	r6, [r2], #-373	; 0xfffffe8b
 408:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
 40c:	00000000 	andeq	r0, r0, r0
 410:	94140205 	ldrls	r0, [r4], #-517	; 0xfffffdfb
 414:	4c17c000 	ldcmi	0, cr12, [r7], {-0}
 418:	d8d7d7d7 	ldmle	r7, {r0, r1, r2, r4, r6, r7, r8, r9, sl, ip, lr, pc}^
 41c:	d8d7d7d7 	ldmle	r7, {r0, r1, r2, r4, r6, r7, r8, r9, sl, ip, lr, pc}^
 420:	d7d8d8d7 			; <UNDEFINED> instruction: 0xd7d8d8d7
 424:	d7d8d884 	ldrble	sp, [r8, r4, lsl #17]
 428:	009f85d8 			; <UNDEFINED> instruction: 0x009f85d8
 42c:	06010402 	streq	r0, [r1], -r2, lsl #8
 430:	83bb062e 			; <UNDEFINED> instruction: 0x83bb062e
 434:	83684b67 	cmnhi	r8, #105472	; 0x19c00
 438:	6984b92f 	stmibvs	r4, {r0, r1, r2, r3, r5, r8, fp, ip, sp, pc}
 43c:	04020068 	streq	r0, [r2], #-104	; 0xffffff98
 440:	062e0601 	strteq	r0, [lr], -r1, lsl #12
 444:	022f83bb 	eoreq	r8, pc, #-335544318	; 0xec000002
 448:	01010008 	tsteq	r1, r8
 44c:	00000037 	andeq	r0, r0, r7, lsr r0
 450:	00230002 	eoreq	r0, r3, r2
 454:	01020000 	mrseq	r0, (UNDEF: 2)
 458:	000d0efb 	strdeq	r0, [sp], -fp
 45c:	01010101 	tsteq	r1, r1, lsl #2
 460:	01000000 	mrseq	r0, (UNDEF: 0)
 464:	73010000 	movwvc	r0, #4096	; 0x1000
 468:	00006372 	andeq	r6, r0, r2, ror r3
 46c:	695f6f64 	ldmdbvs	pc, {r2, r5, r6, r8, r9, sl, fp, sp, lr}^	; <UNPREDICTABLE>
 470:	632e7172 			; <UNDEFINED> instruction: 0x632e7172
 474:	00000100 	andeq	r0, r0, r0, lsl #2
 478:	02050000 	andeq	r0, r5, #0
 47c:	c00096f0 	strdgt	r9, [r0], -r0
 480:	08024b15 	stmdaeq	r2, {r0, r2, r4, r8, r9, fp, lr}
 484:	ab010100 	blge	4088c <_start-0xbffc7774>
 488:	02000000 	andeq	r0, r0, #0
 48c:	00006e00 	andeq	r6, r0, r0, lsl #28
 490:	fb010200 	blx	40c9a <_start-0xbffc7366>
 494:	01000d0e 	tsteq	r0, lr, lsl #26
 498:	00010101 	andeq	r0, r1, r1, lsl #2
 49c:	00010000 	andeq	r0, r1, r0
 4a0:	72730100 	rsbsvc	r0, r3, #0, 2
 4a4:	2f2e0063 	svccs	0x002e0063
 4a8:	6d6d6f63 	stclvs	15, cr6, [sp, #-396]!	; 0xfffffe74
 4ac:	692f6e6f 	stmdbvs	pc!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}	; <UNPREDICTABLE>
 4b0:	756c636e 	strbvc	r6, [ip, #-878]!	; 0xfffffc92
 4b4:	00006564 	andeq	r6, r0, r4, ror #10
 4b8:	2e6d7770 	mcrcs	7, 3, r7, cr13, cr0, {3}
 4bc:	00010063 	andeq	r0, r1, r3, rrx
 4c0:	6d747300 	ldclvs	3, cr7, [r4, #-0]
 4c4:	706d3233 	rsbvc	r3, sp, r3, lsr r2
 4c8:	5f787831 	svcpl	0x00787831
 4cc:	2e636372 	mcrcs	3, 3, r6, cr3, cr2, {3}
 4d0:	00020068 	andeq	r0, r2, r8, rrx
 4d4:	6d747300 	ldclvs	3, cr7, [r4, #-0]
 4d8:	706d3233 	rsbvc	r3, sp, r3, lsr r2
 4dc:	5f787831 	svcpl	0x00787831
 4e0:	6f697067 	svcvs	0x00697067
 4e4:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
 4e8:	74730000 	ldrbtvc	r0, [r3], #-0
 4ec:	6d32336d 	ldcvs	3, cr3, [r2, #-436]!	; 0xfffffe4c
 4f0:	78783170 	ldmdavc	r8!, {r4, r5, r6, r8, ip, sp}^
 4f4:	6d69745f 	cfstrdvs	mvd7, [r9, #-380]!	; 0xfffffe84
 4f8:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
 4fc:	00000000 	andeq	r0, r0, r0
 500:	97080205 	strls	r0, [r8, -r5, lsl #4]
 504:	3303c000 	movwcc	ip, #12288	; 0x3000
 508:	a1a04d01 	lslge	r4, r1, #26
 50c:	dad7d8d7 	ble	ff5f6870 <__bss_end__+0x3f5ec404>
 510:	d9f3d9f3 	ldmible	r3!, {r0, r1, r4, r5, r6, r7, r8, fp, ip, lr, pc}^
 514:	d7d7daf3 			; <UNDEFINED> instruction: 0xd7d7daf3
 518:	d8dad8d8 	ldmle	sl, {r3, r4, r6, r7, fp, ip, lr, pc}^
 51c:	d8d8d8da 	ldmle	r8, {r1, r3, r4, r6, r7, fp, ip, lr, pc}^
 520:	9f4c8ad7 	svcls	0x004c8ad7
 524:	d7d7d7a1 	ldrble	sp, [r7, r1, lsr #15]
 528:	9f4c8ad7 	svcls	0x004c8ad7
 52c:	d7d7d7a1 	ldrble	sp, [r7, r1, lsr #15]
 530:	000802d7 	ldrdeq	r0, [r8], -r7
 534:	00360101 	eorseq	r0, r6, r1, lsl #2
 538:	00020000 	andeq	r0, r2, r0
 53c:	0000001d 	andeq	r0, r0, sp, lsl r0
 540:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
 544:	0101000d 	tsteq	r1, sp
 548:	00000101 	andeq	r0, r0, r1, lsl #2
 54c:	00000100 	andeq	r0, r0, r0, lsl #2
 550:	616d0001 	cmnvs	sp, r1
 554:	632e6e69 			; <UNDEFINED> instruction: 0x632e6e69
 558:	00000000 	andeq	r0, r0, r0
 55c:	02050000 	andeq	r0, r5, #0
 560:	c0009b00 	andgt	r9, r0, r0, lsl #22
 564:	02004b17 	andeq	r4, r0, #23552	; 0x5c00
 568:	02300104 	eorseq	r0, r0, #4, 2
 56c:	01010002 	tsteq	r1, r2

Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	0000005e 	andeq	r0, r0, lr, asr r0
       4:	00000002 	andeq	r0, r0, r2
       8:	01040000 	mrseq	r0, (UNDEF: 4)
       c:	00000000 	andeq	r0, r0, r0
      10:	c0008000 	andgt	r8, r0, r0
      14:	c0008218 	andgt	r8, r0, r8, lsl r2
      18:	72617473 	rsbvc	r7, r1, #1929379840	; 0x73000000
      1c:	74732f74 	ldrbtvc	r2, [r3], #-3956	; 0xfffff08c
      20:	2e747261 	cdpcs	2, 7, cr7, cr4, cr1, {3}
      24:	682f0053 	stmdavs	pc!, {r0, r1, r4, r6}	; <UNPREDICTABLE>
      28:	2f656d6f 	svccs	0x00656d6f
      2c:	6c656873 	stclvs	8, cr6, [r5], #-460	; 0xfffffe34
      30:	2f6e6f74 	svccs	0x006e6f74
      34:	6b736544 	blvs	1cd954c <_start-0xbe32eab4>
      38:	2f706f74 	svccs	0x00706f74
      3c:	6a797168 	bvs	1e5c5e4 <_start-0xbe1aba1c>
      40:	37304c2f 	ldrcc	r4, [r0, -pc, lsr #24]!
      44:	6d72615f 	ldfvse	f6, [r2, #-380]!	; 0xfffffe84
      48:	7961642f 	stmdbvc	r1!, {r0, r1, r2, r3, r5, sl, sp, lr}^
      4c:	312d3630 			; <UNDEFINED> instruction: 0x312d3630
      50:	4e470033 	mcrmi	0, 2, r0, cr7, cr3, {1}
      54:	53412055 	movtpl	r2, #4181	; 0x1055
      58:	322e3220 	eorcc	r3, lr, #32, 4
      5c:	00322e38 	eorseq	r2, r2, r8, lsr lr
      60:	00668001 	rsbeq	r8, r6, r1
      64:	00020000 	andeq	r0, r2, r0
      68:	00000014 	andeq	r0, r0, r4, lsl r0
      6c:	00970104 	addseq	r0, r7, r4, lsl #2
      70:	82180000 	andshi	r0, r8, #0
      74:	82c8c000 	sbchi	ip, r8, #0
      78:	6f63c000 	svcvs	0x0063c000
      7c:	6e6f6d6d 	cdpvs	13, 6, cr6, cr15, cr13, {3}
      80:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
      84:	6d755f2f 	ldclvs	15, cr5, [r5, #-188]!	; 0xffffff44
      88:	6973646f 	ldmdbvs	r3!, {r0, r1, r2, r3, r5, r6, sl, sp, lr}^
      8c:	00532e33 	subseq	r2, r3, r3, lsr lr
      90:	6d6f682f 	stclvs	8, cr6, [pc, #-188]!	; ffffffdc <__bss_end__+0x3fff5b70>
      94:	68732f65 	ldmdavs	r3!, {r0, r2, r5, r6, r8, r9, sl, fp, sp}^
      98:	6f746c65 	svcvs	0x00746c65
      9c:	65442f6e 	strbvs	r2, [r4, #-3950]	; 0xfffff092
      a0:	6f746b73 	svcvs	0x00746b73
      a4:	71682f70 	smcvc	33520	; 0x82f0
      a8:	4c2f6a79 			; <UNDEFINED> instruction: 0x4c2f6a79
      ac:	615f3730 	cmpvs	pc, r0, lsr r7	; <UNPREDICTABLE>
      b0:	642f6d72 	strtvs	r6, [pc], #-3442	; b8 <_start-0xc0007f48>
      b4:	36307961 	ldrtcc	r7, [r0], -r1, ror #18
      b8:	0033312d 	eorseq	r3, r3, sp, lsr #2
      bc:	20554e47 	subscs	r4, r5, r7, asr #28
      c0:	32205341 	eorcc	r5, r0, #67108865	; 0x4000001
      c4:	2e38322e 	cdpcs	2, 3, cr3, cr8, cr14, {1}
      c8:	80010032 	andhi	r0, r1, r2, lsr r0
      cc:	00000066 	andeq	r0, r0, r6, rrx
      d0:	00280002 	eoreq	r0, r8, r2
      d4:	01040000 	mrseq	r0, (UNDEF: 4)
      d8:	00000107 	andeq	r0, r0, r7, lsl #2
      dc:	c00082c8 	andgt	r8, r0, r8, asr #5
      e0:	c000835c 	andgt	r8, r0, ip, asr r3
      e4:	6d6d6f63 	stclvs	15, cr6, [sp, #-396]!	; 0xfffffe74
      e8:	732f6e6f 			; <UNDEFINED> instruction: 0x732f6e6f
      ec:	5f2f6372 	svcpl	0x002f6372
      f0:	76696475 			; <UNDEFINED> instruction: 0x76696475
      f4:	2e336973 			; <UNDEFINED> instruction: 0x2e336973
      f8:	682f0053 	stmdavs	pc!, {r0, r1, r4, r6}	; <UNPREDICTABLE>
      fc:	2f656d6f 	svccs	0x00656d6f
     100:	6c656873 	stclvs	8, cr6, [r5], #-460	; 0xfffffe34
     104:	2f6e6f74 	svccs	0x006e6f74
     108:	6b736544 	blvs	1cd9620 <_start-0xbe32e9e0>
     10c:	2f706f74 	svccs	0x00706f74
     110:	6a797168 	bvs	1e5c6b8 <_start-0xbe1ab948>
     114:	37304c2f 	ldrcc	r4, [r0, -pc, lsr #24]!
     118:	6d72615f 	ldfvse	f6, [r2, #-380]!	; 0xfffffe84
     11c:	7961642f 	stmdbvc	r1!, {r0, r1, r2, r3, r5, sl, sp, lr}^
     120:	312d3630 			; <UNDEFINED> instruction: 0x312d3630
     124:	4e470033 	mcrmi	0, 2, r0, cr7, cr3, {1}
     128:	53412055 	movtpl	r2, #4181	; 0x1055
     12c:	322e3220 	eorcc	r3, lr, #32, 4
     130:	00322e38 	eorseq	r2, r2, r8, lsr lr
     134:	047e8001 	ldrbteq	r8, [lr], #-1
     138:	00040000 	andeq	r0, r4, r0
     13c:	0000003c 	andeq	r0, r0, ip, lsr r0
     140:	00570104 	subseq	r0, r7, r4, lsl #2
     144:	160c0000 	strne	r0, [ip], -r0
     148:	8a000001 	bhi	154 <_start-0xc0007eac>
     14c:	5c000001 	stcpl	0, cr0, [r0], {1}
     150:	b8c00083 	stmialt	r0, {r0, r1, r7}^
     154:	70000010 	andvc	r0, r0, r0, lsl r0
     158:	02000001 	andeq	r0, r0, #1
     15c:	0000003e 	andeq	r0, r0, lr, lsr r0
     160:	00302803 	eorseq	r2, r0, r3, lsl #16
     164:	04030000 	streq	r0, [r3], #-0
     168:	00000007 	andeq	r0, r0, r7
     16c:	00004502 	andeq	r4, r0, r2, lsl #10
     170:	25660300 	strbcs	r0, [r6, #-768]!	; 0xfffffd00
     174:	04000000 	streq	r0, [r0], #-0
     178:	00000058 	andeq	r0, r0, r8, asr r0
     17c:	00000051 	andeq	r0, r0, r1, asr r0
     180:	00005105 	andeq	r5, r0, r5, lsl #2
     184:	0600ff00 	streq	pc, [r0], -r0, lsl #30
     188:	00f60704 	rscseq	r0, r6, r4, lsl #14
     18c:	01060000 	mrseq	r0, (UNDEF: 6)
     190:	0000e308 	andeq	lr, r0, r8, lsl #6
     194:	016b0700 	cmneq	fp, r0, lsl #14
     198:	11010000 	mrsne	r0, (UNDEF: 1)
     19c:	00000041 	andeq	r0, r0, r1, asr #32
     1a0:	a3680305 	cmnge	r8, #335544320	; 0x14000000
     1a4:	cc08c000 	stcgt	0, cr12, [r8], {-0}
     1a8:	02000001 	andeq	r0, r0, #1
     1ac:	93c8017d 	bicls	r0, r8, #1073741855	; 0x4000001f
     1b0:	004cc000 	subeq	ip, ip, r0
     1b4:	9c010000 	stcls	0, cr0, [r1], {-0}
     1b8:	000000b6 	strheq	r0, [r0], -r6
     1bc:	746d6609 	strbtvc	r6, [sp], #-1545	; 0xfffff9f7
     1c0:	017d0200 	cmneq	sp, r0, lsl #4
     1c4:	000000b6 	strheq	r0, [r0], -r6
     1c8:	0a709102 	beq	1c245d8 <_start-0xbe3e3a28>
     1cc:	0000230b 	andeq	r2, r0, fp, lsl #6
     1d0:	017f0200 	cmneq	pc, r0, lsl #4
     1d4:	00000036 	andeq	r0, r0, r6, lsr r0
     1d8:	0b649102 	bleq	19245e8 <_start-0xbe6e3a18>
     1dc:	00000172 	andeq	r0, r0, r2, ror r1
     1e0:	c8018002 	stmdagt	r1, {r1, pc}
     1e4:	03000000 	movweq	r0, #0
     1e8:	007f8091 			; <UNDEFINED> instruction: 0x007f8091
     1ec:	00c3040c 	sbceq	r0, r3, ip, lsl #8
     1f0:	01060000 	mrseq	r0, (UNDEF: 6)
     1f4:	0000ec08 	andeq	lr, r0, r8, lsl #24
     1f8:	00bc0d00 	adcseq	r0, ip, r0, lsl #26
     1fc:	bc040000 	stclt	0, cr0, [r4], {-0}
     200:	d8000000 	stmdale	r0, {}	; <UNPREDICTABLE>
     204:	05000000 	streq	r0, [r0, #-0]
     208:	00000051 	andeq	r0, r0, r1, asr r0
     20c:	cb0e0063 	blgt	3803a0 <_start-0xbfc87c60>
     210:	02000001 	andeq	r0, r0, #1
     214:	012e0172 			; <UNDEFINED> instruction: 0x012e0172
     218:	937c0000 	cmnls	ip, #0
     21c:	004cc000 	subeq	ip, ip, r0
     220:	9c010000 	stcls	0, cr0, [r1], {-0}
     224:	0000012e 	andeq	r0, r0, lr, lsr #2
     228:	66756209 	ldrbtvs	r6, [r5], -r9, lsl #4
     22c:	01720200 	cmneq	r2, r0, lsl #4
     230:	00000135 	andeq	r0, r0, r5, lsr r1
     234:	09609102 	stmdbeq	r0!, {r1, r8, ip, pc}^
     238:	00746d66 	rsbseq	r6, r4, r6, ror #26
     23c:	b6017202 	strlt	r7, [r1], -r2, lsl #4
     240:	02000000 	andeq	r0, r0, #0
     244:	0b0a7491 	bleq	29d490 <_start-0xbfd6ab70>
     248:	00000023 	andeq	r0, r0, r3, lsr #32
     24c:	36017402 	strcc	r7, [r1], -r2, lsl #8
     250:	02000000 	andeq	r0, r0, #0
     254:	690f6491 	stmdbvs	pc, {r0, r4, r7, sl, sp, lr}	; <UNPREDICTABLE>
     258:	01750200 	cmneq	r5, r0, lsl #4
     25c:	0000012e 	andeq	r0, r0, lr, lsr #2
     260:	00689102 	rsbeq	r9, r8, r2, lsl #2
     264:	69050410 	stmdbvs	r5, {r4, sl}
     268:	0c00746e 	cfstrseq	mvf7, [r0], {110}	; 0x6e
     26c:	0000bc04 	andeq	fp, r0, r4, lsl #24
     270:	01ca1100 	biceq	r1, sl, r0, lsl #2
     274:	bb020000 	bllt	8027c <_start-0xbff87d84>
     278:	0000012e 	andeq	r0, r0, lr, lsr #2
     27c:	c0008ab4 			; <UNDEFINED> instruction: 0xc0008ab4
     280:	000008c8 	andeq	r0, r0, r8, asr #17
     284:	02479c01 	subeq	r9, r7, #256	; 0x100
     288:	62120000 	andsvs	r0, r2, #0
     28c:	02006675 	andeq	r6, r0, #122683392	; 0x7500000
     290:	000135bb 			; <UNDEFINED> instruction: 0x000135bb
     294:	44910200 	ldrmi	r0, [r1], #512	; 0x200
     298:	746d6612 	strbtvc	r6, [sp], #-1554	; 0xfffff9ee
     29c:	b6bb0200 	ldrtlt	r0, [fp], r0, lsl #4
     2a0:	02000000 	andeq	r0, r0, #0
     2a4:	23134091 	tstcs	r3, #145	; 0x91
     2a8:	02000000 	andeq	r0, r0, #0
     2ac:	000036bb 			; <UNDEFINED> instruction: 0x000036bb
     2b0:	bc910300 	ldclt	3, cr0, [r1], {0}
     2b4:	656c147f 	strbvs	r1, [ip, #-1151]!	; 0xfffffb81
     2b8:	bd02006e 	stclt	0, cr0, [r2, #-440]	; 0xfffffe48
     2bc:	0000012e 	andeq	r0, r0, lr, lsr #2
     2c0:	14509102 	ldrbne	r9, [r0], #-258	; 0xfffffefe
     2c4:	006d756e 	rsbeq	r7, sp, lr, ror #10
     2c8:	0247c102 	subeq	ip, r7, #-2147483648	; 0x80000000
     2cc:	91020000 	mrsls	r0, (UNDEF: 2)
     2d0:	00691474 	rsbeq	r1, r9, r4, ror r4
     2d4:	012ec302 			; <UNDEFINED> instruction: 0x012ec302
     2d8:	91020000 	mrsls	r0, (UNDEF: 2)
     2dc:	00de1570 	sbcseq	r1, lr, r0, ror r5
     2e0:	c3020000 	movwgt	r0, #8192	; 0x2000
     2e4:	0000012e 	andeq	r0, r0, lr, lsr #2
     2e8:	146c9102 	strbtne	r9, [ip], #-258	; 0xfffffefe
     2ec:	00727473 	rsbseq	r7, r2, r3, ror r4
     2f0:	0135c402 	teqeq	r5, r2, lsl #8
     2f4:	91020000 	mrsls	r0, (UNDEF: 2)
     2f8:	00731468 	rsbseq	r1, r3, r8, ror #8
     2fc:	00b6c502 	adcseq	ip, r6, r2, lsl #10
     300:	91020000 	mrsls	r0, (UNDEF: 2)
     304:	012a1564 			; <UNDEFINED> instruction: 0x012a1564
     308:	c7020000 	strgt	r0, [r2, -r0]
     30c:	0000012e 	andeq	r0, r0, lr, lsr #2
     310:	15609102 	strbne	r9, [r0, #-258]!	; 0xfffffefe
     314:	0000017e 	andeq	r0, r0, lr, ror r1
     318:	012ec902 			; <UNDEFINED> instruction: 0x012ec902
     31c:	91020000 	mrsls	r0, (UNDEF: 2)
     320:	004d155c 	subeq	r1, sp, ip, asr r5
     324:	ca020000 	bgt	8032c <_start-0xbff87cd4>
     328:	0000012e 	andeq	r0, r0, lr, lsr #2
     32c:	15589102 	ldrbne	r9, [r8, #-258]	; 0xfffffefe
     330:	00000135 	andeq	r0, r0, r5, lsr r1
     334:	012ecc02 			; <UNDEFINED> instruction: 0x012ecc02
     338:	91020000 	mrsls	r0, (UNDEF: 2)
     33c:	01551654 	cmpeq	r5, r4, asr r6
     340:	d6020000 	strle	r0, [r2], -r0
     344:	c0008b0c 	andgt	r8, r0, ip, lsl #22
     348:	00912417 	addseq	r2, r1, r7, lsl r4
     34c:	000028c0 	andeq	r2, r0, r0, asr #17
     350:	00022e00 	andeq	r2, r2, r0, lsl #28
     354:	70690f00 	rsbvc	r0, r9, r0, lsl #30
     358:	01340200 	teqeq	r4, r0, lsl #4
     35c:	0000024e 	andeq	r0, r0, lr, asr #4
     360:	00489102 	subeq	r9, r8, r2, lsl #2
     364:	00915018 	addseq	r5, r1, r8, lsl r0
     368:	000028c0 	andeq	r2, r0, r0, asr #17
     36c:	70690f00 	rsbvc	r0, r9, r0, lsl #30
     370:	01370200 	teqeq	r7, r0, lsl #4
     374:	0000025b 	andeq	r0, r0, fp, asr r2
     378:	004c9102 	subeq	r9, ip, r2, lsl #2
     37c:	07040600 	streq	r0, [r4, -r0, lsl #12]
     380:	000000f1 	strdeq	r0, [r0], -r1
     384:	0254040c 	subseq	r0, r4, #12, 8	; 0xc000000
     388:	04060000 	streq	r0, [r6], #-0
     38c:	0001b605 	andeq	fp, r1, r5, lsl #12
     390:	2e040c00 	cdpcs	12, 0, cr0, cr4, cr0, {0}
     394:	19000001 	stmdbne	r0, {r0}
     398:	0000015c 	andeq	r0, r0, ip, asr r1
     39c:	0051b302 	subseq	fp, r1, r2, lsl #6
     3a0:	8a480000 	bhi	12003a8 <_start-0xbee07c58>
     3a4:	006cc000 	rsbeq	ip, ip, r0
     3a8:	9c010000 	stcls	0, cr0, [r1], {-0}
     3ac:	000002a2 	andeq	r0, r0, r2, lsr #5
     3b0:	02007312 	andeq	r7, r0, #1207959552	; 0x48000000
     3b4:	0000b6b3 			; <UNDEFINED> instruction: 0x0000b6b3
     3b8:	74910200 	ldrvc	r0, [r1], #512	; 0x200
     3bc:	00002e13 	andeq	r2, r0, r3, lsl lr
     3c0:	51b30200 			; <UNDEFINED> instruction: 0x51b30200
     3c4:	02000000 	andeq	r0, r0, #0
     3c8:	73147091 	tstvc	r4, #145	; 0x91
     3cc:	b5020063 	strlt	r0, [r2, #-99]	; 0xffffff9d
     3d0:	000000b6 	strheq	r0, [r0], -r6
     3d4:	00789102 	rsbseq	r9, r8, r2, lsl #2
     3d8:	0001641a 	andeq	r6, r1, sl, lsl r4
     3dc:	356e0200 	strbcc	r0, [lr, #-512]!	; 0xfffffe00
     3e0:	64000001 	strvs	r0, [r0], #-1
     3e4:	e4c00086 	strb	r0, [r0], #134	; 0x86
     3e8:	01000003 	tsteq	r0, r3
     3ec:	00036f9c 	muleq	r3, ip, pc	; <UNPREDICTABLE>
     3f0:	74731200 	ldrbtvc	r1, [r3], #-512	; 0xfffffe00
     3f4:	6e020072 	mcrvs	0, 0, r0, cr2, cr2, {3}
     3f8:	00000135 	andeq	r0, r0, r5, lsr r1
     3fc:	7f9c9103 	svcvc	0x009c9103
     400:	6d756e12 	ldclvs	14, cr6, [r5, #-72]!	; 0xffffffb8
     404:	546e0200 	strbtpl	r0, [lr], #-512	; 0xfffffe00
     408:	03000002 	movweq	r0, #2
     40c:	137f9891 	cmnne	pc, #9502720	; 0x910000
     410:	000000de 	ldrdeq	r0, [r0], -lr
     414:	00516e02 	subseq	r6, r1, r2, lsl #28
     418:	91030000 	mrsls	r0, (UNDEF: 3)
     41c:	30137f94 	mulscc	r3, r4, pc	; <UNPREDICTABLE>
     420:	02000001 	andeq	r0, r0, #1
     424:	00012e6e 	andeq	r2, r1, lr, ror #28
     428:	90910300 	addsls	r0, r1, r0, lsl #6
     42c:	004d137f 	subeq	r1, sp, pc, ror r3
     430:	6e020000 	cdpvs	0, 0, cr0, cr2, cr0, {0}
     434:	0000012e 	andeq	r0, r0, lr, lsr #2
     438:	13009102 	movwne	r9, #258	; 0x102
     43c:	0000016d 	andeq	r0, r0, sp, ror #2
     440:	012e6e02 			; <UNDEFINED> instruction: 0x012e6e02
     444:	91020000 	mrsls	r0, (UNDEF: 2)
     448:	00631404 	rsbeq	r1, r3, r4, lsl #8
     44c:	00bc7102 	adcseq	r7, ip, r2, lsl #2
     450:	91020000 	mrsls	r0, (UNDEF: 2)
     454:	01bf156b 			; <UNDEFINED> instruction: 0x01bf156b
     458:	71020000 	mrsvc	r0, (UNDEF: 2)
     45c:	000000bc 	strheq	r0, [r0], -ip
     460:	14779102 	ldrbtne	r9, [r7], #-258	; 0xfffffefe
     464:	00706d74 	rsbseq	r6, r0, r4, ror sp
     468:	036f7102 	cmneq	pc, #-2147483648	; 0x80000000
     46c:	91030000 	mrsls	r0, (UNDEF: 3)
     470:	00157fa0 	andseq	r7, r5, r0, lsr #31
     474:	02000000 	andeq	r0, r0, #0
     478:	0000b672 	andeq	fp, r0, r2, ror r6
     47c:	70910200 	addsvc	r0, r1, r0, lsl #4
     480:	02006914 	andeq	r6, r0, #20, 18	; 0x50000
     484:	00012e73 	andeq	r2, r1, r3, ror lr
     488:	6c910200 	lfmvs	f0, 4, [r1], {0}
     48c:	00882018 	addeq	r2, r8, r8, lsl r0
     490:	000034c0 	andeq	r3, r0, r0, asr #9
     494:	01c41500 	biceq	r1, r4, r0, lsl #10
     498:	95020000 	strls	r0, [r2, #-0]
     49c:	0000012e 	andeq	r0, r0, lr, lsr #2
     4a0:	00649102 	rsbeq	r9, r4, r2, lsl #2
     4a4:	00bc0400 	adcseq	r0, ip, r0, lsl #8
     4a8:	037f0000 	cmneq	pc, #0
     4ac:	51050000 	mrspl	r0, (UNDEF: 5)
     4b0:	41000000 	mrsmi	r0, (UNDEF: 0)
     4b4:	00191b00 	andseq	r1, r9, r0, lsl #22
     4b8:	49020000 	stmdbmi	r2, {}	; <UNPREDICTABLE>
     4bc:	0000012e 	andeq	r0, r0, lr, lsr #2
     4c0:	c00085d0 	ldrdgt	r8, [r0], -r0
     4c4:	00000094 	muleq	r0, r4, r0
     4c8:	03b19c01 			; <UNDEFINED> instruction: 0x03b19c01
     4cc:	73120000 	tstvc	r2, #0
     4d0:	b1490200 	mrslt	r0, (UNDEF: 105)
     4d4:	02000003 	andeq	r0, r0, #3
     4d8:	69147491 	ldmdbvs	r4, {r0, r4, r7, sl, ip, sp, lr}
     4dc:	2e4b0200 	cdpcs	2, 4, cr0, cr11, cr0, {0}
     4e0:	02000001 	andeq	r0, r0, #1
     4e4:	0c007891 	stceq	8, cr7, [r0], {145}	; 0x91
     4e8:	0000b604 	andeq	fp, r0, r4, lsl #12
     4ec:	01081100 	mrseq	r1, (UNDEF: 24)
     4f0:	21020000 	mrscs	r0, (UNDEF: 2)
     4f4:	00000254 	andeq	r0, r0, r4, asr r2
     4f8:	c0008564 	andgt	r8, r0, r4, ror #10
     4fc:	0000006c 	andeq	r0, r0, ip, rrx
     500:	03fa9c01 	mvnseq	r9, #256	; 0x100
     504:	63120000 	tstvs	r2, #0
     508:	21020070 	tstcs	r2, r0, ror r0
     50c:	000000b6 	strheq	r0, [r0], -r6
     510:	13749102 	cmnne	r4, #-2147483648	; 0x80000000
     514:	00000103 	andeq	r0, r0, r3, lsl #2
     518:	03fa2102 	mvnseq	r2, #-2147483648	; 0x80000000
     51c:	91020000 	mrsls	r0, (UNDEF: 2)
     520:	00de1370 	sbcseq	r1, lr, r0, ror r3
     524:	21020000 	mrscs	r0, (UNDEF: 2)
     528:	00000051 	andeq	r0, r0, r1, asr r0
     52c:	006c9102 	rsbeq	r9, ip, r2, lsl #2
     530:	0135040c 	teqeq	r5, ip, lsl #8
     534:	3f110000 	svccc	0x00110000
     538:	02000001 	andeq	r0, r0, #1
     53c:	00024706 	andeq	r4, r2, r6, lsl #14
     540:	0083ac00 	addeq	sl, r3, r0, lsl #24
     544:	0001b8c0 	andeq	fp, r1, r0, asr #17
     548:	5f9c0100 	svcpl	0x009c0100
     54c:	12000004 	andne	r0, r0, #4
     550:	02007063 	andeq	r7, r0, #99	; 0x63
     554:	0000b606 	andeq	fp, r0, r6, lsl #12
     558:	6c910200 	lfmvs	f0, 4, [r1], {0}
     55c:	00010313 	andeq	r0, r1, r3, lsl r3
     560:	fa060200 	blx	180d68 <_start-0xbfe87298>
     564:	02000003 	andeq	r0, r0, #3
     568:	de136891 	mrcle	8, 0, r6, cr3, cr1, {4}
     56c:	02000000 	andeq	r0, r0, #0
     570:	00005106 	andeq	r5, r0, r6, lsl #2
     574:	64910200 	ldrvs	r0, [r1], #512	; 0x200
     578:	00014e15 	andeq	r4, r1, r5, lsl lr
     57c:	47080200 	strmi	r0, [r8, -r0, lsl #4]
     580:	02000002 	andeq	r0, r0, #2
     584:	28157491 	ldmdacs	r5, {r0, r4, r7, sl, ip, sp, lr}
     588:	02000000 	andeq	r0, r0, #0
     58c:	00024708 	andeq	r4, r2, r8, lsl #14
     590:	70910200 	addsvc	r0, r1, r0, lsl #4
     594:	00341c00 	eorseq	r1, r4, r0, lsl #24
     598:	44010000 	strmi	r0, [r1], #-0
     59c:	00000058 	andeq	r0, r0, r8, asr r0
     5a0:	c000835c 	andgt	r8, r0, ip, asr r3
     5a4:	00000050 	andeq	r0, r0, r0, asr r0
     5a8:	63129c01 	tstvs	r2, #256	; 0x100
     5ac:	58440100 	stmdapl	r4, {r8}^
     5b0:	02000000 	andeq	r0, r0, #0
     5b4:	00007891 	muleq	r0, r1, r8
     5b8:	00000214 	andeq	r0, r0, r4, lsl r2
     5bc:	01f80004 	mvnseq	r0, r4
     5c0:	01040000 	mrseq	r0, (UNDEF: 4)
     5c4:	00000057 	andeq	r0, r0, r7, asr r0
     5c8:	0002620c 	andeq	r6, r2, ip, lsl #4
     5cc:	00018a00 	andeq	r8, r1, r0, lsl #20
     5d0:	00941400 	addseq	r1, r4, r0, lsl #8
     5d4:	0002dcc0 	andeq	sp, r2, r0, asr #25
     5d8:	0003a200 	andeq	sl, r3, r0, lsl #4
     5dc:	02340200 	eorseq	r0, r4, #0, 4
     5e0:	0000ca04 	andeq	ip, r0, r4, lsl #20
     5e4:	02080300 	andeq	r0, r8, #0, 6
     5e8:	05020000 	streq	r0, [r2, #-0]
     5ec:	000000d1 	ldrdeq	r0, [r0], -r1
     5f0:	02450300 	subeq	r0, r5, #0, 6
     5f4:	06020000 	streq	r0, [r2], -r0
     5f8:	000000d1 	ldrdeq	r0, [r0], -r1
     5fc:	020e0304 	andeq	r0, lr, #4, 6	; 0x10000000
     600:	07020000 	streq	r0, [r2, -r0]
     604:	000000d1 	ldrdeq	r0, [r0], -r1
     608:	02020308 	andeq	r0, r2, #8, 6	; 0x20000000
     60c:	08020000 	stmdaeq	r2, {}	; <UNPREDICTABLE>
     610:	000000d1 	ldrdeq	r0, [r0], -r1
     614:	4449040c 	strbmi	r0, [r9], #-1036	; 0xfffffbf4
     618:	09020052 	stmdbeq	r2, {r1, r4, r6}
     61c:	000000d1 	ldrdeq	r0, [r0], -r1
     620:	444f0410 	strbmi	r0, [pc], #-1040	; 628 <_start-0xc00079d8>
     624:	0a020052 	beq	80774 <_start-0xbff8788c>
     628:	000000d1 	ldrdeq	r0, [r0], -r1
     62c:	01fd0314 	mvnseq	r0, r4, lsl r3
     630:	0b020000 	bleq	80638 <_start-0xbff879c8>
     634:	000000d1 	ldrdeq	r0, [r0], -r1
     638:	02390318 	eorseq	r0, r9, #24, 6	; 0x60000000
     63c:	0c020000 	stceq	0, cr0, [r2], {-0}
     640:	000000d1 	ldrdeq	r0, [r0], -r1
     644:	024c031c 	subeq	r0, ip, #28, 6	; 0x70000000
     648:	0d020000 	stceq	0, cr0, [r2, #-0]
     64c:	000000d1 	ldrdeq	r0, [r0], -r1
     650:	025d0320 	subseq	r0, sp, #32, 6	; 0x80000000
     654:	0e020000 	cdpeq	0, 0, cr0, cr2, cr0, {0}
     658:	000000d1 	ldrdeq	r0, [r0], -r1
     65c:	52420424 	subpl	r0, r2, #36, 8	; 0x24000000
     660:	0f020052 	svceq	0x00020052
     664:	000000d1 	ldrdeq	r0, [r0], -r1
     668:	65720428 	ldrbvs	r0, [r2, #-1064]!	; 0xfffffbd8
     66c:	10020073 	andne	r0, r2, r3, ror r0
     670:	000000d1 	ldrdeq	r0, [r0], -r1
     674:	01df032c 	bicseq	r0, pc, ip, lsr #6
     678:	11020000 	mrsne	r0, (UNDEF: 2)
     67c:	000000d1 	ldrdeq	r0, [r0], -r1
     680:	04050030 	streq	r0, [r5], #-48	; 0xffffffd0
     684:	0000f607 	andeq	pc, r0, r7, lsl #12
     688:	00ca0600 	sbceq	r0, sl, r0, lsl #12
     68c:	32070000 	andcc	r0, r7, #0
     690:	02000002 	andeq	r0, r0, #2
     694:	00002513 	andeq	r2, r0, r3, lsl r5
     698:	03300200 	teqeq	r0, #0, 4
     69c:	00017a04 	andeq	r7, r1, r4, lsl #20
     6a0:	52430400 	subpl	r0, r3, #0, 8
     6a4:	05030031 	streq	r0, [r3, #-49]	; 0xffffffcf
     6a8:	000000d1 	ldrdeq	r0, [r0], -r1
     6ac:	52430400 	subpl	r0, r3, #0, 8
     6b0:	06030032 			; <UNDEFINED> instruction: 0x06030032
     6b4:	000000d1 	ldrdeq	r0, [r0], -r1
     6b8:	52430404 	subpl	r0, r3, #4, 8	; 0x4000000
     6bc:	07030033 	smladxeq	r3, r3, r0, r0
     6c0:	000000d1 	ldrdeq	r0, [r0], -r1
     6c4:	52420408 	subpl	r0, r2, #8, 8	; 0x8000000
     6c8:	08030052 	stmdaeq	r3, {r1, r4, r6}
     6cc:	000000d1 	ldrdeq	r0, [r0], -r1
     6d0:	0216030c 	andseq	r0, r6, #12, 6	; 0x30000000
     6d4:	09030000 	stmdbeq	r3, {}	; <UNPREDICTABLE>
     6d8:	000000d1 	ldrdeq	r0, [r0], -r1
     6dc:	01f80310 	mvnseq	r0, r0, lsl r3
     6e0:	0a030000 	beq	c06e8 <_start-0xbff47918>
     6e4:	000000d1 	ldrdeq	r0, [r0], -r1
     6e8:	51520414 	cmppl	r2, r4, lsl r4
     6ec:	0b030052 	bleq	c083c <_start-0xbff477c4>
     6f0:	000000d1 	ldrdeq	r0, [r0], -r1
     6f4:	53490418 	movtpl	r0, #37912	; 0x9418
     6f8:	0c030052 	stceq	0, cr0, [r3], {82}	; 0x52
     6fc:	000000d1 	ldrdeq	r0, [r0], -r1
     700:	4349041c 	movtmi	r0, #37916	; 0x941c
     704:	0d030052 	stceq	0, cr0, [r3, #-328]	; 0xfffffeb8
     708:	000000d1 	ldrdeq	r0, [r0], -r1
     70c:	44520420 	ldrbmi	r0, [r2], #-1056	; 0xfffffbe0
     710:	0e030052 	mcreq	0, 0, r0, cr3, cr2, {2}
     714:	000000d1 	ldrdeq	r0, [r0], -r1
     718:	44540424 	ldrbmi	r0, [r4], #-1060	; 0xfffffbdc
     71c:	0f030052 	svceq	0x00030052
     720:	000000d1 	ldrdeq	r0, [r0], -r1
     724:	021b0328 	andseq	r0, fp, #40, 6	; 0xa0000000
     728:	10030000 	andne	r0, r3, r0
     72c:	000000d1 	ldrdeq	r0, [r0], -r1
     730:	3e07002c 	cdpcc	0, 0, cr0, cr7, cr12, {1}
     734:	03000002 	movweq	r0, #2
     738:	0000e111 	andeq	lr, r0, r1, lsl r1
     73c:	02510800 	subseq	r0, r1, #0, 16
     740:	30010000 	andcc	r0, r1, r0
     744:	000001ac 	andeq	r0, r0, ip, lsr #3
     748:	c00096a4 	andgt	r9, r0, r4, lsr #13
     74c:	0000004c 	andeq	r0, r0, ip, asr #32
     750:	01ac9c01 			; <UNDEFINED> instruction: 0x01ac9c01
     754:	63090000 	movwvs	r0, #36864	; 0x9000
     758:	32010068 	andcc	r0, r1, #104	; 0x68
     75c:	000001ac 	andeq	r0, r0, ip, lsr #3
     760:	007b9102 	rsbseq	r9, fp, r2, lsl #2
     764:	ec080105 	stfs	f0, [r8], {5}
     768:	0a000000 	beq	770 <_start-0xc0007890>
     76c:	000001ac 	andeq	r0, r0, ip, lsr #3
     770:	0001e70b 	andeq	lr, r1, fp, lsl #14
     774:	5c2a0100 	stfpls	f0, [sl], #-0
     778:	48c00096 	stmiami	r0, {r1, r2, r4, r7}^
     77c:	01000000 	mrseq	r0, (UNDEF: 0)
     780:	0001dc9c 	muleq	r1, ip, ip
     784:	02210c00 	eoreq	r0, r1, #0, 24
     788:	2a010000 	bcs	40790 <_start-0xbffc7870>
     78c:	000001dc 	ldrdeq	r0, [r0], -ip
     790:	00749102 	rsbseq	r9, r4, r2, lsl #2
     794:	01b3040d 			; <UNDEFINED> instruction: 0x01b3040d
     798:	d30b0000 	movwle	r0, #45056	; 0xb000
     79c:	01000001 	tsteq	r0, r1
     7a0:	0095fc23 	addseq	pc, r5, r3, lsr #24
     7a4:	000060c0 	andeq	r6, r0, r0, asr #1
     7a8:	069c0100 	ldreq	r0, [ip], r0, lsl #2
     7ac:	0c000002 	stceq	0, cr0, [r0], {2}
     7b0:	000001f3 	strdeq	r0, [r0], -r3
     7b4:	01b32301 			; <UNDEFINED> instruction: 0x01b32301
     7b8:	91020000 	mrsls	r0, (UNDEF: 2)
     7bc:	260e0074 			; <UNDEFINED> instruction: 0x260e0074
     7c0:	01000002 	tsteq	r0, r2
     7c4:	00941405 	addseq	r1, r4, r5, lsl #8
     7c8:	0001e8c0 	andeq	lr, r1, r0, asr #17
     7cc:	009c0100 	addseq	r0, ip, r0, lsl #2
     7d0:	00000049 	andeq	r0, r0, r9, asr #32
     7d4:	02d00004 	sbcseq	r0, r0, #4
     7d8:	01040000 	mrseq	r0, (UNDEF: 4)
     7dc:	00000057 	andeq	r0, r0, r7, asr r0
     7e0:	00027b0c 	andeq	r7, r2, ip, lsl #22
     7e4:	00018a00 	andeq	r8, r1, r0, lsl #20
     7e8:	0096f000 	addseq	pc, r6, r0
     7ec:	000018c0 	andeq	r1, r0, r0, asr #17
     7f0:	00044c00 	andeq	r4, r4, r0, lsl #24
     7f4:	00690200 	rsbeq	r0, r9, r0, lsl #4
     7f8:	00340201 	eorseq	r0, r4, r1, lsl #4
     7fc:	03050000 	movweq	r0, #20480	; 0x5000
     800:	c000a468 	andgt	sl, r0, r8, ror #8
     804:	f6070403 			; <UNDEFINED> instruction: 0xf6070403
     808:	04000000 	streq	r0, [r0], #-0
     80c:	00000274 	andeq	r0, r0, r4, ror r2
     810:	96f00301 	ldrbtls	r0, [r0], r1, lsl #6
     814:	0018c000 	andseq	ip, r8, r0
     818:	9c010000 	stcls	0, cr0, [r1], {-0}
     81c:	00103d00 	andseq	r3, r0, r0, lsl #26
     820:	18000400 	stmdane	r0, {sl}
     824:	04000003 	streq	r0, [r0], #-3
     828:	00005701 	andeq	r5, r0, r1, lsl #14
     82c:	0ad90c00 	beq	ff643834 <__bss_end__+0x3f6393c8>
     830:	018a0000 	orreq	r0, sl, r0
     834:	97080000 	strls	r0, [r8, -r0]
     838:	03f8c000 	mvnseq	ip, #0
     83c:	04870000 	streq	r0, [r7], #0
     840:	00020000 	andeq	r0, r2, r0
     844:	d7040210 	smladle	r4, r0, r2, r0
     848:	0300000c 	movweq	r0, #12
     84c:	00000def 	andeq	r0, r0, pc, ror #27
     850:	0cde0502 	cfldr64eq	mvdx0, [lr], {2}
     854:	03000000 	movweq	r0, #0
     858:	000004ef 	andeq	r0, r0, pc, ror #9
     85c:	0cf30602 	ldcleq	6, cr0, [r3], #8
     860:	03040000 	movweq	r0, #16384	; 0x4000
     864:	000005aa 	andeq	r0, r0, sl, lsr #11
     868:	0cde0702 	ldcleq	7, cr0, [lr], {2}
     86c:	030c0000 	movweq	r0, #49152	; 0xc000
     870:	00000889 	andeq	r0, r0, r9, lsl #17
     874:	0cde0802 	ldcleq	8, cr0, [lr], {2}
     878:	03100000 	tsteq	r0, #0
     87c:	000004f4 	strdeq	r0, [r0], -r4
     880:	0d080902 	vstreq.16	s0, [r8, #-4]	; <UNPREDICTABLE>
     884:	03140000 	tsteq	r4, #0
     888:	00000736 	andeq	r0, r0, r6, lsr r7
     88c:	0cde0a02 	vldmiaeq	lr, {s1-s2}
     890:	03180000 	tsteq	r8, #0
     894:	00000c9d 	muleq	r0, sp, ip
     898:	0cde0b02 	vldmiaeq	lr, {d16}
     89c:	031c0000 	tsteq	ip, #0
     8a0:	00000709 	andeq	r0, r0, r9, lsl #14
     8a4:	0cde0c02 	ldcleq	12, cr0, [lr], {2}
     8a8:	03200000 	nopeq	{0}	; <UNPREDICTABLE>
     8ac:	00000e0b 	andeq	r0, r0, fp, lsl #28
     8b0:	0cde0d02 	ldcleq	13, cr0, [lr], {2}
     8b4:	03240000 			; <UNDEFINED> instruction: 0x03240000
     8b8:	00000982 	andeq	r0, r0, r2, lsl #19
     8bc:	0cde0e02 	ldcleq	14, cr0, [lr], {2}
     8c0:	03280000 			; <UNDEFINED> instruction: 0x03280000
     8c4:	00000a17 	andeq	r0, r0, r7, lsl sl
     8c8:	0cde0f02 	ldcleq	15, cr0, [lr], {2}
     8cc:	032c0000 			; <UNDEFINED> instruction: 0x032c0000
     8d0:	000002fa 	strdeq	r0, [r0], -sl
     8d4:	0cde1002 	ldcleq	0, cr1, [lr], {2}
     8d8:	03300000 	teqeq	r0, #0
     8dc:	000004f9 	strdeq	r0, [r0], -r9
     8e0:	0cf31102 	ldfeqe	f1, [r3], #8
     8e4:	03340000 	teqeq	r4, #0
     8e8:	0000034a 	andeq	r0, r0, sl, asr #6
     8ec:	0cde1202 	lfmeq	f1, 2, [lr], {2}
     8f0:	033c0000 	teqeq	ip, #0
     8f4:	00000b0d 	andeq	r0, r0, sp, lsl #22
     8f8:	0cde1302 	ldcleq	3, cr1, [lr], {2}
     8fc:	03400000 	movteq	r0, #0
     900:	000008c1 	andeq	r0, r0, r1, asr #17
     904:	0cde1402 	cfldrdeq	mvd1, [lr], {2}
     908:	03440000 	movteq	r0, #16384	; 0x4000
     90c:	00000b7f 	andeq	r0, r0, pc, ror fp
     910:	0cde1502 	cfldr64eq	mvdx1, [lr], {2}
     914:	03480000 	movteq	r0, #32768	; 0x8000
     918:	000004fe 	strdeq	r0, [r0], -lr
     91c:	0d1d1602 	ldceq	6, cr1, [sp, #-8]
     920:	034c0000 	movteq	r0, #49152	; 0xc000
     924:	00000dca 	andeq	r0, r0, sl, asr #27
     928:	0cde1702 	ldcleq	7, cr1, [lr], {2}
     92c:	03800000 	orreq	r0, r0, #0
     930:	0000080f 	andeq	r0, r0, pc, lsl #16
     934:	0cde1802 	ldcleq	8, cr1, [lr], {2}
     938:	03840000 	orreq	r0, r4, #0
     93c:	00000819 	andeq	r0, r0, r9, lsl r8
     940:	0cde1902 			; <UNDEFINED> instruction: 0x0cde1902
     944:	03880000 	orreq	r0, r8, #0
     948:	000004e5 	andeq	r0, r0, r5, ror #9
     94c:	0cde1a02 	vldmiaeq	lr, {s3-s4}
     950:	038c0000 	orreq	r0, ip, #0
     954:	00000697 	muleq	r0, r7, r6
     958:	0cde1b02 	vldmiaeq	lr, {d17}
     95c:	03900000 	orrseq	r0, r0, #0
     960:	00000b78 	andeq	r0, r0, r8, ror fp
     964:	0cde1c02 	ldcleq	12, cr1, [lr], {2}
     968:	03940000 	orrseq	r0, r4, #0
     96c:	00000443 	andeq	r0, r0, r3, asr #8
     970:	0cde1d02 	ldcleq	13, cr1, [lr], {2}
     974:	03980000 	orrseq	r0, r8, #0
     978:	0000098c 	andeq	r0, r0, ip, lsl #19
     97c:	0cde1e02 	ldcleq	14, cr1, [lr], {2}
     980:	039c0000 	orrseq	r0, ip, #0
     984:	0000064b 	andeq	r0, r0, fp, asr #12
     988:	0cde1f02 	ldcleq	15, cr1, [lr], {2}
     98c:	03a00000 	moveq	r0, #0
     990:	00000e59 	andeq	r0, r0, r9, asr lr
     994:	0cde2002 	ldcleq	0, cr2, [lr], {2}
     998:	03a40000 			; <UNDEFINED> instruction: 0x03a40000
     99c:	00000503 	andeq	r0, r0, r3, lsl #10
     9a0:	0d322102 	ldfeqs	f2, [r2, #-8]!
     9a4:	03a80000 			; <UNDEFINED> instruction: 0x03a80000
     9a8:	00000d96 	muleq	r0, r6, sp
     9ac:	0cde2202 	lfmeq	f2, 2, [lr], {2}
     9b0:	03c00000 	biceq	r0, r0, #0
     9b4:	00000467 	andeq	r0, r0, r7, ror #8
     9b8:	0cde2302 	ldcleq	3, cr2, [lr], {2}
     9bc:	03c40000 	biceq	r0, r4, #0
     9c0:	00000413 	andeq	r0, r0, r3, lsl r4
     9c4:	0cde2402 	cfldrdeq	mvd2, [lr], {2}
     9c8:	03c80000 	biceq	r0, r8, #0
     9cc:	00000d80 	andeq	r0, r0, r0, lsl #27
     9d0:	0cde2502 	cfldr64eq	mvdx2, [lr], {2}
     9d4:	03cc0000 	biceq	r0, ip, #0
     9d8:	00000a29 	andeq	r0, r0, r9, lsr #20
     9dc:	0cde2602 	ldcleq	6, cr2, [lr], {2}
     9e0:	03d00000 	bicseq	r0, r0, #0
     9e4:	000008c9 	andeq	r0, r0, r9, asr #17
     9e8:	0cde2702 	ldcleq	7, cr2, [lr], {2}
     9ec:	03d40000 	bicseq	r0, r4, #0
     9f0:	00000a20 	andeq	r0, r0, r0, lsr #20
     9f4:	0cde2802 	ldcleq	8, cr2, [lr], {2}
     9f8:	03d80000 	bicseq	r0, r8, #0
     9fc:	00000508 	andeq	r0, r0, r8, lsl #10
     a00:	0d472902 	vstreq.16	s5, [r7, #-4]	; <UNPREDICTABLE>
     a04:	04dc0000 	ldrbeq	r0, [ip], #0
     a08:	00000340 	andeq	r0, r0, r0, asr #6
     a0c:	0cde2a02 	vldmiaeq	lr, {s5-s6}
     a10:	01000000 	mrseq	r0, (UNDEF: 0)
     a14:	0009cd04 	andeq	ip, r9, r4, lsl #26
     a18:	de2b0200 	cdple	2, 2, cr0, cr11, cr0, {0}
     a1c:	0400000c 	streq	r0, [r0], #-12
     a20:	0cbc0401 	cfldrseq	mvf0, [ip], #4
     a24:	2c020000 	stccs	0, cr0, [r2], {-0}
     a28:	00000cde 	ldrdeq	r0, [r0], -lr
     a2c:	f9040108 			; <UNDEFINED> instruction: 0xf9040108
     a30:	0200000a 	andeq	r0, r0, #10
     a34:	000cde2d 	andeq	sp, ip, sp, lsr #28
     a38:	04010c00 	streq	r0, [r1], #-3072	; 0xfffff400
     a3c:	00000a7a 	andeq	r0, r0, sl, ror sl
     a40:	0cde2e02 	ldcleq	14, cr2, [lr], {2}
     a44:	01100000 	tsteq	r0, r0
     a48:	000bd104 	andeq	sp, fp, r4, lsl #2
     a4c:	de2f0200 	cdple	2, 2, cr0, cr15, cr0, {0}
     a50:	1400000c 	strne	r0, [r0], #-12
     a54:	050d0401 	streq	r0, [sp, #-1025]	; 0xfffffbff
     a58:	30020000 	andcc	r0, r2, r0
     a5c:	00000d5c 	andeq	r0, r0, ip, asr sp
     a60:	6f040118 	svcvs	0x00040118
     a64:	0200000d 	andeq	r0, r0, #13
     a68:	000cde31 	andeq	sp, ip, r1, lsr lr
     a6c:	04014000 	streq	r4, [r1], #-0
     a70:	00000973 	andeq	r0, r0, r3, ror r9
     a74:	0cde3202 	lfmeq	f3, 2, [lr], {2}
     a78:	01440000 	mrseq	r0, (UNDEF: 68)
     a7c:	00051204 	andeq	r1, r5, r4, lsl #4
     a80:	71330200 	teqvc	r3, r0, lsl #4
     a84:	4800000d 	stmdami	r0, {r0, r2, r3}
     a88:	0e350401 	cdpeq	4, 3, cr0, cr5, cr1, {0}
     a8c:	34020000 	strcc	r0, [r2], #-0
     a90:	00000cde 	ldrdeq	r0, [r0], -lr
     a94:	d9040180 	stmdble	r4, {r7, r8}
     a98:	02000004 	andeq	r0, r0, #4
     a9c:	000cde35 	andeq	sp, ip, r5, lsr lr
     aa0:	04018400 	streq	r8, [r1], #-1024	; 0xfffffc00
     aa4:	00000a85 	andeq	r0, r0, r5, lsl #21
     aa8:	0cde3602 	ldcleq	6, cr3, [lr], {2}
     aac:	01880000 	orreq	r0, r8, r0
     ab0:	000d7404 	andeq	r7, sp, r4, lsl #8
     ab4:	de370200 	cdple	2, 3, cr0, cr7, cr0, {0}
     ab8:	8c00000c 	stchi	0, cr0, [r0], {12}
     abc:	07580401 	ldrbeq	r0, [r8, -r1, lsl #8]
     ac0:	38020000 	stmdacc	r2, {}	; <UNPREDICTABLE>
     ac4:	00000cde 	ldrdeq	r0, [r0], -lr
     ac8:	5b040190 	blpl	101110 <_start-0xbff06ef0>
     acc:	02000004 	andeq	r0, r0, #4
     ad0:	000cde39 	andeq	sp, ip, r9, lsr lr
     ad4:	04019400 	streq	r9, [r1], #-1024	; 0xfffffc00
     ad8:	00000a6e 	andeq	r0, r0, lr, ror #20
     adc:	0cde3a02 	vldmiaeq	lr, {s7-s8}
     ae0:	01980000 	orrseq	r0, r8, r0
     ae4:	00083304 	andeq	r3, r8, r4, lsl #6
     ae8:	de3b0200 	cdple	2, 3, cr0, cr11, cr0, {0}
     aec:	9c00000c 	stcls	0, cr0, [r0], {12}
     af0:	04910401 	ldreq	r0, [r1], #1025	; 0x401
     af4:	3c020000 	stccc	0, cr0, [r2], {-0}
     af8:	00000cde 	ldrdeq	r0, [r0], -lr
     afc:	310401a0 	smlatbcc	r4, r0, r1, r0
     b00:	02000008 	andeq	r0, r0, #8
     b04:	000cde3d 	andeq	sp, ip, sp, lsr lr
     b08:	0401a400 	streq	sl, [r1], #-1024	; 0xfffffc00
     b0c:	00000517 	andeq	r0, r0, r7, lsl r5
     b10:	0d863e02 	stceq	14, cr3, [r6, #8]
     b14:	01a80000 			; <UNDEFINED> instruction: 0x01a80000
     b18:	00062204 	andeq	r2, r6, r4, lsl #4
     b1c:	de3f0200 	cdple	2, 3, cr0, cr15, cr0, {0}
     b20:	0000000c 	andeq	r0, r0, ip
     b24:	08f20402 	ldmeq	r2!, {r1, sl}^
     b28:	40020000 	andmi	r0, r2, r0
     b2c:	00000cde 	ldrdeq	r0, [r0], -lr
     b30:	52040204 	andpl	r0, r4, #4, 4	; 0x40000000
     b34:	0200000c 	andeq	r0, r0, #12
     b38:	000cde41 	andeq	sp, ip, r1, asr #28
     b3c:	04020800 	streq	r0, [r2], #-2048	; 0xfffff800
     b40:	0000032c 	andeq	r0, r0, ip, lsr #6
     b44:	0cde4202 	lfmeq	f4, 2, [lr], {2}
     b48:	020c0000 	andeq	r0, ip, #0
     b4c:	0002d304 	andeq	sp, r2, r4, lsl #6
     b50:	de430200 	cdple	2, 4, cr0, cr3, cr0, {0}
     b54:	1000000c 	andne	r0, r0, ip
     b58:	0cde0402 	cfldrdeq	mvd0, [lr], {2}
     b5c:	44020000 	strmi	r0, [r2], #-0
     b60:	00000cde 	ldrdeq	r0, [r0], -lr
     b64:	1f040214 	svcne	0x00040214
     b68:	02000004 	andeq	r0, r0, #4
     b6c:	000cde45 	andeq	sp, ip, r5, asr #28
     b70:	04021800 	streq	r1, [r2], #-2048	; 0xfffff800
     b74:	000006e0 	andeq	r0, r0, r0, ror #13
     b78:	0cde4602 	ldcleq	6, cr4, [lr], {2}
     b7c:	021c0000 	andseq	r0, ip, #0
     b80:	000b5a04 	andeq	r5, fp, r4, lsl #20
     b84:	de470200 	cdple	2, 4, cr0, cr7, cr0, {0}
     b88:	2000000c 	andcs	r0, r0, ip
     b8c:	02880402 	addeq	r0, r8, #33554432	; 0x2000000
     b90:	48020000 	stmdami	r2, {}	; <UNPREDICTABLE>
     b94:	00000cde 	ldrdeq	r0, [r0], -lr
     b98:	35040224 	strcc	r0, [r4, #-548]	; 0xfffffddc
     b9c:	02000006 	andeq	r0, r0, #6
     ba0:	000d8649 	andeq	r8, sp, r9, asr #12
     ba4:	04022800 	streq	r2, [r2], #-2048	; 0xfffff800
     ba8:	0000044d 	andeq	r0, r0, sp, asr #8
     bac:	0cde4a02 	vldmiaeq	lr, {s9-s10}
     bb0:	02800000 	addeq	r0, r0, #0
     bb4:	00072804 	andeq	r2, r7, r4, lsl #16
     bb8:	de4b0200 	cdple	2, 4, cr0, cr11, cr0, {0}
     bbc:	8400000c 	strhi	r0, [r0], #-12
     bc0:	0aad0402 	beq	feb41bd0 <__bss_end__+0x3eb37764>
     bc4:	4c020000 	stcmi	0, cr0, [r2], {-0}
     bc8:	00000cde 	ldrdeq	r0, [r0], -lr
     bcc:	a2040288 	andge	r0, r4, #136, 4	; 0x80000008
     bd0:	0200000d 	andeq	r0, r0, #13
     bd4:	000cde4d 	andeq	sp, ip, sp, asr #28
     bd8:	04028c00 	streq	r8, [r2], #-3072	; 0xfffff400
     bdc:	0000085d 	andeq	r0, r0, sp, asr r8
     be0:	0cde4e02 	ldcleq	14, cr4, [lr], {2}
     be4:	02900000 	addseq	r0, r0, #0
     be8:	000b3c04 	andeq	r3, fp, r4, lsl #24
     bec:	de4f0200 	cdple	2, 4, cr0, cr15, cr0, {0}
     bf0:	9400000c 	strls	r0, [r0], #-12
     bf4:	0e990402 	cdpeq	4, 9, cr0, cr9, cr2, {0}
     bf8:	50020000 	andpl	r0, r2, r0
     bfc:	00000cde 	ldrdeq	r0, [r0], -lr
     c00:	2d040298 	sfmcs	f0, 4, [r4, #-608]	; 0xfffffda0
     c04:	02000005 	andeq	r0, r0, #5
     c08:	000cde51 	andeq	sp, ip, r1, asr lr
     c0c:	04029c00 	streq	r9, [r2], #-3072	; 0xfffff400
     c10:	00000302 	andeq	r0, r0, r2, lsl #6
     c14:	0d9b5202 	lfmeq	f5, 4, [fp, #8]
     c18:	02a00000 	adceq	r0, r0, #0
     c1c:	000cec04 	andeq	lr, ip, r4, lsl #24
     c20:	de530200 	cdple	2, 5, cr0, cr3, cr0, {0}
     c24:	0000000c 	andeq	r0, r0, ip
     c28:	0cfc0403 	cfldrdeq	mvd0, [ip], #12
     c2c:	54020000 	strpl	r0, [r2], #-0
     c30:	00000cde 	ldrdeq	r0, [r0], -lr
     c34:	1f040304 	svcne	0x00040304
     c38:	0200000c 	andeq	r0, r0, #12
     c3c:	000cde55 	andeq	sp, ip, r5, asr lr
     c40:	04030800 	streq	r0, [r3], #-2048	; 0xfffff800
     c44:	000002c3 	andeq	r0, r0, r3, asr #5
     c48:	0cde5602 	ldcleq	6, cr5, [lr], {2}
     c4c:	030c0000 	movweq	r0, #49152	; 0xc000
     c50:	0009a604 	andeq	sl, r9, r4, lsl #12
     c54:	de570200 	cdple	2, 5, cr0, cr7, cr0, {0}
     c58:	1000000c 	andne	r0, r0, ip
     c5c:	0c6a0403 	cfstrdeq	mvd0, [sl], #-12
     c60:	58020000 	stmdapl	r2, {}	; <UNPREDICTABLE>
     c64:	00000cde 	ldrdeq	r0, [r0], -lr
     c68:	a3040314 	movwge	r0, #17172	; 0x4314
     c6c:	0200000b 	andeq	r0, r0, #11
     c70:	000cde59 	andeq	sp, ip, r9, asr lr
     c74:	04031800 	streq	r1, [r3], #-2048	; 0xfffff800
     c78:	00000e62 	andeq	r0, r0, r2, ror #28
     c7c:	0cde5a02 	vldmiaeq	lr, {s11-s12}
     c80:	031c0000 	tsteq	ip, #0
     c84:	00056b04 	andeq	r6, r5, r4, lsl #22
     c88:	de5b0200 	cdple	2, 5, cr0, cr11, cr0, {0}
     c8c:	2000000c 	andcs	r0, r0, ip
     c90:	084b0403 	stmdaeq	fp, {r0, r1, sl}^
     c94:	5c020000 	stcpl	0, cr0, [r2], {-0}
     c98:	00000cde 	ldrdeq	r0, [r0], -lr
     c9c:	08040324 	stmdaeq	r4, {r2, r5, r8, r9}
     ca0:	02000003 	andeq	r0, r0, #3
     ca4:	000d865d 	andeq	r8, sp, sp, asr r6
     ca8:	04032800 	streq	r2, [r3], #-2048	; 0xfffff800
     cac:	000008d5 	ldrdeq	r0, [r0], -r5
     cb0:	0cde5e02 	ldcleq	14, cr5, [lr], {2}
     cb4:	03800000 	orreq	r0, r0, #0
     cb8:	000bdc04 	andeq	sp, fp, r4, lsl #24
     cbc:	de5f0200 	cdple	2, 5, cr0, cr15, cr0, {0}
     cc0:	8400000c 	strhi	r0, [r0], #-12
     cc4:	0ac90403 	beq	ff241cd8 <__bss_end__+0x3f23786c>
     cc8:	60020000 	andvs	r0, r2, r0
     ccc:	00000cde 	ldrdeq	r0, [r0], -lr
     cd0:	ba040388 	blt	101af8 <_start-0xbff06508>
     cd4:	0200000d 	andeq	r0, r0, #13
     cd8:	000cde61 	andeq	sp, ip, r1, ror #28
     cdc:	04038c00 	streq	r8, [r3], #-3072	; 0xfffff400
     ce0:	000004c9 	andeq	r0, r0, r9, asr #9
     ce4:	0cde6202 	lfmeq	f6, 2, [lr], {2}
     ce8:	03900000 	orrseq	r0, r0, #0
     cec:	00077004 	andeq	r7, r7, r4
     cf0:	de630200 	cdple	2, 6, cr0, cr3, cr0, {0}
     cf4:	9400000c 	strls	r0, [r0], #-12
     cf8:	06810403 	streq	r0, [r1], r3, lsl #8
     cfc:	64020000 	strvs	r0, [r2], #-0
     d00:	00000cde 	ldrdeq	r0, [r0], -lr
     d04:	63040398 	movwvs	r0, #17304	; 0x4398
     d08:	02000009 	andeq	r0, r0, #9
     d0c:	000cde65 	andeq	sp, ip, r5, ror #28
     d10:	04039c00 	streq	r9, [r3], #-3072	; 0xfffff400
     d14:	0000030e 	andeq	r0, r0, lr, lsl #6
     d18:	0d9b6602 	ldceq	6, cr6, [fp, #8]
     d1c:	03a00000 	moveq	r0, #0
     d20:	0003cb04 	andeq	ip, r3, r4, lsl #22
     d24:	de670200 	cdple	2, 6, cr0, cr7, cr0, {0}
     d28:	0000000c 	andeq	r0, r0, ip
     d2c:	07c00404 	strbeq	r0, [r0, r4, lsl #8]
     d30:	68020000 	stmdavs	r2, {}	; <UNPREDICTABLE>
     d34:	00000cde 	ldrdeq	r0, [r0], -lr
     d38:	8b040404 	blhi	101d50 <_start-0xbff062b0>
     d3c:	0200000e 	andeq	r0, r0, #14
     d40:	000cde69 	andeq	sp, ip, r9, ror #28
     d44:	04040800 	streq	r0, [r4], #-2048	; 0xfffff800
     d48:	000008b3 			; <UNDEFINED> instruction: 0x000008b3
     d4c:	0cde6a02 	vldmiaeq	lr, {s13-s14}
     d50:	040c0000 	streq	r0, [ip], #-0
     d54:	000bc304 	andeq	ip, fp, r4, lsl #6
     d58:	de6b0200 	cdple	2, 6, cr0, cr11, cr0, {0}
     d5c:	1000000c 	andne	r0, r0, ip
     d60:	0a3e0404 	beq	f81d78 <_start-0xbf086288>
     d64:	6c020000 	stcvs	0, cr0, [r2], {-0}
     d68:	00000cde 	ldrdeq	r0, [r0], -lr
     d6c:	04040414 	streq	r0, [r4], #-1044	; 0xfffffbec
     d70:	0200000c 	andeq	r0, r0, #12
     d74:	000cde6d 	andeq	sp, ip, sp, ror #28
     d78:	04041800 	streq	r1, [r4], #-2048	; 0xfffff800
     d7c:	00000780 	andeq	r0, r0, r0, lsl #15
     d80:	0cde6e02 	ldcleq	14, cr6, [lr], {2}
     d84:	041c0000 	ldreq	r0, [ip], #-0
     d88:	000c7a04 	andeq	r7, ip, r4, lsl #20
     d8c:	de6f0200 	cdple	2, 6, cr0, cr15, cr0, {0}
     d90:	2000000c 	andcs	r0, r0, ip
     d94:	03140404 	tsteq	r4, #4, 8	; 0x4000000
     d98:	70020000 	andvc	r0, r2, r0
     d9c:	00000db0 			; <UNDEFINED> instruction: 0x00000db0
     da0:	62040424 	andvs	r0, r4, #36, 8	; 0x24000000
     da4:	02000006 	andeq	r0, r0, #6
     da8:	000cde71 	andeq	sp, ip, r1, ror lr
     dac:	04080000 	streq	r0, [r8], #-0
     db0:	000008aa 	andeq	r0, r0, sl, lsr #17
     db4:	0cde7202 	lfmeq	f7, 2, [lr], {2}
     db8:	08040000 	stmdaeq	r4, {}	; <UNPREDICTABLE>
     dbc:	000df404 	andeq	pc, sp, r4, lsl #8
     dc0:	de730200 	cdple	2, 7, cr0, cr3, cr0, {0}
     dc4:	0800000c 	stmdaeq	r0, {r2, r3}
     dc8:	08920408 	ldmeq	r2, {r3, sl}
     dcc:	74020000 	strvc	r0, [r2], #-0
     dd0:	00000cde 	ldrdeq	r0, [r0], -lr
     dd4:	1a04080c 	bne	102e0c <_start-0xbff051f4>
     dd8:	02000003 	andeq	r0, r0, #3
     ddc:	000dc575 	andeq	ip, sp, r5, ror r5
     de0:	04081000 	streq	r1, [r8], #-0
     de4:	00000a9f 	muleq	r0, pc, sl	; <UNPREDICTABLE>
     de8:	0cde7602 	ldcleq	6, cr7, [lr], {2}
     dec:	08200000 	stmdaeq	r0!, {}	; <UNPREDICTABLE>
     df0:	00061904 	andeq	r1, r6, r4, lsl #18
     df4:	de770200 	cdple	2, 7, cr0, cr7, cr0, {0}
     df8:	2400000c 	strcs	r0, [r0], #-12
     dfc:	0dd10408 	cfldrdeq	mvd0, [r1, #32]
     e00:	78020000 	stmdavc	r2, {}	; <UNPREDICTABLE>
     e04:	00000cde 	ldrdeq	r0, [r0], -lr
     e08:	0e040828 	cdpeq	8, 0, cr0, cr4, cr8, {1}
     e0c:	02000009 	andeq	r0, r0, #9
     e10:	000cde79 	andeq	sp, ip, r9, ror lr
     e14:	04082c00 	streq	r2, [r8], #-3072	; 0xfffff400
     e18:	00000ae3 	andeq	r0, r0, r3, ror #21
     e1c:	0cde7a02 	vldmiaeq	lr, {s15-s16}
     e20:	08300000 	ldmdaeq	r0!, {}	; <UNPREDICTABLE>
     e24:	0004c004 	andeq	ip, r4, r4
     e28:	de7b0200 	cdple	2, 7, cr0, cr11, cr0, {0}
     e2c:	3400000c 	strcc	r0, [r0], #-12
     e30:	0c490408 	cfstrdeq	mvd0, [r9], {8}
     e34:	7c020000 	stcvc	0, cr0, [r2], {-0}
     e38:	00000cde 	ldrdeq	r0, [r0], -lr
     e3c:	cd040838 	stcgt	8, cr0, [r4, #-224]	; 0xffffff20
     e40:	02000007 	andeq	r0, r0, #7
     e44:	000cde7d 	andeq	sp, ip, sp, ror lr
     e48:	04083c00 	streq	r3, [r8], #-3072	; 0xfffff400
     e4c:	00000320 	andeq	r0, r0, r0, lsr #6
     e50:	0dda7e02 	ldcleq	14, cr7, [sl, #8]
     e54:	08400000 	stmdaeq	r0, {}^	; <UNPREDICTABLE>
     e58:	00091804 	andeq	r1, r9, r4, lsl #16
     e5c:	de7f0200 	cdple	2, 7, cr0, cr15, cr0, {0}
     e60:	8000000c 	andhi	r0, r0, ip
     e64:	0de50408 	cfstrdeq	mvd0, [r5, #32]!
     e68:	80020000 	andhi	r0, r2, r0
     e6c:	00000cde 	ldrdeq	r0, [r0], -lr
     e70:	16040884 	strne	r0, [r4], -r4, lsl #17
     e74:	0200000b 	andeq	r0, r0, #11
     e78:	000cde81 	andeq	sp, ip, r1, lsl #29
     e7c:	04088800 	streq	r8, [r8], #-2048	; 0xfffff800
     e80:	00000ddb 	ldrdeq	r0, [r0], -fp
     e84:	0cde8202 	lfmeq	f0, 3, [lr], {2}
     e88:	088c0000 	stmeq	ip, {}	; <UNPREDICTABLE>
     e8c:	0009c404 	andeq	ip, r9, r4, lsl #8
     e90:	de830200 	cdple	2, 8, cr0, cr3, cr0, {0}
     e94:	9000000c 	andls	r0, r0, ip
     e98:	097b0408 	ldmdbeq	fp!, {r3, sl}^
     e9c:	84020000 	strhi	r0, [r2], #-0
     ea0:	00000cde 	ldrdeq	r0, [r0], -lr
     ea4:	96040894 			; <UNDEFINED> instruction: 0x96040894
     ea8:	02000009 	andeq	r0, r0, #9
     eac:	000cde85 	andeq	sp, ip, r5, lsl #29
     eb0:	04089800 	streq	r9, [r8], #-2048	; 0xfffff800
     eb4:	00000c60 	andeq	r0, r0, r0, ror #24
     eb8:	0cde8602 	ldcleq	6, cr8, [lr], {2}
     ebc:	089c0000 	ldmeq	ip, {}	; <UNPREDICTABLE>
     ec0:	00092d04 	andeq	r2, r9, r4, lsl #26
     ec4:	de870200 	cdple	2, 8, cr0, cr7, cr0, {0}
     ec8:	a000000c 	andge	r0, r0, ip
     ecc:	053b0408 	ldreq	r0, [fp, #-1032]!	; 0xfffffbf8
     ed0:	88020000 	stmdahi	r2, {}	; <UNPREDICTABLE>
     ed4:	00000cde 	ldrdeq	r0, [r0], -lr
     ed8:	260408a4 	strcs	r0, [r4], -r4, lsr #17
     edc:	02000003 	andeq	r0, r0, #3
     ee0:	000d3289 	andeq	r3, sp, r9, lsl #5
     ee4:	0408a800 	streq	sl, [r8], #-2048	; 0xfffff800
     ee8:	000007e6 	andeq	r0, r0, r6, ror #15
     eec:	0cde8a02 	vldmiaeq	lr, {s17-s18}
     ef0:	08c00000 	stmiaeq	r0, {}^	; <UNPREDICTABLE>
     ef4:	0007b404 	andeq	fp, r7, r4, lsl #8
     ef8:	de8b0200 	cdple	2, 8, cr0, cr11, cr0, {0}
     efc:	c400000c 	strgt	r0, [r0], #-12
     f00:	06ac0408 	strteq	r0, [ip], r8, lsl #8
     f04:	8c020000 	stchi	0, cr0, [r2], {-0}
     f08:	00000cde 	ldrdeq	r0, [r0], -lr
     f0c:	0c0408c8 	stceq	8, cr0, [r4], {200}	; 0xc8
     f10:	0200000d 	andeq	r0, r0, #13
     f14:	000cde8d 	andeq	sp, ip, sp, lsl #29
     f18:	0408cc00 	streq	ip, [r8], #-3072	; 0xfffff400
     f1c:	000006fe 	strdeq	r0, [r0], -lr
     f20:	0cde8e02 	ldcleq	14, cr8, [lr], {2}
     f24:	08d00000 	ldmeq	r0, {}^	; <UNPREDICTABLE>
     f28:	000d8b04 	andeq	r8, sp, r4, lsl #22
     f2c:	de8f0200 	cdple	2, 8, cr0, cr15, cr0, {0}
     f30:	d400000c 	strle	r0, [r0], #-12
     f34:	0b000408 	bleq	1f5c <_start-0xc00060a4>
     f38:	90020000 	andls	r0, r2, r0
     f3c:	00000cde 	ldrdeq	r0, [r0], -lr
     f40:	7b0408d8 	blvc	1032a8 <_start-0xbff04d58>
     f44:	02000008 	andeq	r0, r0, #8
     f48:	000cde91 	muleq	ip, r1, lr
     f4c:	0408dc00 	streq	sp, [r8], #-3072	; 0xfffff400
     f50:	00000d53 	andeq	r0, r0, r3, asr sp
     f54:	0cde9202 	lfmeq	f1, 3, [lr], {2}
     f58:	08e00000 	stmiaeq	r0!, {}^	; <UNPREDICTABLE>
     f5c:	000b3004 	andeq	r3, fp, r4
     f60:	de930200 	cdple	2, 9, cr0, cr3, cr0, {0}
     f64:	e400000c 	str	r0, [r0], #-12
     f68:	06550408 	ldrbeq	r0, [r5], -r8, lsl #8
     f6c:	94020000 	strls	r0, [r2], #-0
     f70:	00000cde 	ldrdeq	r0, [r0], -lr
     f74:	e50408e8 	str	r0, [r4, #-2280]	; 0xfffff718
     f78:	02000008 	andeq	r0, r0, #8
     f7c:	000cde95 	muleq	ip, r5, lr
     f80:	0408ec00 	streq	lr, [r8], #-3072	; 0xfffff400
     f84:	0000047e 	andeq	r0, r0, lr, ror r4
     f88:	0cde9602 	ldcleq	6, cr9, [lr], {2}
     f8c:	08f00000 	ldmeq	r0!, {}^	; <UNPREDICTABLE>
     f90:	000d1704 	andeq	r1, sp, r4, lsl #14
     f94:	de970200 	cdple	2, 9, cr0, cr7, cr0, {0}
     f98:	f400000c 	vst4.8	{d0-d3}, [r0], ip
     f9c:	038b0408 	orreq	r0, fp, #8, 8	; 0x8000000
     fa0:	98020000 	stmdals	r2, {}	; <UNPREDICTABLE>
     fa4:	00000cde 	ldrdeq	r0, [r0], -lr
     fa8:	830408f8 	movwhi	r0, #18680	; 0x48f8
     fac:	02000005 	andeq	r0, r0, #5
     fb0:	000cde99 	muleq	ip, r9, lr
     fb4:	0408fc00 	streq	pc, [r8], #-3072	; 0xfffff400
     fb8:	00000d35 	andeq	r0, r0, r5, lsr sp
     fbc:	0cde9a02 	vldmiaeq	lr, {s19-s20}
     fc0:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
     fc4:	000e4f04 	andeq	r4, lr, r4, lsl #30
     fc8:	de9b0200 	cdple	2, 9, cr0, cr11, cr0, {0}
     fcc:	0400000c 	streq	r0, [r0], #-12
     fd0:	06910409 	ldreq	r0, [r1], r9, lsl #8
     fd4:	9c020000 	stcls	0, cr0, [r2], {-0}
     fd8:	00000d08 	andeq	r0, r0, r8, lsl #26
     fdc:	a0040908 	andge	r0, r4, r8, lsl #18
     fe0:	02000006 	andeq	r0, r0, #6
     fe4:	000cde9d 	muleq	ip, sp, lr
     fe8:	04090c00 	streq	r0, [r9], #-3072	; 0xfffff400
     fec:	0000033a 	andeq	r0, r0, sl, lsr r3
     ff0:	0d089e02 	stceq	14, cr9, [r8, #-8]
     ff4:	09100000 	ldmdbeq	r0, {}	; <UNPREDICTABLE>
     ff8:	000b8904 	andeq	r8, fp, r4, lsl #18
     ffc:	de9f0200 	cdple	2, 9, cr0, cr15, cr0, {0}
    1000:	1400000c 	strne	r0, [r0], #-12
    1004:	0a340409 	beq	d02030 <_start-0xbf305fd0>
    1008:	a0020000 	andge	r0, r2, r0
    100c:	00000cde 	ldrdeq	r0, [r0], -lr
    1010:	b0040918 	andlt	r0, r4, r8, lsl r9
    1014:	0200000d 	andeq	r0, r0, #13
    1018:	000cdea1 	andeq	sp, ip, r1, lsr #29
    101c:	04091c00 	streq	r1, [r9], #-3072	; 0xfffff400
    1020:	0000073e 	andeq	r0, r0, lr, lsr r7
    1024:	0cdea202 	lfmeq	f2, 3, [lr], {2}
    1028:	09200000 	stmdbeq	r0!, {}	; <UNPREDICTABLE>
    102c:	00056104 	andeq	r6, r5, r4, lsl #2
    1030:	dea30200 	cdple	2, 10, cr0, cr3, cr0, {0}
    1034:	2400000c 	strcs	r0, [r0], #-12
    1038:	0a460409 	beq	1182064 <_start-0xbee85f9c>
    103c:	a4020000 	strge	r0, [r2], #-0
    1040:	00000cde 	ldrdeq	r0, [r0], -lr
    1044:	44040928 	strmi	r0, [r4], #-2344	; 0xfffff6d8
    1048:	02000005 	andeq	r0, r0, #5
    104c:	000cdea5 	andeq	sp, ip, r5, lsr #29
    1050:	04092c00 	streq	r2, [r9], #-3072	; 0xfffff400
    1054:	00000b95 	muleq	r0, r5, fp
    1058:	0cdea602 	ldcleq	6, cr10, [lr], {2}
    105c:	09300000 	ldmdbeq	r0!, {}	; <UNPREDICTABLE>
    1060:	0003f804 	andeq	pc, r3, r4, lsl #16
    1064:	dea70200 	cdple	2, 10, cr0, cr7, cr0, {0}
    1068:	3400000c 	strcc	r0, [r0], #-12
    106c:	04720409 	ldrbteq	r0, [r2], #-1033	; 0xfffffbf7
    1070:	a8020000 	stmdage	r2, {}	; <UNPREDICTABLE>
    1074:	00000def 	andeq	r0, r0, pc, ror #27
    1078:	47040938 	smladxmi	r4, r8, r9, r0
    107c:	02000009 	andeq	r0, r0, #9
    1080:	000cdea9 	andeq	sp, ip, r9, lsr #29
    1084:	04098000 	streq	r8, [r9], #-0
    1088:	00000c3d 	andeq	r0, r0, sp, lsr ip
    108c:	0cdeaa02 	vldmiaeq	lr, {s21-s22}
    1090:	09840000 	stmibeq	r4, {}	; <UNPREDICTABLE>
    1094:	00059e04 	andeq	r9, r5, r4, lsl #28
    1098:	deab0200 	cdple	2, 10, cr0, cr11, cr0, {0}
    109c:	8800000c 	stmdahi	r0, {r2, r3}
    10a0:	04ae0409 	strteq	r0, [lr], #1033	; 0x409
    10a4:	ac020000 	stcge	0, cr0, [r2], {-0}
    10a8:	00000cde 	ldrdeq	r0, [r0], -lr
    10ac:	6404098c 	strvs	r0, [r4], #-2444	; 0xfffff674
    10b0:	02000007 	andeq	r0, r0, #7
    10b4:	000cdead 	andeq	sp, ip, sp, lsr #29
    10b8:	04099000 	streq	r9, [r9], #-0
    10bc:	00000c91 	muleq	r0, r1, ip
    10c0:	0cdeae02 	ldcleq	14, cr10, [lr], {2}
    10c4:	09940000 	ldmibeq	r4, {}	; <UNPREDICTABLE>
    10c8:	00060d04 	andeq	r0, r6, r4, lsl #26
    10cc:	deaf0200 	cdple	2, 10, cr0, cr15, cr0, {0}
    10d0:	9800000c 	stmdals	r0, {r2, r3}
    10d4:	0bf80409 	bleq	ffe02100 <__bss_end__+0x3fdf7c94>
    10d8:	b0020000 	andlt	r0, r2, r0
    10dc:	00000cde 	ldrdeq	r0, [r0], -lr
    10e0:	9104099c 			; <UNDEFINED> instruction: 0x9104099c
    10e4:	02000007 	andeq	r0, r0, #7
    10e8:	000cdeb1 			; <UNDEFINED> instruction: 0x000cdeb1
    10ec:	0409a000 	streq	sl, [r9], #-0
    10f0:	0000083f 	andeq	r0, r0, pc, lsr r8
    10f4:	0cdeb202 	lfmeq	f3, 3, [lr], {2}
    10f8:	09a40000 	stmibeq	r4!, {}	; <UNPREDICTABLE>
    10fc:	000bec04 	andeq	lr, fp, r4, lsl #24
    1100:	deb30200 	cdple	2, 11, cr0, cr3, cr0, {0}
    1104:	a800000c 	stmdage	r0, {r2, r3}
    1108:	051c0409 	ldreq	r0, [ip, #-1033]	; 0xfffffbf7
    110c:	b4020000 	strlt	r0, [r2], #-0
    1110:	00000cde 	ldrdeq	r0, [r0], -lr
    1114:	780409ac 	stmdavc	r4, {r2, r3, r5, r7, r8, fp}
    1118:	02000004 	andeq	r0, r0, #4
    111c:	000e04b5 			; <UNDEFINED> instruction: 0x000e04b5
    1120:	0409b000 	streq	fp, [r9], #-0
    1124:	00000823 	andeq	r0, r0, r3, lsr #16
    1128:	0cdeb602 	ldcleq	6, cr11, [lr], {2}
    112c:	0a000000 	beq	1134 <_start-0xc0006ecc>
    1130:	000aeb04 	andeq	lr, sl, r4, lsl #22
    1134:	deb70200 	cdple	2, 11, cr0, cr7, cr0, {0}
    1138:	0400000c 	streq	r0, [r0], #-12
    113c:	091f040a 	ldmdbeq	pc, {r1, r3, sl}	; <UNPREDICTABLE>
    1140:	b8020000 	stmdalt	r2, {}	; <UNPREDICTABLE>
    1144:	00000cde 	ldrdeq	r0, [r0], -lr
    1148:	6a040a08 	bvs	103970 <_start-0xbff04690>
    114c:	0200000b 	andeq	r0, r0, #11
    1150:	000cdeb9 			; <UNDEFINED> instruction: 0x000cdeb9
    1154:	040a0c00 	streq	r0, [sl], #-3072	; 0xfffff400
    1158:	00000c2f 	andeq	r0, r0, pc, lsr #24
    115c:	0cdeba02 	vldmiaeq	lr, {s23-s24}
    1160:	0a100000 	beq	401168 <_start-0xbfc06e98>
    1164:	0002e104 	andeq	lr, r2, r4, lsl #2
    1168:	debb0200 	cdple	2, 11, cr0, cr11, cr0, {0}
    116c:	1400000c 	strne	r0, [r0], #-12
    1170:	0c11040a 	cfldrseq	mvf0, [r1], {10}
    1174:	bc020000 	stclt	0, cr0, [r2], {-0}
    1178:	00000cde 	ldrdeq	r0, [r0], -lr
    117c:	b5040a18 	strlt	r0, [r4, #-2584]	; 0xfffff5e8
    1180:	02000002 	andeq	r0, r0, #2
    1184:	000cdebd 			; <UNDEFINED> instruction: 0x000cdebd
    1188:	040a1c00 	streq	r1, [sl], #-3072	; 0xfffff400
    118c:	000009b6 			; <UNDEFINED> instruction: 0x000009b6
    1190:	0cdebe02 	ldcleq	14, cr11, [lr], {2}
    1194:	0a200000 	beq	80119c <_start-0xbf806e64>
    1198:	000c8304 	andeq	r8, ip, r4, lsl #6
    119c:	debf0200 	cdple	2, 11, cr0, cr15, cr0, {0}
    11a0:	2400000c 	strcs	r0, [r0], #-12
    11a4:	0398040a 	orrseq	r0, r8, #167772160	; 0xa000000
    11a8:	c0020000 	andgt	r0, r2, r0
    11ac:	00000cde 	ldrdeq	r0, [r0], -lr
    11b0:	c3040a28 	movwgt	r0, #18984	; 0x4a28
    11b4:	02000005 	andeq	r0, r0, #5
    11b8:	000cdec1 	andeq	sp, ip, r1, asr #29
    11bc:	040a2c00 	streq	r2, [sl], #-3072	; 0xfffff400
    11c0:	00000e85 	andeq	r0, r0, r5, lsl #29
    11c4:	0cf3c202 	lfmeq	f4, 3, [r3], #8
    11c8:	0a300000 	beq	c011d0 <_start-0xbf406e30>
    11cc:	00049f04 	andeq	r9, r4, r4, lsl #30
    11d0:	dec30200 	cdple	2, 12, cr0, cr3, cr0, {0}
    11d4:	3800000c 	stmdacc	r0, {r2, r3}
    11d8:	0749040a 	strbeq	r0, [r9, -sl, lsl #8]
    11dc:	c4020000 	strgt	r0, [r2], #-0
    11e0:	00000cde 	ldrdeq	r0, [r0], -lr
    11e4:	8b040a3c 	blhi	103adc <_start-0xbff04524>
    11e8:	02000004 	andeq	r0, r0, #4
    11ec:	000ddac5 	andeq	sp, sp, r5, asr #21
    11f0:	040a4000 	streq	r4, [sl], #-0
    11f4:	00000a09 	andeq	r0, r0, r9, lsl #20
    11f8:	0cdec602 	ldcleq	6, cr12, [lr], {2}
    11fc:	0a800000 	beq	fe001204 <__bss_end__+0x3dff6d98>
    1200:	000cd004 	andeq	sp, ip, r4
    1204:	dec70200 	cdple	2, 12, cr0, cr7, cr0, {0}
    1208:	8400000c 	strhi	r0, [r0], #-12
    120c:	0405040a 	streq	r0, [r5], #-1034	; 0xfffffbf6
    1210:	c8020000 	stmdagt	r2, {}	; <UNPREDICTABLE>
    1214:	00000cde 	ldrdeq	r0, [r0], -lr
    1218:	c8040a88 	stmdagt	r4, {r3, r7, r9, fp}
    121c:	02000006 	andeq	r0, r0, #6
    1220:	000cdec9 	andeq	sp, ip, r9, asr #29
    1224:	040a8c00 	streq	r8, [sl], #-3072	; 0xfffff400
    1228:	00000a50 	andeq	r0, r0, r0, asr sl
    122c:	0cdeca02 	vldmiaeq	lr, {s25-s26}
    1230:	0a900000 	beq	fe401238 <__bss_end__+0x3e3f6dcc>
    1234:	00090004 	andeq	r0, r9, r4
    1238:	decb0200 	cdple	2, 12, cr0, cr11, cr0, {0}
    123c:	9400000c 	strls	r0, [r0], #-12
    1240:	0abb040a 	beq	feec2270 <__bss_end__+0x3eeb7e04>
    1244:	cc020000 	stcgt	0, cr0, [r2], {-0}
    1248:	00000cde 	ldrdeq	r0, [r0], -lr
    124c:	73040a98 	movwvc	r0, #19096	; 0x4a98
    1250:	02000003 	andeq	r0, r0, #3
    1254:	000cdecd 	andeq	sp, ip, sp, asr #29
    1258:	040a9c00 	streq	r9, [sl], #-3072	; 0xfffff400
    125c:	00000801 	andeq	r0, r0, r1, lsl #16
    1260:	0cdece02 	ldcleq	14, cr12, [lr], {2}
    1264:	0aa00000 	beq	fe80126c <__bss_end__+0x3e7f6e00>
    1268:	000a9104 	andeq	r9, sl, r4, lsl #2
    126c:	decf0200 	cdple	2, 12, cr0, cr15, cr0, {0}
    1270:	a400000c 	strge	r0, [r0], #-12
    1274:	0e41040a 	cdpeq	4, 4, cr0, cr1, cr10, {0}
    1278:	d0020000 	andle	r0, r2, r0
    127c:	00000cde 	ldrdeq	r0, [r0], -lr
    1280:	ff040aa8 			; <UNDEFINED> instruction: 0xff040aa8
    1284:	02000005 	andeq	r0, r0, #5
    1288:	000cded1 	ldrdeq	sp, [ip], -r1
    128c:	040aac00 	streq	sl, [sl], #-3072	; 0xfffff400
    1290:	00000d45 	andeq	r0, r0, r5, asr #26
    1294:	0cded202 	lfmeq	f5, 3, [lr], {2}
    1298:	0ab00000 	beq	fec012a0 <__bss_end__+0x3ebf6e34>
    129c:	0005f104 	andeq	pc, r5, r4, lsl #2
    12a0:	ded30200 	cdple	2, 13, cr0, cr3, cr0, {0}
    12a4:	b400000c 	strlt	r0, [r0], #-12
    12a8:	07f2040a 	ldrbeq	r0, [r2, sl, lsl #8]!
    12ac:	d4020000 	strle	r0, [r2], #-0
    12b0:	00000cde 	ldrdeq	r0, [r0], -lr
    12b4:	52040ab8 	andpl	r0, r4, #184, 20	; 0xb8000
    12b8:	02000005 	andeq	r0, r0, #5
    12bc:	000cded5 	ldrdeq	sp, [ip], -r5
    12c0:	040abc00 	streq	fp, [sl], #-3072	; 0xfffff400
    12c4:	000009a0 	andeq	r0, r0, r0, lsr #19
    12c8:	0ddad602 	ldcleq	6, cr13, [sl, #8]
    12cc:	0ac00000 	beq	ff0012d4 <__bss_end__+0x3eff6e68>
    12d0:	000d5f04 	andeq	r5, sp, r4, lsl #30
    12d4:	ded70200 	cdple	2, 13, cr0, cr7, cr0, {0}
    12d8:	0000000c 	andeq	r0, r0, ip
    12dc:	0dfb040b 	cfldrdeq	mvd0, [fp, #44]!	; 0x2c
    12e0:	d8020000 	stmdale	r2, {}	; <UNPREDICTABLE>
    12e4:	00000cde 	ldrdeq	r0, [r0], -lr
    12e8:	15040b04 	strne	r0, [r4, #-2820]	; 0xfffff4fc
    12ec:	0200000e 	andeq	r0, r0, #14
    12f0:	000cded9 	ldrdeq	sp, [ip], -r9
    12f4:	040b0800 	streq	r0, [fp], #-2048	; 0xfffff800
    12f8:	00000937 	andeq	r0, r0, r7, lsr r9
    12fc:	0cdeda02 	vldmiaeq	lr, {s27-s28}
    1300:	0b0c0000 	bleq	301308 <_start-0xbfd06cf8>
    1304:	00086b04 	andeq	r6, r8, r4, lsl #22
    1308:	dedb0200 	cdple	2, 13, cr0, cr11, cr0, {0}
    130c:	1000000c 	andne	r0, r0, ip
    1310:	0b4a040b 	bleq	1282344 <_start-0xbed85cbc>
    1314:	dc020000 	stcle	0, cr0, [r2], {-0}
    1318:	00000cde 	ldrdeq	r0, [r0], -lr
    131c:	33040b14 	movwcc	r0, #19220	; 0x4b14
    1320:	02000004 	andeq	r0, r0, #4
    1324:	000cdedd 	ldrdeq	sp, [ip], -sp	; <UNPREDICTABLE>
    1328:	040b1800 	streq	r1, [fp], #-2048	; 0xfffff800
    132c:	000006ee 	andeq	r0, r0, lr, ror #13
    1330:	0cdede02 	ldcleq	14, cr13, [lr], {2}
    1334:	0b1c0000 	bleq	70133c <_start-0xbf906cc4>
    1338:	0005e104 	andeq	lr, r5, r4, lsl #2
    133c:	dedf0200 	cdple	2, 13, cr0, cr15, cr0, {0}
    1340:	2000000c 	andcs	r0, r0, ip
    1344:	0b20040b 	bleq	802378 <_start-0xbf805c88>
    1348:	e0020000 	and	r0, r2, r0
    134c:	00000cde 	ldrdeq	r0, [r0], -lr
    1350:	d6040b24 	strle	r0, [r4], -r4, lsr #22
    1354:	02000007 	andeq	r0, r0, #7
    1358:	000cdee1 	andeq	sp, ip, r1, ror #29
    135c:	040b2800 	streq	r2, [fp], #-2048	; 0xfffff800
    1360:	00000363 	andeq	r0, r0, r3, ror #6
    1364:	0cdee202 	lfmeq	f6, 3, [lr], {2}
    1368:	0b2c0000 	bleq	b01370 <_start-0xbf506c90>
    136c:	0009e904 	andeq	lr, r9, r4, lsl #18
    1370:	dee30200 	cdple	2, 14, cr0, cr3, cr0, {0}
    1374:	3000000c 	andcc	r0, r0, ip
    1378:	02a5040b 	adceq	r0, r5, #184549376	; 0xb000000
    137c:	e4020000 	str	r0, [r2], #-0
    1380:	00000cde 	ldrdeq	r0, [r0], -lr
    1384:	e7040b34 	smladx	r4, r4, fp, r0
    1388:	02000003 	andeq	r0, r0, #3
    138c:	000cdee5 	andeq	sp, ip, r5, ror #29
    1390:	040b3800 	streq	r3, [fp], #-2048	; 0xfffff800
    1394:	000006b7 			; <UNDEFINED> instruction: 0x000006b7
    1398:	0cdee602 	ldcleq	6, cr14, [lr], {2}
    139c:	0b3c0000 	bleq	f013a4 <_start-0xbf106c5c>
    13a0:	00057d04 	andeq	r7, r5, r4, lsl #26
    13a4:	dae70200 	ble	ff9c1bac <__bss_end__+0x3f9b7740>
    13a8:	4000000d 	andmi	r0, r0, sp
    13ac:	0353040b 	cmpeq	r3, #184549376	; 0xb000000
    13b0:	e8020000 	stmda	r2, {}	; <UNPREDICTABLE>
    13b4:	00000cde 	ldrdeq	r0, [r0], -lr
    13b8:	3b040b80 	blcc	1041c0 <_start-0xbff03e40>
    13bc:	02000006 	andeq	r0, r0, #6
    13c0:	000cdee9 	andeq	sp, ip, r9, ror #29
    13c4:	040b8400 	streq	r8, [fp], #-1024	; 0xfffffc00
    13c8:	0000066b 	andeq	r0, r0, fp, ror #12
    13cc:	0cdeea02 	vldmiaeq	lr, {s29-s30}
    13d0:	0b880000 	bleq	fe2013d8 <__bss_end__+0x3e1f6f6c>
    13d4:	000bb304 	andeq	fp, fp, r4, lsl #6
    13d8:	deeb0200 	cdple	2, 14, cr0, cr11, cr0, {0}
    13dc:	8c00000c 	stchi	0, cr0, [r0], {12}
    13e0:	089a040b 	ldmeq	sl, {r0, r1, r3, sl}
    13e4:	ec020000 	stc	0, cr0, [r2], {-0}
    13e8:	00000cde 	ldrdeq	r0, [r0], -lr
    13ec:	f9040b90 			; <UNDEFINED> instruction: 0xf9040b90
    13f0:	02000009 	andeq	r0, r0, #9
    13f4:	000cdeed 	andeq	sp, ip, sp, ror #29
    13f8:	040b9400 	streq	r9, [fp], #-1024	; 0xfffffc00
    13fc:	000009d9 	ldrdeq	r0, [r0], -r9
    1400:	0cdeee02 	ldcleq	14, cr14, [lr], {2}
    1404:	0b980000 	bleq	fe60140c <__bss_end__+0x3e5f6fa0>
    1408:	000d2504 	andeq	r2, sp, r4, lsl #10
    140c:	deef0200 	cdple	2, 14, cr0, cr15, cr0, {0}
    1410:	9c00000c 	stcls	0, cr0, [r0], {12}
    1414:	0953040b 	ldmdbeq	r3, {r0, r1, r3, sl}^
    1418:	f0020000 			; <UNDEFINED> instruction: 0xf0020000
    141c:	00000cde 	ldrdeq	r0, [r0], -lr
    1420:	d7040ba0 	strle	r0, [r4, -r0, lsr #23]
    1424:	02000003 	andeq	r0, r0, #3
    1428:	000cdef1 	strdeq	sp, [ip], -r1
    142c:	040ba400 	streq	sl, [fp], #-1024	; 0xfffffc00
    1430:	00000e25 	andeq	r0, r0, r5, lsr #28
    1434:	0cdef202 	lfmeq	f7, 3, [lr], {2}
    1438:	0ba80000 	bleq	fea01440 <__bss_end__+0x3e9f6fd4>
    143c:	0005b304 	andeq	fp, r5, r4, lsl #6
    1440:	def30200 	cdple	2, 15, cr0, cr3, cr0, {0}
    1444:	ac00000c 	stcge	0, cr0, [r0], {12}
    1448:	05d1040b 	ldrbeq	r0, [r1, #1035]	; 0x40b
    144c:	f4020000 	vst4.8	{d0-d3}, [r2], r0
    1450:	00000cde 	ldrdeq	r0, [r0], -lr
    1454:	5e040bb0 	vmovpl.16	d20[0], r0
    1458:	0200000a 	andeq	r0, r0, #10
    145c:	000cdef5 	strdeq	sp, [ip], -r5
    1460:	040bb400 	streq	fp, [fp], #-1024	; 0xfffffc00
    1464:	0000058d 	andeq	r0, r0, sp, lsl #11
    1468:	0cdef602 	ldcleq	6, cr15, [lr], {2}
    146c:	0bb80000 	bleq	fee01474 <__bss_end__+0x3edf7008>
    1470:	00071204 	andeq	r1, r7, r4, lsl #4
    1474:	def70200 	cdple	2, 15, cr0, cr7, cr0, {0}
    1478:	bc00000c 	stclt	0, cr0, [r0], {12}
    147c:	079d040b 	ldreq	r0, [sp, fp, lsl #8]
    1480:	f8020000 			; <UNDEFINED> instruction: 0xf8020000
    1484:	00000dda 	ldrdeq	r0, [r0], -sl
    1488:	a3040bc0 	movwge	r0, #19392	; 0x4bc0
    148c:	02000007 	andeq	r0, r0, #7
    1490:	000cdef9 	strdeq	sp, [ip], -r9
    1494:	040c0000 	streq	r0, [ip], #-0
    1498:	000004ba 			; <UNDEFINED> instruction: 0x000004ba
    149c:	0dc5fa02 	vstreq	s31, [r5, #8]
    14a0:	0c040000 	stceq	0, cr0, [r4], {-0}
    14a4:	000cc804 	andeq	ip, ip, r4, lsl #16
    14a8:	defb0200 	cdple	2, 15, cr0, cr11, cr0, {0}
    14ac:	1400000c 	strne	r0, [r0], #-12
    14b0:	0e72040c 	cdpeq	4, 7, cr0, cr2, cr12, {0}
    14b4:	fc020000 	stc2	0, cr0, [r2], {-0}
    14b8:	00000cde 	ldrdeq	r0, [r0], -lr
    14bc:	ef040c18 	svc	0x00040c18
    14c0:	02000002 	andeq	r0, r0, #2
    14c4:	000e19fd 	strdeq	r1, [lr], -sp
    14c8:	040c1c00 	streq	r1, [ip], #-3072	; 0xfffff400
    14cc:	00000aa8 	andeq	r0, r0, r8, lsr #21
    14d0:	0cdefe02 	ldcleq	14, cr15, [lr], {2}
    14d4:	0ff40000 	svceq	0x00f40000
    14d8:	52444905 	subpl	r4, r4, #81920	; 0x14000
    14dc:	deff0200 	cdple	2, 15, cr0, cr15, cr0, {0}
    14e0:	f800000c 			; <UNDEFINED> instruction: 0xf800000c
    14e4:	07af060f 	streq	r0, [pc, pc, lsl #12]!
    14e8:	00020000 	andeq	r0, r2, r0
    14ec:	000cde01 	andeq	sp, ip, r1, lsl #28
    14f0:	000ffc00 	andeq	pc, pc, r0, lsl #24
    14f4:	f6070407 			; <UNDEFINED> instruction: 0xf6070407
    14f8:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    14fc:	00000cd7 	ldrdeq	r0, [r0], -r7
    1500:	000cde09 	andeq	sp, ip, r9, lsl #28
    1504:	000cf300 	andeq	pc, ip, r0, lsl #6
    1508:	0cd70a00 	vldmiaeq	r7, {s1-s0}
    150c:	00010000 	andeq	r0, r1, r0
    1510:	000ce308 	andeq	lr, ip, r8, lsl #6
    1514:	0cde0900 			; <UNDEFINED> instruction: 0x0cde0900
    1518:	0d080000 	stceq	0, cr0, [r8, #-0]
    151c:	d70a0000 	strle	r0, [sl, -r0]
    1520:	0000000c 	andeq	r0, r0, ip
    1524:	0cf80800 	ldcleq	8, cr0, [r8]
    1528:	de090000 	cdple	0, 0, cr0, cr9, cr0, {0}
    152c:	1d00000c 	stcne	0, cr0, [r0, #-48]	; 0xffffffd0
    1530:	0a00000d 	beq	156c <_start-0xc0006a94>
    1534:	00000cd7 	ldrdeq	r0, [r0], -r7
    1538:	0d08000c 	stceq	0, cr0, [r8, #-48]	; 0xffffffd0
    153c:	0900000d 	stmdbeq	r0, {r0, r2, r3}
    1540:	00000cde 	ldrdeq	r0, [r0], -lr
    1544:	00000d32 	andeq	r0, r0, r2, lsr sp
    1548:	000cd70a 	andeq	sp, ip, sl, lsl #14
    154c:	08000500 	stmdaeq	r0, {r8, sl}
    1550:	00000d22 	andeq	r0, r0, r2, lsr #26
    1554:	000cde09 	andeq	sp, ip, r9, lsl #28
    1558:	000d4700 	andeq	r4, sp, r0, lsl #14
    155c:	0cd70a00 	vldmiaeq	r7, {s1-s0}
    1560:	00080000 	andeq	r0, r8, r0
    1564:	000d3708 	andeq	r3, sp, r8, lsl #14
    1568:	0cde0900 			; <UNDEFINED> instruction: 0x0cde0900
    156c:	0d5c0000 	ldcleq	0, cr0, [ip, #-0]
    1570:	d70a0000 	strle	r0, [sl, -r0]
    1574:	0900000c 	stmdbeq	r0, {r2, r3}
    1578:	0d4c0800 	stcleq	8, cr0, [ip, #-0]
    157c:	de090000 	cdple	0, 0, cr0, cr9, cr0, {0}
    1580:	7100000c 	tstvc	r0, ip
    1584:	0a00000d 	beq	15c0 <_start-0xc0006a40>
    1588:	00000cd7 	ldrdeq	r0, [r0], -r7
    158c:	6108000d 	tstvs	r8, sp
    1590:	0900000d 	stmdbeq	r0, {r0, r2, r3}
    1594:	00000cde 	ldrdeq	r0, [r0], -lr
    1598:	00000d86 	andeq	r0, r0, r6, lsl #27
    159c:	000cd70a 	andeq	sp, ip, sl, lsl #14
    15a0:	08001500 	stmdaeq	r0, {r8, sl, ip}
    15a4:	00000d76 	andeq	r0, r0, r6, ror sp
    15a8:	000cde09 	andeq	sp, ip, r9, lsl #28
    15ac:	000d9b00 	andeq	r9, sp, r0, lsl #22
    15b0:	0cd70a00 	vldmiaeq	r7, {s1-s0}
    15b4:	00170000 	andseq	r0, r7, r0
    15b8:	000d8b08 	andeq	r8, sp, r8, lsl #22
    15bc:	0cde0900 			; <UNDEFINED> instruction: 0x0cde0900
    15c0:	0db00000 	ldceq	0, cr0, [r0]
    15c4:	d70a0000 	strle	r0, [sl, -r0]
    15c8:	f600000c 			; <UNDEFINED> instruction: 0xf600000c
    15cc:	0da00800 	stceq	8, cr0, [r0]
    15d0:	de090000 	cdple	0, 0, cr0, cr9, cr0, {0}
    15d4:	c500000c 	strgt	r0, [r0, #-12]
    15d8:	0a00000d 	beq	1614 <_start-0xc00069ec>
    15dc:	00000cd7 	ldrdeq	r0, [r0], -r7
    15e0:	b5080003 	strlt	r0, [r8, #-3]
    15e4:	0900000d 	stmdbeq	r0, {r0, r2, r3}
    15e8:	00000cde 	ldrdeq	r0, [r0], -lr
    15ec:	00000dda 	ldrdeq	r0, [r0], -sl
    15f0:	000cd70a 	andeq	sp, ip, sl, lsl #14
    15f4:	08000f00 	stmdaeq	r0, {r8, r9, sl, fp}
    15f8:	00000dca 	andeq	r0, r0, sl, asr #27
    15fc:	000cde09 	andeq	sp, ip, r9, lsl #28
    1600:	000def00 	andeq	lr, sp, r0, lsl #30
    1604:	0cd70a00 	vldmiaeq	r7, {s1-s0}
    1608:	00110000 	andseq	r0, r1, r0
    160c:	000ddf08 	andeq	sp, sp, r8, lsl #30
    1610:	0cde0900 			; <UNDEFINED> instruction: 0x0cde0900
    1614:	0e040000 	cdpeq	0, 0, cr0, cr4, cr0, {0}
    1618:	d70a0000 	strle	r0, [sl, -r0]
    161c:	1300000c 	movwne	r0, #12
    1620:	0df40800 	ldcleq	8, cr0, [r4]
    1624:	de090000 	cdple	0, 0, cr0, cr9, cr0, {0}
    1628:	1900000c 	stmdbne	r0, {r2, r3}
    162c:	0a00000e 	beq	166c <_start-0xc0006994>
    1630:	00000cd7 	ldrdeq	r0, [r0], -r7
    1634:	090800f5 	stmdbeq	r8, {r0, r2, r4, r5, r6, r7}
    1638:	0b00000e 	bleq	1678 <_start-0xc0006988>
    163c:	0000067b 	andeq	r0, r0, fp, ror r6
    1640:	25010102 	strcs	r0, [r1, #-258]	; 0xfffffefe
    1644:	0c000000 	stceq	0, cr0, [r0], {-0}
    1648:	cf040334 	svcgt	0x00040334
    164c:	0300000e 	movweq	r0, #14
    1650:	00000208 	andeq	r0, r0, r8, lsl #4
    1654:	0cde0503 	cfldr64eq	mvdx0, [lr], {3}
    1658:	03000000 	movweq	r0, #0
    165c:	00000245 	andeq	r0, r0, r5, asr #4
    1660:	0cde0603 	ldcleq	6, cr0, [lr], {3}
    1664:	03040000 	movweq	r0, #16384	; 0x4000
    1668:	0000020e 	andeq	r0, r0, lr, lsl #4
    166c:	0cde0703 	ldcleq	7, cr0, [lr], {3}
    1670:	03080000 	movweq	r0, #32768	; 0x8000
    1674:	00000202 	andeq	r0, r0, r2, lsl #4
    1678:	0cde0803 	ldcleq	8, cr0, [lr], {3}
    167c:	0d0c0000 	stceq	0, cr0, [ip, #-0]
    1680:	00524449 	subseq	r4, r2, r9, asr #8
    1684:	0cde0903 			; <UNDEFINED> instruction: 0x0cde0903
    1688:	0d100000 	ldceq	0, cr0, [r0, #-0]
    168c:	0052444f 	subseq	r4, r2, pc, asr #8
    1690:	0cde0a03 	vldmiaeq	lr, {s1-s3}
    1694:	03140000 	tsteq	r4, #0
    1698:	000001fd 	strdeq	r0, [r0], -sp
    169c:	0cde0b03 	fldmiaxeq	lr, {d16}	;@ Deprecated
    16a0:	03180000 	tsteq	r8, #0
    16a4:	00000239 	andeq	r0, r0, r9, lsr r2
    16a8:	0cde0c03 	ldcleq	12, cr0, [lr], {3}
    16ac:	031c0000 	tsteq	ip, #0
    16b0:	0000024c 	andeq	r0, r0, ip, asr #4
    16b4:	0cde0d03 	ldcleq	13, cr0, [lr], {3}
    16b8:	03200000 	nopeq	{0}	; <UNPREDICTABLE>
    16bc:	0000025d 	andeq	r0, r0, sp, asr r2
    16c0:	0cde0e03 	ldcleq	14, cr0, [lr], {3}
    16c4:	0d240000 	stceq	0, cr0, [r4, #-0]
    16c8:	00525242 	subseq	r5, r2, r2, asr #4
    16cc:	0cde0f03 	ldcleq	15, cr0, [lr], {3}
    16d0:	0d280000 	stceq	0, cr0, [r8, #-0]
    16d4:	00736572 	rsbseq	r6, r3, r2, ror r5
    16d8:	0cde1003 	ldcleq	0, cr1, [lr], {3}
    16dc:	032c0000 			; <UNDEFINED> instruction: 0x032c0000
    16e0:	000001df 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    16e4:	0cde1103 	ldfeqe	f1, [lr], {3}
    16e8:	00300000 	eorseq	r0, r0, r0
    16ec:	0002320e 	andeq	r3, r2, lr, lsl #4
    16f0:	2a130300 	bcs	4c22f8 <_start-0xbfb45d08>
    16f4:	0c00000e 	stceq	0, cr0, [r0], {14}
    16f8:	0223046c 	eoreq	r0, r3, #108, 8	; 0x6c000000
    16fc:	0d000010 	stceq	0, cr0, [r0, #-64]	; 0xffffffc0
    1700:	00315243 	eorseq	r5, r1, r3, asr #4
    1704:	0cde2404 	cfldrdeq	mvd2, [lr], {4}
    1708:	0d000000 	stceq	0, cr0, [r0, #-0]
    170c:	00325243 	eorseq	r5, r2, r3, asr #4
    1710:	0cde2504 	cfldr64eq	mvdx2, [lr], {4}
    1714:	03040000 	movweq	r0, #16384	; 0x4000
    1718:	00000723 	andeq	r0, r0, r3, lsr #14
    171c:	0cde2604 	ldcleq	6, cr2, [lr], {4}
    1720:	03080000 	movweq	r0, #32768	; 0x8000
    1724:	000002f5 	strdeq	r0, [r0], -r5
    1728:	0cde2704 	ldcleq	7, cr2, [lr], {4}
    172c:	0d0c0000 	stceq	0, cr0, [ip, #-0]
    1730:	04005253 	streq	r5, [r0], #-595	; 0xfffffdad
    1734:	000cde28 	andeq	sp, ip, r8, lsr #28
    1738:	450d1000 	strmi	r1, [sp, #-0]
    173c:	04005247 	streq	r5, [r0], #-583	; 0xfffffdb9
    1740:	000cde29 	andeq	sp, ip, r9, lsr #28
    1744:	7a031400 	bvc	c674c <_start-0xbff418b4>
    1748:	0400000e 	streq	r0, [r0], #-14
    174c:	000cde2a 	andeq	sp, ip, sl, lsr #28
    1750:	2d031800 	stccs	8, cr1, [r3, #-0]
    1754:	04000004 	streq	r0, [r0], #-4
    1758:	000cde2b 	andeq	sp, ip, fp, lsr #28
    175c:	28031c00 	stmdacs	r3, {sl, fp, ip}
    1760:	04000005 	streq	r0, [r0], #-5
    1764:	000cde2c 	andeq	sp, ip, ip, lsr #28
    1768:	430d2000 	movwmi	r2, #53248	; 0xd000
    176c:	0400544e 	streq	r5, [r0], #-1102	; 0xfffffbb2
    1770:	000cde2d 	andeq	sp, ip, sp, lsr #28
    1774:	500d2400 	andpl	r2, sp, r0, lsl #8
    1778:	04004353 	streq	r4, [r0], #-851	; 0xfffffcad
    177c:	000cde2e 	andeq	sp, ip, lr, lsr #28
    1780:	410d2800 	tstmi	sp, r0, lsl #16
    1784:	04005252 	streq	r5, [r0], #-594	; 0xfffffdae
    1788:	000cde2f 	andeq	sp, ip, pc, lsr #28
    178c:	80032c00 	andhi	r2, r3, r0, lsl #24
    1790:	0400000e 	streq	r0, [r0], #-14
    1794:	000d0830 	andeq	r0, sp, r0, lsr r8
    1798:	30033000 	andcc	r3, r3, r0
    179c:	04000006 	streq	r0, [r0], #-6
    17a0:	000cde31 	andeq	sp, ip, r1, lsr lr
    17a4:	81033400 	tsthi	r3, r0, lsl #8
    17a8:	04000003 	streq	r0, [r0], #-3
    17ac:	000cde32 	andeq	sp, ip, r2, lsr lr
    17b0:	86033800 	strhi	r3, [r3], -r0, lsl #16
    17b4:	04000003 	streq	r0, [r0], #-3
    17b8:	000cde33 	andeq	sp, ip, r3, lsr lr
    17bc:	40033c00 	andmi	r3, r3, r0, lsl #24
    17c0:	0400000d 	streq	r0, [r0], #-13
    17c4:	000cde34 	andeq	sp, ip, r4, lsr lr
    17c8:	d6034000 	strle	r4, [r3], -r0
    17cc:	04000006 	streq	r0, [r0], #-6
    17d0:	000d0835 	andeq	r0, sp, r5, lsr r8
    17d4:	440d4400 	strmi	r4, [sp], #-1024	; 0xfffffc00
    17d8:	04005243 	streq	r5, [r0], #-579	; 0xfffffdbd
    17dc:	000cde36 	andeq	sp, ip, r6, lsr lr
    17e0:	0c034800 	stceq	8, cr4, [r3], {-0}
    17e4:	0400000c 	streq	r0, [r0], #-12
    17e8:	000cde37 	andeq	sp, ip, r7, lsr lr
    17ec:	db034c00 	blle	d47f4 <_start-0xbff3380c>
    17f0:	04000006 	streq	r0, [r0], #-6
    17f4:	000dc538 	andeq	ip, sp, r8, lsr r5
    17f8:	410d5000 	mrsmi	r5, (UNDEF: 13)
    17fc:	04003146 	streq	r3, [r0], #-326	; 0xfffffeba
    1800:	000cde39 	andeq	sp, ip, r9, lsr lr
    1804:	94036000 	strls	r6, [r3], #-0
    1808:	0400000e 	streq	r0, [r0], #-14
    180c:	000d083a 	andeq	r0, sp, sl, lsr r8
    1810:	8b036400 	blhi	da818 <_start-0xbff2d7e8>
    1814:	04000007 	streq	r0, [r0], #-7
    1818:	000cde3b 	andeq	sp, ip, fp, lsr lr
    181c:	0e006800 	cdpeq	8, 0, cr6, cr0, cr0, {0}
    1820:	00000298 	muleq	r0, r8, r2
    1824:	0eda3c04 	cdpeq	12, 13, cr3, cr10, cr4, {0}
    1828:	a50f0000 	strge	r0, [pc, #-0]	; 1830 <_start-0xc00067d0>
    182c:	0100000c 	tsteq	r0, ip
    1830:	009a5081 	addseq	r5, sl, r1, lsl #1
    1834:	0000b0c0 	andeq	fp, r0, r0, asr #1
    1838:	0f9c0100 	svceq	0x009c0100
    183c:	000003b9 			; <UNDEFINED> instruction: 0x000003b9
    1840:	99a06f01 	stmibls	r0!, {r0, r8, r9, sl, fp, sp, lr}
    1844:	00b0c000 	adcseq	ip, r0, r0
    1848:	9c010000 	stcls	0, cr0, [r1], {-0}
    184c:	0003a60f 	andeq	sl, r3, pc, lsl #12
    1850:	08330100 	ldmdaeq	r3!, {r8}
    1854:	98c00097 	stmials	r0, {r0, r1, r2, r4, r7}^
    1858:	01000002 	tsteq	r0, r2
    185c:	0045009c 	umaaleq	r0, r5, ip, r0
    1860:	00040000 	andeq	r0, r4, r0
    1864:	000003e5 	andeq	r0, r0, r5, ror #7
    1868:	00570104 	subseq	r0, r7, r4, lsl #2
    186c:	a70c0000 	strge	r0, [ip, -r0]
    1870:	8a00000e 	bhi	18b0 <_start-0xc0006750>
    1874:	00000001 	andeq	r0, r0, r1
    1878:	10c0009b 	smullne	r0, r0, fp, r0	; <UNPREDICTABLE>
    187c:	36000000 	strcc	r0, [r0], -r0
    1880:	02000005 	andeq	r0, r0, #5
    1884:	00f60704 	rscseq	r0, r6, r4, lsl #14
    1888:	ae030000 	cdpge	0, 0, cr0, cr3, cr0, {0}
    188c:	0100000e 	tsteq	r0, lr
    1890:	00004105 	andeq	r4, r0, r5, lsl #2
    1894:	009b0000 	addseq	r0, fp, r0
    1898:	000010c0 	andeq	r1, r0, r0, asr #1
    189c:	049c0100 	ldreq	r0, [ip], #256	; 0x100
    18a0:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    18a4:	地址 0x000018a4 越界。


Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	10001101 	andne	r1, r0, r1, lsl #2
   4:	12011106 	andne	r1, r1, #-2147483647	; 0x80000001
   8:	1b080301 	blne	200c14 <_start-0xbfe073ec>
   c:	13082508 	movwne	r2, #34056	; 0x8508
  10:	00000005 	andeq	r0, r0, r5
  14:	10001101 	andne	r1, r0, r1, lsl #2
  18:	12011106 	andne	r1, r1, #-2147483647	; 0x80000001
  1c:	1b080301 	blne	200c28 <_start-0xbfe073d8>
  20:	13082508 	movwne	r2, #34056	; 0x8508
  24:	00000005 	andeq	r0, r0, r5
  28:	10001101 	andne	r1, r0, r1, lsl #2
  2c:	12011106 	andne	r1, r1, #-2147483647	; 0x80000001
  30:	1b080301 	blne	200c3c <_start-0xbfe073c4>
  34:	13082508 	movwne	r2, #34056	; 0x8508
  38:	00000005 	andeq	r0, r0, r5
  3c:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
  40:	030b130e 	movweq	r1, #45838	; 0xb30e
  44:	110e1b0e 	tstne	lr, lr, lsl #22
  48:	10061201 	andne	r1, r6, r1, lsl #4
  4c:	02000017 	andeq	r0, r0, #23
  50:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
  54:	0b3b0b3a 	bleq	ec2d44 <_start-0xbf1452bc>
  58:	00001349 	andeq	r1, r0, r9, asr #6
  5c:	0b000f03 	bleq	3c70 <_start-0xc0004390>
  60:	000e030b 	andeq	r0, lr, fp, lsl #6
  64:	01010400 	tsteq	r1, r0, lsl #8
  68:	13011349 	movwne	r1, #4937	; 0x1349
  6c:	21050000 	mrscs	r0, (UNDEF: 5)
  70:	2f134900 	svccs	0x00134900
  74:	0600000b 	streq	r0, [r0], -fp
  78:	0b0b0024 	bleq	2c0110 <_start-0xbfd47ef0>
  7c:	0e030b3e 	vmoveq.16	d3[0], r0
  80:	34070000 	strcc	r0, [r7], #-0
  84:	3a0e0300 	bcc	380c8c <_start-0xbfc87374>
  88:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
  8c:	02193f13 	andseq	r3, r9, #19, 30	; 0x4c
  90:	08000018 	stmdaeq	r0, {r3, r4}
  94:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
  98:	0b3a0e03 	bleq	e838ac <_start-0xbf184754>
  9c:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
  a0:	06120111 			; <UNDEFINED> instruction: 0x06120111
  a4:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
  a8:	00130119 	andseq	r0, r3, r9, lsl r1
  ac:	00050900 	andeq	r0, r5, r0, lsl #18
  b0:	0b3a0803 	bleq	e820c4 <_start-0xbf185f3c>
  b4:	1349053b 	movtne	r0, #38203	; 0x953b
  b8:	00001802 	andeq	r1, r0, r2, lsl #16
  bc:	0000180a 	andeq	r1, r0, sl, lsl #16
  c0:	00340b00 	eorseq	r0, r4, r0, lsl #22
  c4:	0b3a0e03 	bleq	e838d8 <_start-0xbf184728>
  c8:	1349053b 	movtne	r0, #38203	; 0x953b
  cc:	00001802 	andeq	r1, r0, r2, lsl #16
  d0:	0b000f0c 	bleq	3d08 <_start-0xc00042f8>
  d4:	0013490b 	andseq	r4, r3, fp, lsl #18
  d8:	00260d00 	eoreq	r0, r6, r0, lsl #26
  dc:	00001349 	andeq	r1, r0, r9, asr #6
  e0:	3f012e0e 	svccc	0x00012e0e
  e4:	3a0e0319 	bcc	380d50 <_start-0xbfc872b0>
  e8:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
  ec:	11134919 	tstne	r3, r9, lsl r9
  f0:	40061201 	andmi	r1, r6, r1, lsl #4
  f4:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
  f8:	00001301 	andeq	r1, r0, r1, lsl #6
  fc:	0300340f 	movweq	r3, #1039	; 0x40f
 100:	3b0b3a08 	blcc	2ce928 <_start-0xbfd396d8>
 104:	02134905 	andseq	r4, r3, #81920	; 0x14000
 108:	10000018 	andne	r0, r0, r8, lsl r0
 10c:	0b0b0024 	bleq	2c01a4 <_start-0xbfd47e5c>
 110:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
 114:	2e110000 	cdpcs	0, 1, cr0, cr1, cr0, {0}
 118:	03193f01 	tsteq	r9, #1, 30
 11c:	3b0b3a0e 	blcc	2ce95c <_start-0xbfd396a4>
 120:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
 124:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
 128:	96184006 	ldrls	r4, [r8], -r6
 12c:	13011942 	movwne	r1, #6466	; 0x1942
 130:	05120000 	ldreq	r0, [r2, #-0]
 134:	3a080300 	bcc	200d3c <_start-0xbfe072c4>
 138:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 13c:	00180213 	andseq	r0, r8, r3, lsl r2
 140:	00051300 	andeq	r1, r5, r0, lsl #6
 144:	0b3a0e03 	bleq	e83958 <_start-0xbf1846a8>
 148:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 14c:	00001802 	andeq	r1, r0, r2, lsl #16
 150:	03003414 	movweq	r3, #1044	; 0x414
 154:	3b0b3a08 	blcc	2ce97c <_start-0xbfd39684>
 158:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
 15c:	15000018 	strne	r0, [r0, #-24]	; 0xffffffe8
 160:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
 164:	0b3b0b3a 	bleq	ec2e54 <_start-0xbf1451ac>
 168:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
 16c:	0a160000 	beq	580174 <_start-0xbfa87e8c>
 170:	3a0e0300 	bcc	380d78 <_start-0xbfc87288>
 174:	110b3b0b 	tstne	fp, fp, lsl #22
 178:	17000001 	strne	r0, [r0, -r1]
 17c:	0111010b 	tsteq	r1, fp, lsl #2
 180:	13010612 	movwne	r0, #5650	; 0x1612
 184:	0b180000 	bleq	60018c <_start-0xbfa07e74>
 188:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
 18c:	19000006 	stmdbne	r0, {r1, r2}
 190:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 194:	0b3a0e03 	bleq	e839a8 <_start-0xbf184658>
 198:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 19c:	01111349 	tsteq	r1, r9, asr #6
 1a0:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 1a4:	01194297 			; <UNDEFINED> instruction: 0x01194297
 1a8:	1a000013 	bne	1fc <_start-0xc0007e04>
 1ac:	0e03012e 	adfeqsp	f0, f3, #0.5
 1b0:	0b3b0b3a 	bleq	ec2ea0 <_start-0xbf145160>
 1b4:	13491927 	movtne	r1, #39207	; 0x9927
 1b8:	06120111 			; <UNDEFINED> instruction: 0x06120111
 1bc:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 1c0:	00130119 	andseq	r0, r3, r9, lsl r1
 1c4:	012e1b00 			; <UNDEFINED> instruction: 0x012e1b00
 1c8:	0b3a0e03 	bleq	e839dc <_start-0xbf184624>
 1cc:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 1d0:	01111349 	tsteq	r1, r9, asr #6
 1d4:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
 1d8:	01194297 			; <UNDEFINED> instruction: 0x01194297
 1dc:	1c000013 	stcne	0, cr0, [r0], {19}
 1e0:	0e03012e 	adfeqsp	f0, f3, #0.5
 1e4:	0b3b0b3a 	bleq	ec2ed4 <_start-0xbf14512c>
 1e8:	13491927 	movtne	r1, #39207	; 0x9927
 1ec:	06120111 			; <UNDEFINED> instruction: 0x06120111
 1f0:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 1f4:	00000019 	andeq	r0, r0, r9, lsl r0
 1f8:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
 1fc:	030b130e 	movweq	r1, #45838	; 0xb30e
 200:	110e1b0e 	tstne	lr, lr, lsl #22
 204:	10061201 	andne	r1, r6, r1, lsl #4
 208:	02000017 	andeq	r0, r0, #23
 20c:	0b0b0113 	bleq	2c0660 <_start-0xbfd479a0>
 210:	0b3b0b3a 	bleq	ec2f00 <_start-0xbf145100>
 214:	00001301 	andeq	r1, r0, r1, lsl #6
 218:	03000d03 	movweq	r0, #3331	; 0xd03
 21c:	3b0b3a0e 	blcc	2cea5c <_start-0xbfd395a4>
 220:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 224:	0400000b 	streq	r0, [r0], #-11
 228:	0803000d 	stmdaeq	r3, {r0, r2, r3}
 22c:	0b3b0b3a 	bleq	ec2f1c <_start-0xbf1450e4>
 230:	0b381349 	bleq	e04f5c <_start-0xbf2030a4>
 234:	24050000 	strcs	r0, [r5], #-0
 238:	3e0b0b00 	vmlacc.f64	d0, d11, d0
 23c:	000e030b 	andeq	r0, lr, fp, lsl #6
 240:	00350600 	eorseq	r0, r5, r0, lsl #12
 244:	00001349 	andeq	r1, r0, r9, asr #6
 248:	03001607 	movweq	r1, #1543	; 0x607
 24c:	3b0b3a0e 	blcc	2cea8c <_start-0xbfd39574>
 250:	0013490b 	andseq	r4, r3, fp, lsl #18
 254:	012e0800 			; <UNDEFINED> instruction: 0x012e0800
 258:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 25c:	0b3b0b3a 	bleq	ec2f4c <_start-0xbf1450b4>
 260:	13491927 	movtne	r1, #39207	; 0x9927
 264:	06120111 			; <UNDEFINED> instruction: 0x06120111
 268:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 26c:	00130119 	andseq	r0, r3, r9, lsl r1
 270:	00340900 	eorseq	r0, r4, r0, lsl #18
 274:	0b3a0803 	bleq	e82288 <_start-0xbf185d78>
 278:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 27c:	00001802 	andeq	r1, r0, r2, lsl #16
 280:	4900260a 	stmdbmi	r0, {r1, r3, r9, sl, sp}
 284:	0b000013 	bleq	2d8 <_start-0xc0007d28>
 288:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
 28c:	0b3a0e03 	bleq	e83aa0 <_start-0xbf184560>
 290:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 294:	06120111 			; <UNDEFINED> instruction: 0x06120111
 298:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 29c:	00130119 	andseq	r0, r3, r9, lsl r1
 2a0:	00050c00 	andeq	r0, r5, r0, lsl #24
 2a4:	0b3a0e03 	bleq	e83ab8 <_start-0xbf184548>
 2a8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 2ac:	00001802 	andeq	r1, r0, r2, lsl #16
 2b0:	0b000f0d 	bleq	3eec <_start-0xc0004114>
 2b4:	0013490b 	andseq	r4, r3, fp, lsl #18
 2b8:	002e0e00 	eoreq	r0, lr, r0, lsl #28
 2bc:	0e03193f 			; <UNDEFINED> instruction: 0x0e03193f
 2c0:	0b3b0b3a 	bleq	ec2fb0 <_start-0xbf145050>
 2c4:	06120111 			; <UNDEFINED> instruction: 0x06120111
 2c8:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 2cc:	00000019 	andeq	r0, r0, r9, lsl r0
 2d0:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
 2d4:	030b130e 	movweq	r1, #45838	; 0xb30e
 2d8:	110e1b0e 	tstne	lr, lr, lsl #22
 2dc:	10061201 	andne	r1, r6, r1, lsl #4
 2e0:	02000017 	andeq	r0, r0, #23
 2e4:	08030034 	stmdaeq	r3, {r2, r4, r5}
 2e8:	0b3b0b3a 	bleq	ec2fd8 <_start-0xbf145028>
 2ec:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
 2f0:	00001802 	andeq	r1, r0, r2, lsl #16
 2f4:	0b002403 	bleq	9308 <_start-0xbfffecf8>
 2f8:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 2fc:	0400000e 	streq	r0, [r0], #-14
 300:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 304:	0b3a0e03 	bleq	e83b18 <_start-0xbf1844e8>
 308:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
 30c:	06120111 			; <UNDEFINED> instruction: 0x06120111
 310:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
 314:	00000019 	andeq	r0, r0, r9, lsl r0
 318:	25011101 	strcs	r1, [r1, #-257]	; 0xfffffeff
 31c:	030b130e 	movweq	r1, #45838	; 0xb30e
 320:	110e1b0e 	tstne	lr, lr, lsl #22
 324:	10061201 	andne	r1, r6, r1, lsl #4
 328:	02000017 	andeq	r0, r0, #23
 32c:	050b0113 	streq	r0, [fp, #-275]	; 0xfffffeed
 330:	0b3b0b3a 	bleq	ec3020 <_start-0xbf144fe0>
 334:	00001301 	andeq	r1, r0, r1, lsl #6
 338:	03000d03 	movweq	r0, #3331	; 0xd03
 33c:	3b0b3a0e 	blcc	2ceb7c <_start-0xbfd39484>
 340:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
 344:	0400000b 	streq	r0, [r0], #-11
 348:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
 34c:	0b3b0b3a 	bleq	ec303c <_start-0xbf144fc4>
 350:	05381349 	ldreq	r1, [r8, #-841]!	; 0xfffffcb7
 354:	0d050000 	stceq	0, cr0, [r5, #-0]
 358:	3a080300 	bcc	200f60 <_start-0xbfe070a0>
 35c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 360:	00053813 	andeq	r3, r5, r3, lsl r8
 364:	000d0600 	andeq	r0, sp, r0, lsl #12
 368:	0b3a0e03 	bleq	e83b7c <_start-0xbf184484>
 36c:	1349053b 	movtne	r0, #38203	; 0x953b
 370:	00000538 	andeq	r0, r0, r8, lsr r5
 374:	0b002407 	bleq	9398 <_start-0xbfffec68>
 378:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 37c:	0800000e 	stmdaeq	r0, {r1, r2, r3}
 380:	13490035 	movtne	r0, #36917	; 0x9035
 384:	01090000 	mrseq	r0, (UNDEF: 9)
 388:	01134901 	tsteq	r3, r1, lsl #18
 38c:	0a000013 	beq	3e0 <_start-0xc0007c20>
 390:	13490021 	movtne	r0, #36897	; 0x9021
 394:	00000b2f 	andeq	r0, r0, pc, lsr #22
 398:	0300160b 	movweq	r1, #1547	; 0x60b
 39c:	3b0b3a0e 	blcc	2cebdc <_start-0xbfd39424>
 3a0:	00134905 	andseq	r4, r3, r5, lsl #18
 3a4:	01130c00 	tsteq	r3, r0, lsl #24
 3a8:	0b3a0b0b 	bleq	e82fdc <_start-0xbf185024>
 3ac:	13010b3b 	movwne	r0, #6971	; 0x1b3b
 3b0:	0d0d0000 	stceq	0, cr0, [sp, #-0]
 3b4:	3a080300 	bcc	200fbc <_start-0xbfe07044>
 3b8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
 3bc:	000b3813 	andeq	r3, fp, r3, lsl r8
 3c0:	00160e00 	andseq	r0, r6, r0, lsl #28
 3c4:	0b3a0e03 	bleq	e83bd8 <_start-0xbf184428>
 3c8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 3cc:	2e0f0000 	cdpcs	0, 0, cr0, cr15, cr0, {0}
 3d0:	03193f00 	tsteq	r9, #0, 30
 3d4:	3b0b3a0e 	blcc	2cec14 <_start-0xbfd393ec>
 3d8:	1201110b 	andne	r1, r1, #-1073741822	; 0xc0000002
 3dc:	97184006 	ldrls	r4, [r8, -r6]
 3e0:	00001942 	andeq	r1, r0, r2, asr #18
 3e4:	01110100 	tsteq	r1, r0, lsl #2
 3e8:	0b130e25 	bleq	4c3c84 <_start-0xbfb4437c>
 3ec:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
 3f0:	06120111 			; <UNDEFINED> instruction: 0x06120111
 3f4:	00001710 	andeq	r1, r0, r0, lsl r7
 3f8:	0b002402 	bleq	9408 <_start-0xbfffebf8>
 3fc:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
 400:	0300000e 	movweq	r0, #14
 404:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
 408:	0b3a0e03 	bleq	e83c1c <_start-0xbf1843e4>
 40c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
 410:	06120111 			; <UNDEFINED> instruction: 0x06120111
 414:	42961840 	addsmi	r1, r6, #64, 16	; 0x400000
 418:	04000019 	streq	r0, [r0], #-25	; 0xffffffe7
 41c:	0b0b0024 	bleq	2c04b4 <_start-0xbfd47b4c>
 420:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
 424:	地址 0x00000424 越界。


Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	0000001c 	andeq	r0, r0, ip, lsl r0
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  10:	c0008000 	andgt	r8, r0, r0
  14:	00000218 	andeq	r0, r0, r8, lsl r2
	...
  20:	0000001c 	andeq	r0, r0, ip, lsl r0
  24:	00620002 	rsbeq	r0, r2, r2
  28:	00040000 	andeq	r0, r4, r0
  2c:	00000000 	andeq	r0, r0, r0
  30:	c0008218 	andgt	r8, r0, r8, lsl r2
  34:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
	...
  40:	0000001c 	andeq	r0, r0, ip, lsl r0
  44:	00cc0002 	sbceq	r0, ip, r2
  48:	00040000 	andeq	r0, r4, r0
  4c:	00000000 	andeq	r0, r0, r0
  50:	c00082c8 	andgt	r8, r0, r8, asr #5
  54:	00000094 	muleq	r0, r4, r0
	...
  60:	0000001c 	andeq	r0, r0, ip, lsl r0
  64:	01360002 	teqeq	r6, r2
  68:	00040000 	andeq	r0, r4, r0
  6c:	00000000 	andeq	r0, r0, r0
  70:	c000835c 	andgt	r8, r0, ip, asr r3
  74:	000010b8 	strheq	r1, [r0], -r8
	...
  80:	0000001c 	andeq	r0, r0, ip, lsl r0
  84:	05b80002 	ldreq	r0, [r8, #2]!
  88:	00040000 	andeq	r0, r4, r0
  8c:	00000000 	andeq	r0, r0, r0
  90:	c0009414 	andgt	r9, r0, r4, lsl r4
  94:	000002dc 	ldrdeq	r0, [r0], -ip
	...
  a0:	0000001c 	andeq	r0, r0, ip, lsl r0
  a4:	07d00002 	ldrbeq	r0, [r0, r2]
  a8:	00040000 	andeq	r0, r4, r0
  ac:	00000000 	andeq	r0, r0, r0
  b0:	c00096f0 	strdgt	r9, [r0], -r0
  b4:	00000018 	andeq	r0, r0, r8, lsl r0
	...
  c0:	0000001c 	andeq	r0, r0, ip, lsl r0
  c4:	081d0002 	ldmdaeq	sp, {r1}
  c8:	00040000 	andeq	r0, r4, r0
  cc:	00000000 	andeq	r0, r0, r0
  d0:	c0009708 	andgt	r9, r0, r8, lsl #14
  d4:	000003f8 	strdeq	r0, [r0], -r8
	...
  e0:	0000001c 	andeq	r0, r0, ip, lsl r0
  e4:	185e0002 	ldmdane	lr, {r1}^
  e8:	00040000 	andeq	r0, r4, r0
  ec:	00000000 	andeq	r0, r0, r0
  f0:	c0009b00 	andgt	r9, r0, r0, lsl #22
  f4:	00000010 	andeq	r0, r0, r0, lsl r0
	...

Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	69676964 	stmdbvs	r7!, {r2, r5, r6, r8, fp, sp, lr}^
   4:	5f007374 	svcpl	0x00007374
   8:	6975625f 	ldmdbvs	r5!, {r0, r1, r2, r3, r4, r6, r9, sp, lr}^
   c:	6e69746c 	cdpvs	4, 6, cr7, cr9, cr12, {3}
  10:	5f61765f 	svcpl	0x0061765f
  14:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0xfffff694
  18:	696b7300 	stmdbvs	fp!, {r8, r9, ip, sp, lr}^
  1c:	74615f70 	strbtvc	r5, [r1], #-3952	; 0xfffff090
  20:	6100696f 	tstvs	r0, pc, ror #18
  24:	00736772 	rsbseq	r6, r3, r2, ror r7
  28:	756c6176 	strbvc	r6, [ip, #-374]!	; 0xfffffe8a
  2c:	6f630065 	svcvs	0x00630065
  30:	00746e75 	rsbseq	r6, r4, r5, ror lr
  34:	6f745f5f 	svcvs	0x00745f5f
  38:	65707075 	ldrbvs	r7, [r0, #-117]!	; 0xffffff8b
  3c:	5f5f0072 	svcpl	0x005f0072
  40:	63756e67 	cmnvs	r5, #1648	; 0x670
  44:	5f61765f 	svcpl	0x0061765f
  48:	7473696c 	ldrbtvc	r6, [r3], #-2412	; 0xfffff694
  4c:	65727000 	ldrbvs	r7, [r2, #-0]!
  50:	69736963 	ldmdbvs	r3!, {r0, r1, r5, r6, r8, fp, sp, lr}^
  54:	47006e6f 	strmi	r6, [r0, -pc, ror #28]
  58:	4320554e 			; <UNDEFINED> instruction: 0x4320554e
  5c:	37203131 			; <UNDEFINED> instruction: 0x37203131
  60:	302e352e 	eorcc	r3, lr, lr, lsr #10
  64:	616d2d20 	cmnvs	sp, r0, lsr #26
  68:	2d206d72 	stccs	13, cr6, [r0, #-456]!	; 0xfffffe38
  6c:	6962616d 	stmdbvs	r2!, {r0, r2, r3, r5, r6, r8, sp, lr}^
  70:	6370613d 	cmnvs	r0, #1073741839	; 0x4000000f
  74:	6e672d73 	mcrvs	13, 3, r2, cr7, cr3, {3}
  78:	6d2d2075 	stcvs	0, cr2, [sp, #-468]!	; 0xfffffe2c
  7c:	3d757066 	ldclcc	0, cr7, [r5, #-408]!	; 0xfffffe68
  80:	6e6f656e 	cdpvs	5, 6, cr6, cr15, cr14, {3}
  84:	666d2d20 	strbtvs	r2, [sp], -r0, lsr #26
  88:	74616f6c 	strbtvc	r6, [r1], #-3948	; 0xfffff094
  8c:	6962612d 	stmdbvs	r2!, {r0, r2, r3, r5, r8, sp, lr}^
  90:	666f733d 			; <UNDEFINED> instruction: 0x666f733d
  94:	20706674 	rsbscs	r6, r0, r4, ror r6
  98:	72616d2d 	rsbvc	r6, r1, #2880	; 0xb40
  9c:	613d6863 	teqvs	sp, r3, ror #16
  a0:	37766d72 			; <UNDEFINED> instruction: 0x37766d72
  a4:	2d20612d 	stfcss	f6, [r0, #-180]!	; 0xffffff4c
  a8:	6e75746d 	cdpvs	4, 7, cr7, cr5, cr13, {3}
  ac:	6f633d65 	svcvs	0x00633d65
  b0:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
  b4:	2039612d 	eorscs	r6, r9, sp, lsr #2
  b8:	6c746d2d 	ldclvs	13, cr6, [r4], #-180	; 0xffffff4c
  bc:	69642d73 	stmdbvs	r4!, {r0, r1, r4, r5, r6, r8, sl, fp, sp}^
  c0:	63656c61 	cmnvs	r5, #24832	; 0x6100
  c4:	6e673d74 	mcrvs	13, 3, r3, cr7, cr4, {3}
  c8:	672d2075 			; <UNDEFINED> instruction: 0x672d2075
  cc:	304f2d20 	subcc	r2, pc, r0, lsr #26
  d0:	6e662d20 	cdpvs	13, 6, cr2, cr6, cr0, {1}
  d4:	75622d6f 	strbvc	r2, [r2, #-3439]!	; 0xfffff291
  d8:	69746c69 	ldmdbvs	r4!, {r0, r3, r5, r6, sl, fp, sp, lr}^
  dc:	6162006e 	cmnvs	r2, lr, rrx
  e0:	75006573 	strvc	r6, [r0, #-1395]	; 0xfffffa8d
  e4:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
  e8:	2064656e 	rsbcs	r6, r4, lr, ror #10
  ec:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
  f0:	6e6f6c00 	cdpvs	12, 6, cr6, cr15, cr0, {0}
  f4:	6e752067 	cdpvs	0, 7, cr2, cr5, cr7, {3}
  f8:	6e676973 			; <UNDEFINED> instruction: 0x6e676973
  fc:	69206465 	stmdbvs	r0!, {r0, r2, r5, r6, sl, sp, lr}
 100:	6500746e 	strvs	r7, [r0, #-1134]	; 0xfffffb92
 104:	0070646e 	rsbseq	r6, r0, lr, ror #8
 108:	706d6973 	rsbvc	r6, sp, r3, ror r9
 10c:	735f656c 	cmpvc	pc, #108, 10	; 0x1b000000
 110:	6f747274 	svcvs	0x00747274
 114:	6f63006c 	svcvs	0x0063006c
 118:	6e6f6d6d 	cdpvs	13, 6, cr6, cr15, cr13, {3}
 11c:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
 120:	6972702f 	ldmdbvs	r2!, {r0, r1, r2, r3, r5, ip, sp, lr}^
 124:	2e66746e 	cdpcs	4, 6, cr7, cr6, cr14, {3}
 128:	6c660063 	stclvs	0, cr0, [r6], #-396	; 0xfffffe74
 12c:	00736761 	rsbseq	r6, r3, r1, ror #14
 130:	657a6973 	ldrbvs	r6, [sl, #-2419]!	; 0xfffff68d
 134:	61757100 	cmnvs	r5, r0, lsl #2
 138:	6966696c 	stmdbvs	r6!, {r2, r3, r5, r6, r8, fp, sp, lr}^
 13c:	73007265 	movwvc	r7, #613	; 0x265
 140:	6c706d69 	ldclvs	13, cr6, [r0], #-420	; 0xfffffe5c
 144:	74735f65 	ldrbtvc	r5, [r3], #-3941	; 0xfffff09b
 148:	756f7472 	strbvc	r7, [pc, #-1138]!	; fffffcde <__bss_end__+0x3fff5872>
 14c:	6572006c 	ldrbvs	r0, [r2, #-108]!	; 0xffffff94
 150:	746c7573 	strbtvc	r7, [ip], #-1395	; 0xfffffa8d
 154:	70657200 	rsbvc	r7, r5, r0, lsl #4
 158:	00746165 	rsbseq	r6, r4, r5, ror #2
 15c:	6e727473 	mrcvs	4, 3, r7, cr2, cr3, {3}
 160:	006e656c 	rsbeq	r6, lr, ip, ror #10
 164:	626d756e 	rsbvs	r7, sp, #461373440	; 0x1b800000
 168:	5f007265 	svcpl	0x00007265
 16c:	70797463 	rsbsvc	r7, r9, r3, ror #8
 170:	72700065 	rsbsvc	r0, r0, #101	; 0x65
 174:	62746e69 	rsbsvs	r6, r4, #1680	; 0x690
 178:	65666675 	strbvs	r6, [r6, #-1653]!	; 0xfffff98b
 17c:	69660072 	stmdbvs	r6!, {r1, r4, r5, r6}^
 180:	5f646c65 	svcpl	0x00646c65
 184:	74646977 	strbtvc	r6, [r4], #-2423	; 0xfffff689
 188:	682f0068 	stmdavs	pc!, {r3, r5, r6}	; <UNPREDICTABLE>
 18c:	2f656d6f 	svccs	0x00656d6f
 190:	6c656873 	stclvs	8, cr6, [r5], #-460	; 0xfffffe34
 194:	2f6e6f74 	svccs	0x006e6f74
 198:	6b736544 	blvs	1cd96b0 <_start-0xbe32e950>
 19c:	2f706f74 	svccs	0x00706f74
 1a0:	6a797168 	bvs	1e5c748 <_start-0xbe1ab8b8>
 1a4:	37304c2f 	ldrcc	r4, [r0, -pc, lsr #24]!
 1a8:	6d72615f 	ldfvse	f6, [r2, #-380]!	; 0xfffffe84
 1ac:	7961642f 	stmdbvc	r1!, {r0, r1, r2, r3, r5, sl, sp, lr}^
 1b0:	312d3630 			; <UNDEFINED> instruction: 0x312d3630
 1b4:	6f6c0033 	svcvs	0x006c0033
 1b8:	6920676e 	stmdbvs	r0!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}
 1bc:	7300746e 	movwvc	r7, #1134	; 0x46e
 1c0:	006e6769 	rsbeq	r6, lr, r9, ror #14
 1c4:	65725f5f 	ldrbvs	r5, [r2, #-3935]!	; 0xfffff0a1
 1c8:	73760073 	cmnvc	r6, #115	; 0x73
 1cc:	6e697270 	mcrvs	2, 3, r7, cr9, cr0, {3}
 1d0:	5f006674 	svcpl	0x00006674
 1d4:	7261755f 	rsbvc	r7, r1, #398458880	; 0x17c00000
 1d8:	75705f74 	ldrbvc	r5, [r0, #-3956]!	; 0xfffff08c
 1dc:	53006374 	movwpl	r6, #884	; 0x374
 1e0:	46434345 	strbmi	r4, [r3], -r5, asr #6
 1e4:	5f005247 	svcpl	0x00005247
 1e8:	7261755f 	rsbvc	r7, r1, #398458880	; 0x17c00000
 1ec:	75705f74 	ldrbvc	r5, [r0, #-3956]!	; 0xfffff08c
 1f0:	64007374 	strvs	r7, [r0], #-884	; 0xfffffc8c
 1f4:	00617461 	rsbeq	r7, r1, r1, ror #8
 1f8:	524f5452 	subpl	r5, pc, #1375731712	; 0x52000000
 1fc:	52534200 	subspl	r4, r3, #0, 4
 200:	55500052 	ldrbpl	r0, [r0, #-82]	; 0xffffffae
 204:	00524450 	subseq	r4, r2, r0, asr r4
 208:	45444f4d 	strbmi	r4, [r4, #-3917]	; 0xfffff0b3
 20c:	534f0052 	movtpl	r0, #61522	; 0xf052
 210:	44454550 	strbmi	r4, [r5], #-1360	; 0xfffffab0
 214:	54470052 	strbpl	r0, [r7], #-82	; 0xffffffae
 218:	50005250 	andpl	r5, r0, r0, asr r2
 21c:	43534552 	cmpmi	r3, #343932928	; 0x14800000
 220:	74737000 	ldrbtvc	r7, [r3], #-0
 224:	5f5f0072 	svcpl	0x005f0072
 228:	74726175 	ldrbtvc	r6, [r2], #-373	; 0xfffffe8b
 22c:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
 230:	70670074 	rsbvc	r0, r7, r4, ror r0
 234:	745f6f69 	ldrbvc	r6, [pc], #-3945	; 23c <_start-0xc0007dc4>
 238:	4b434c00 	blmi	10d3240 <_start-0xbef34dc0>
 23c:	61750052 	cmnvs	r5, r2, asr r0
 240:	745f7472 	ldrbvc	r7, [pc], #-1138	; 248 <_start-0xc0007db8>
 244:	59544f00 	ldmdbpl	r4, {r8, r9, sl, fp, lr}^
 248:	00524550 	subseq	r4, r2, r0, asr r5
 24c:	4c524641 	mrrcmi	6, 4, r4, r2, cr1
 250:	755f5f00 	ldrbvc	r5, [pc, #-3840]	; fffff358 <__bss_end__+0x3fff4eec>
 254:	5f747261 	svcpl	0x00747261
 258:	63746567 	cmnvs	r4, #432013312	; 0x19c00000
 25c:	52464100 	subpl	r4, r6, #0, 2
 260:	6f630048 	svcvs	0x00630048
 264:	6e6f6d6d 	cdpvs	13, 6, cr6, cr15, cr13, {3}
 268:	6372732f 	cmnvs	r2, #-1140850688	; 0xbc000000
 26c:	7261752f 	rsbvc	r7, r1, #197132288	; 0xbc00000
 270:	00632e74 	rsbeq	r2, r3, r4, ror lr
 274:	695f6f64 	ldmdbvs	pc, {r2, r5, r6, r8, r9, sl, fp, sp, lr}^	; <UNPREDICTABLE>
 278:	73007172 	movwvc	r7, #370	; 0x172
 27c:	642f6372 	strtvs	r6, [pc], #-882	; 284 <_start-0xc0007d7c>
 280:	72695f6f 	rsbvc	r5, r9, #444	; 0x1bc
 284:	00632e71 	rsbeq	r2, r3, r1, ror lr
 288:	545f504d 	ldrbpl	r5, [pc], #-77	; 290 <_start-0xc0007d70>
 28c:	4248415a 	submi	r4, r8, #-2147483626	; 0x80000016
 290:	434e4536 	movtmi	r4, #58678	; 0xe536
 294:	0052524c 	subseq	r5, r2, ip, asr #4
 298:	326d6974 	rsbcc	r6, sp, #116, 18	; 0x1d0000
 29c:	345f335f 	ldrbcc	r3, [pc], #-863	; 2a4 <_start-0xc0007d5c>
 2a0:	745f355f 	ldrbvc	r3, [pc], #-1375	; 2a8 <_start-0xc0007d58>
 2a4:	5f504d00 	svcpl	0x00504d00
 2a8:	4d495841 	stclmi	8, cr5, [r9, #-260]	; 0xfffffefc
 2ac:	4e45504c 	cdpmi	0, 4, cr5, cr5, cr12, {2}
 2b0:	52524c43 	subspl	r4, r2, #17152	; 0x4300
 2b4:	5f504d00 	svcpl	0x00504d00
 2b8:	32424841 	subcc	r4, r2, #4259840	; 0x410000
 2bc:	4c434e45 	mcrrmi	14, 4, r4, r3, cr5
 2c0:	4d005252 	sfmmi	f5, 4, [r0, #-328]	; 0xfffffeb8
 2c4:	50415f50 	subpl	r5, r1, r0, asr pc
 2c8:	504c3542 	subpl	r3, ip, r2, asr #10
 2cc:	4c434e45 	mcrrmi	14, 4, r4, r3, cr5
 2d0:	4d005252 	sfmmi	f5, 4, [r0, #-328]	; 0xfffffeb8
 2d4:	48415f50 	stmdami	r1, {r4, r6, r8, r9, sl, fp, ip, lr}^
 2d8:	4e453542 	cdpmi	5, 4, cr3, cr5, cr2, {2}
 2dc:	52544553 	subspl	r4, r4, #348127232	; 0x14c00000
 2e0:	5f504d00 	svcpl	0x00504d00
 2e4:	33425041 	movtcc	r5, #8257	; 0x2041
 2e8:	4c434e45 	mcrrmi	14, 4, r4, r3, cr5
 2ec:	72005252 	andvc	r5, r0, #536870917	; 0x20000005
 2f0:	38327365 	ldmdacc	r2!, {r0, r2, r5, r6, r8, r9, ip, sp, lr}
 2f4:	45494400 	strbmi	r4, [r9, #-1024]	; 0xfffffc00
 2f8:	58410052 	stmdapl	r1, {r1, r4, r6}^
 2fc:	56494449 	strbpl	r4, [r9], -r9, asr #8
 300:	65720052 	ldrbvs	r0, [r2, #-82]!	; 0xffffffae
 304:	00313173 	eorseq	r3, r1, r3, ror r1
 308:	31736572 	cmncc	r3, r2, ror r5
 30c:	65720032 	ldrbvs	r0, [r2, #-50]!	; 0xffffffce
 310:	00333173 	eorseq	r3, r3, r3, ror r1
 314:	31736572 	cmncc	r3, r2, ror r5
 318:	65720034 	ldrbvs	r0, [r2, #-52]!	; 0xffffffcc
 31c:	00353173 	eorseq	r3, r5, r3, ror r1
 320:	31736572 	cmncc	r3, r2, ror r5
 324:	65720036 	ldrbvs	r0, [r2, #-54]!	; 0xffffffca
 328:	00373173 	eorseq	r3, r7, r3, ror r1
 32c:	415f504d 	cmpmi	pc, sp, asr #32
 330:	45354250 	ldrmi	r4, [r5, #-592]!	; 0xfffffdb0
 334:	524c434e 	subpl	r4, ip, #939524097	; 0x38000001
 338:	65720052 	ldrbvs	r0, [r2, #-82]!	; 0xffffffae
 33c:	00393173 	eorseq	r3, r9, r3, ror r1
 340:	425f504d 	subsmi	r5, pc, #77	; 0x4d
 344:	43544f4f 	cmpmi	r4, #316	; 0x13c
 348:	50410052 	subpl	r0, r1, r2, asr r0
 34c:	49443442 	stmdbmi	r4, {r1, r6, sl, ip, sp}^
 350:	4d005256 	sfmmi	f5, 4, [r0, #-344]	; 0xfffffea8
 354:	50415f43 	subpl	r5, r1, r3, asr #30
 358:	504c3142 	subpl	r3, ip, r2, asr #2
 35c:	45534e45 	ldrbmi	r4, [r3, #-3653]	; 0xfffff1bb
 360:	4d005254 	sfmmi	f5, 4, [r0, #-336]	; 0xfffffeb0
 364:	48415f50 	stmdami	r1, {r4, r6, r8, r9, sl, fp, ip, lr}^
 368:	504c3442 	subpl	r3, ip, r2, asr #8
 36c:	4c434e45 	mcrrmi	14, 4, r4, r3, cr5
 370:	4d005252 	sfmmi	f5, 4, [r0, #-328]	; 0xfffffeb8
 374:	48415f43 	stmdami	r1, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
 378:	4e453242 	cdpmi	2, 4, cr3, cr5, cr2, {2}
 37c:	52524c43 	subspl	r4, r2, #17152	; 0x4300
 380:	52434300 	subpl	r4, r3, #0, 6
 384:	43430032 	movtmi	r0, #12338	; 0x3032
 388:	53003352 	movwpl	r3, #850	; 0x352
 38c:	434d4d44 	movtmi	r4, #56644	; 0xdd44
 390:	534b4333 	movtpl	r4, #45875	; 0xb333
 394:	00524c45 	subseq	r4, r2, r5, asr #24
 398:	415f504d 	cmpmi	pc, sp, asr #32
 39c:	45344248 	ldrmi	r4, [r4, #-584]!	; 0xfffffdb8
 3a0:	5445534e 	strbpl	r5, [r5], #-846	; 0xfffffcb2
 3a4:	61680052 	qdsubvs	r0, r2, r8
 3a8:	69745f6c 	ldmdbvs	r4!, {r2, r3, r5, r6, r8, r9, sl, fp, ip, lr}^
 3ac:	625f346d 	subsvs	r3, pc, #1828716544	; 0x6d000000
 3b0:	5f706565 	svcpl	0x00706565
 3b4:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xfffff197
 3b8:	6c616800 	stclvs	8, cr6, [r1], #-0
 3bc:	6d69745f 	cfstrdvs	mvd7, [r9, #-380]!	; 0xfffffe84
 3c0:	61665f31 	cmnvs	r6, r1, lsr pc
 3c4:	6e695f6e 	cdpvs	15, 6, cr5, cr9, cr14, {3}
 3c8:	42007469 	andmi	r7, r0, #1761607680	; 0x69000000
 3cc:	53525f52 	cmppl	r2, #328	; 0x148
 3d0:	4c435354 	mcrrmi	3, 5, r5, r3, cr4
 3d4:	4d005252 	sfmmi	f5, 4, [r0, #-328]	; 0xfffffeb8
 3d8:	48415f43 	stmdami	r1, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
 3dc:	504c3342 	subpl	r3, ip, r2, asr #6
 3e0:	4c434e45 	mcrrmi	14, 4, r4, r3, cr5
 3e4:	4d005252 	sfmmi	f5, 4, [r0, #-328]	; 0xfffffeb8
 3e8:	4c4d5f50 	mcrrmi	15, 5, r5, sp, cr0
 3ec:	4c424841 	mcrrmi	8, 4, r4, r2, cr1
 3f0:	534e4550 	movtpl	r4, #58704	; 0xe550
 3f4:	00525445 	subseq	r5, r2, r5, asr #8
 3f8:	4954504c 	ldmdbmi	r4, {r2, r3, r6, ip, lr}^
 3fc:	4b43314d 	blmi	10cc938 <_start-0xbef3b6c8>
 400:	524c4553 	subpl	r4, ip, #348127232	; 0x14c00000
 404:	5f434d00 	svcpl	0x00434d00
 408:	32425041 	subcc	r5, r2, #65	; 0x41
 40c:	45534e45 	ldrbmi	r4, [r3, #-3653]	; 0xfffff1bb
 410:	55005254 	strpl	r5, [r0, #-596]	; 0xfffffdac
 414:	31545241 	cmpcc	r4, r1, asr #4
 418:	45534b43 	ldrbmi	r4, [r3, #-2883]	; 0xfffff4bd
 41c:	4d00524c 	sfmmi	f5, 4, [r0, #-304]	; 0xfffffed0
 420:	48415f50 	stmdami	r1, {r4, r6, r8, r9, sl, fp, ip, lr}^
 424:	4e453642 	cdpmi	6, 4, cr3, cr5, cr2, {2}
 428:	52544553 	subspl	r4, r4, #348127232	; 0x14c00000
 42c:	4d434300 	stclmi	3, cr4, [r3, #-0]
 430:	4d003252 	sfmmi	f3, 4, [r0, #-328]	; 0xfffffeb8
 434:	48415f50 	stmdami	r1, {r4, r6, r8, r9, sl, fp, ip, lr}^
 438:	504c3242 	subpl	r3, ip, r2, asr #4
 43c:	45534e45 	ldrbmi	r4, [r3, #-3653]	; 0xfffff1bb
 440:	50005254 	andpl	r5, r0, r4, asr r2
 444:	43324c4c 	teqmi	r2, #76, 24	; 0x4c00
 448:	31524746 	cmpcc	r2, r6, asr #14
 44c:	5f434d00 	svcpl	0x00434d00
 450:	34425041 	strbcc	r5, [r2], #-65	; 0xffffffbf
 454:	45534e45 	ldrbmi	r4, [r3, #-3653]	; 0xfffff1bb
 458:	41005254 	tstmi	r0, r4, asr r2
 45c:	52354248 	eorspl	r4, r5, #72, 4	; 0x80000004
 460:	4c435453 	cfstrdmi	mvd5, [r3], {83}	; 0x53
 464:	53005252 	movwpl	r5, #594	; 0x252
 468:	43364950 	teqmi	r6, #80, 18	; 0x140000
 46c:	4c45534b 	mcrrmi	3, 4, r5, r5, cr11
 470:	65720052 	ldrbvs	r0, [r2, #-82]!	; 0xffffffae
 474:	00303273 	eorseq	r3, r0, r3, ror r2
 478:	32736572 	rsbscc	r6, r3, #478150656	; 0x1c800000
 47c:	41550031 	cmpmi	r5, r1, lsr r0
 480:	38375452 	ldmdacc	r7!, {r1, r4, r6, sl, ip, lr}
 484:	45534b43 	ldrbmi	r4, [r3, #-2883]	; 0xfffff4bd
 488:	7200524c 	andvc	r5, r0, #76, 4	; 0xc0000004
 48c:	33327365 	teqcc	r2, #-1811939327	; 0x94000001
 490:	415a5400 	cmpmi	sl, r0, lsl #8
 494:	52364248 	eorspl	r4, r6, #72, 4	; 0x80000004
 498:	45535453 	ldrbmi	r5, [r3, #-1107]	; 0xfffffbad
 49c:	4d00524c 	sfmmi	f5, 4, [r0, #-304]	; 0xfffffed0
 4a0:	4c4d5f50 	mcrrmi	15, 5, r5, sp, cr0
 4a4:	45424841 	strbmi	r4, [r2, #-2113]	; 0xfffff7bf
 4a8:	5445534e 	strbpl	r5, [r5], #-846	; 0xfffffcb2
 4ac:	50410052 	subpl	r0, r1, r2, asr r0
 4b0:	53523242 	cmppl	r2, #536870916	; 0x20000004
 4b4:	524c4354 	subpl	r4, ip, #84, 6	; 0x50000001
 4b8:	65720052 	ldrbvs	r0, [r2, #-82]!	; 0xffffffae
 4bc:	00373273 	eorseq	r3, r7, r3, ror r2
 4c0:	31425041 	cmpcc	r2, r1, asr #32
 4c4:	52564944 	subspl	r4, r6, #68, 18	; 0x110000
 4c8:	5f434d00 	svcpl	0x00434d00
 4cc:	35424841 	strbcc	r4, [r2, #-2113]	; 0xfffff7bf
 4d0:	4e45504c 	cdpmi	0, 4, cr5, cr5, cr12, {2}
 4d4:	52544553 	subspl	r4, r4, #348127232	; 0x14c00000
 4d8:	42504100 	subsmi	r4, r0, #0, 2
 4dc:	54535234 	ldrbpl	r5, [r3], #-564	; 0xfffffdcc
 4e0:	52524c43 	subspl	r4, r2, #17152	; 0x4300
 4e4:	4c4c5000 	marmi	acc0, r5, ip
 4e8:	41524631 	cmpmi	r2, r1, lsr r6
 4ec:	72005243 	andvc	r5, r0, #805306372	; 0x30000004
 4f0:	00317365 	eorseq	r7, r1, r5, ror #6
 4f4:	32736572 	rsbscc	r6, r3, #478150656	; 0x1c800000
 4f8:	73657200 	cmnvc	r5, #0, 4
 4fc:	65720033 	ldrbvs	r0, [r2, #-51]!	; 0xffffffcd
 500:	72003473 	andvc	r3, r0, #1929379840	; 0x73000000
 504:	00357365 	eorseq	r7, r5, r5, ror #6
 508:	36736572 			; <UNDEFINED> instruction: 0x36736572
 50c:	73657200 	cmnvc	r5, #0, 4
 510:	65720037 	ldrbvs	r0, [r2, #-55]!	; 0xffffffc9
 514:	72003873 	andvc	r3, r0, #7536640	; 0x730000
 518:	00397365 	eorseq	r7, r9, r5, ror #6
 51c:	34424841 	strbcc	r4, [r2], #-2113	; 0xfffff7bf
 520:	43545352 	cmpmi	r4, #1207959553	; 0x48000001
 524:	0052524c 	subseq	r5, r2, ip, asr #4
 528:	52454343 	subpl	r4, r5, #201326593	; 0xc000001
 52c:	5f434d00 	svcpl	0x00434d00
 530:	36424841 	strbcc	r4, [r2], -r1, asr #16
 534:	4c434e45 	mcrrmi	14, 4, r4, r3, cr5
 538:	50005252 	andpl	r5, r0, r2, asr r2
 53c:	43344c4c 	teqmi	r4, #76, 24	; 0x4c00
 540:	00524753 	subseq	r4, r2, r3, asr r7
 544:	4954504c 	ldmdbmi	r4, {r2, r3, r6, ip, lr}^
 548:	4335344d 	teqmi	r5, #1291845632	; 0x4d000000
 54c:	4c45534b 	mcrrmi	3, 4, r5, r5, cr11
 550:	434d0052 	movtmi	r0, #53330	; 0xd052
 554:	414c4d5f 	cmpmi	ip, pc, asr sp
 558:	4e454248 	cdpmi	2, 4, cr4, cr5, cr8, {2}
 55c:	52524c43 	subspl	r4, r2, #17152	; 0x4300
 560:	49534400 	ldmdbmi	r3, {sl, lr}^
 564:	45534b43 	ldrbmi	r4, [r3, #-2883]	; 0xfffff4bd
 568:	4d00524c 	sfmmi	f5, 4, [r0, #-304]	; 0xfffffed0
 56c:	5a545f50 	bpl	15182b4 <_start-0xbeaefd4c>
 570:	36424841 	strbcc	r4, [r2], -r1, asr #16
 574:	4e45504c 	cdpmi	0, 4, cr5, cr5, cr12, {2}
 578:	52544553 	subspl	r4, r4, #348127232	; 0x14c00000
 57c:	73657200 	cmnvc	r5, #0, 4
 580:	45003532 	strmi	r3, [r0, #-1330]	; 0xffffface
 584:	4b434854 	blmi	10d26dc <_start-0xbef35924>
 588:	524c4553 	subpl	r4, ip, #348127232	; 0x14c00000
 58c:	5f434d00 	svcpl	0x00434d00
 590:	48414c4d 	stmdami	r1, {r0, r2, r3, r6, sl, fp, lr}^
 594:	45504c42 	ldrbmi	r4, [r0, #-3138]	; 0xfffff3be
 598:	5445534e 	strbpl	r5, [r5], #-846	; 0xfffffcb2
 59c:	50410052 	subpl	r0, r1, r2, asr r0
 5a0:	53523242 	cmppl	r2, #536870916	; 0x20000004
 5a4:	54455354 	strbpl	r5, [r5], #-852	; 0xfffffcac
 5a8:	434f0052 	movtmi	r0, #61522	; 0xf052
 5ac:	45534e45 	ldrbmi	r4, [r3, #-3653]	; 0xfffff1bb
 5b0:	4d005254 	sfmmi	f5, 4, [r0, #-336]	; 0xfffffeb0
 5b4:	48415f43 	stmdami	r1, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
 5b8:	504c3442 	subpl	r3, ip, r2, asr #8
 5bc:	4c434e45 	mcrrmi	14, 4, r4, r3, cr5
 5c0:	4d005252 	sfmmi	f5, 4, [r0, #-328]	; 0xfffffeb8
 5c4:	48415f50 	stmdami	r1, {r4, r6, r8, r9, sl, fp, ip, lr}^
 5c8:	4e453442 	cdpmi	4, 4, cr3, cr5, cr2, {2}
 5cc:	52524c43 	subspl	r4, r2, #17152	; 0x4300
 5d0:	5f434d00 	svcpl	0x00434d00
 5d4:	4d495841 	stclmi	8, cr5, [r9, #-260]	; 0xfffffefc
 5d8:	4e45504c 	cdpmi	0, 4, cr5, cr5, cr12, {2}
 5dc:	52544553 	subspl	r4, r4, #348127232	; 0x14c00000
 5e0:	5f504d00 	svcpl	0x00504d00
 5e4:	33424841 	movtcc	r4, #10305	; 0x2841
 5e8:	4e45504c 	cdpmi	0, 4, cr5, cr5, cr12, {2}
 5ec:	52544553 	subspl	r4, r4, #348127232	; 0x14c00000
 5f0:	5f434d00 	svcpl	0x00434d00
 5f4:	4d495841 	stclmi	8, cr5, [r9, #-260]	; 0xfffffefc
 5f8:	4c434e45 	mcrrmi	14, 4, r4, r3, cr5
 5fc:	4d005252 	sfmmi	f5, 4, [r0, #-328]	; 0xfffffeb8
 600:	48415f43 	stmdami	r1, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
 604:	4e453442 	cdpmi	4, 4, cr3, cr5, cr2, {2}
 608:	52524c43 	subspl	r4, r2, #17152	; 0x4300
 60c:	42484100 	submi	r4, r8, #0, 2
 610:	54535232 	ldrbpl	r5, [r3], #-562	; 0xfffffdce
 614:	52544553 	subspl	r4, r4, #348127232	; 0x14c00000
 618:	4b435200 	blmi	10d4e20 <_start-0xbef331e0>
 61c:	4c455334 	mcrrmi	3, 3, r5, r5, cr4
 620:	504d0052 	subpl	r0, sp, r2, asr r0
 624:	4250415f 	subsmi	r4, r0, #-1073741801	; 0xc0000017
 628:	534e4534 	movtpl	r4, #58676	; 0xe534
 62c:	00525445 	subseq	r5, r2, r5, asr #8
 630:	31524343 	cmpcc	r2, r3, asr #6
 634:	73657200 	cmnvc	r5, #0, 4
 638:	4d003031 	stcmi	0, cr3, [r0, #-196]	; 0xffffff3c
 63c:	50415f43 	subpl	r5, r1, r3, asr #30
 640:	504c3142 	subpl	r3, ip, r2, asr #2
 644:	4c434e45 	mcrrmi	14, 4, r4, r3, cr5
 648:	50005252 	andpl	r5, r0, r2, asr r2
 64c:	46324c4c 	ldrtmi	r4, [r2], -ip, asr #24
 650:	52434152 	subpl	r4, r3, #-2147483628	; 0x80000014
 654:	52415500 	subpl	r5, r1, #0, 10
 658:	43343254 	teqmi	r4, #84, 4	; 0x40000005
 65c:	4c45534b 	mcrrmi	3, 4, r5, r5, cr11
 660:	434d0052 	movtmi	r0, #53330	; 0xd052
 664:	4643314f 	strbmi	r3, [r3], -pc, asr #2
 668:	4d005247 	sfmmi	f5, 4, [r0, #-284]	; 0xfffffee4
 66c:	50415f43 	subpl	r5, r1, r3, asr #30
 670:	504c3242 	subpl	r3, ip, r2, asr #4
 674:	45534e45 	ldrbmi	r4, [r3, #-3653]	; 0xfffff1bb
 678:	72005254 	andvc	r5, r0, #84, 4	; 0x40000005
 67c:	745f6363 	ldrbvc	r6, [pc], #-867	; 684 <_start-0xc000797c>
 680:	5f434d00 	svcpl	0x00434d00
 684:	36424841 	strbcc	r4, [r2], -r1, asr #16
 688:	4e45504c 	cdpmi	0, 4, cr5, cr5, cr12, {2}
 68c:	52544553 	subspl	r4, r4, #348127232	; 0x14c00000
 690:	73657200 	cmnvc	r5, #0, 4
 694:	50003831 	andpl	r3, r0, r1, lsr r8
 698:	43314c4c 	teqmi	r1, #76, 24	; 0x4c00
 69c:	00524753 	subseq	r4, r2, r3, asr r7
 6a0:	41434446 	cmpmi	r3, r6, asr #8
 6a4:	534b434e 	movtpl	r4, #45902	; 0xb34e
 6a8:	00524c45 	subseq	r4, r2, r5, asr #24
 6ac:	31494153 	cmpcc	r9, r3, asr r1
 6b0:	45534b43 	ldrbmi	r4, [r3, #-2883]	; 0xfffff4bd
 6b4:	4d00524c 	sfmmi	f5, 4, [r0, #-304]	; 0xfffffed0
 6b8:	4c4d5f50 	mcrrmi	15, 5, r5, sp, cr0
 6bc:	4c424841 	mcrrmi	8, 4, r4, r2, cr1
 6c0:	434e4550 	movtmi	r4, #58704	; 0xe550
 6c4:	0052524c 	subseq	r5, r2, ip, asr #4
 6c8:	415f434d 	cmpmi	pc, sp, asr #6
 6cc:	45324250 	ldrmi	r4, [r2, #-592]!	; 0xfffffdb0
 6d0:	524c434e 	subpl	r4, ip, #939524097	; 0x38000001
 6d4:	45520052 	ldrbmi	r0, [r2, #-82]	; 0xffffffae
 6d8:	52003253 	andpl	r3, r0, #805306373	; 0x30000005
 6dc:	00335345 	eorseq	r5, r3, r5, asr #6
 6e0:	415f504d 	cmpmi	pc, sp, asr #32
 6e4:	45364248 	ldrmi	r4, [r6, #-584]!	; 0xfffffdb8
 6e8:	524c434e 	subpl	r4, ip, #939524097	; 0x38000001
 6ec:	504d0052 	subpl	r0, sp, r2, asr r0
 6f0:	4248415f 	submi	r4, r8, #-1073741801	; 0xc0000017
 6f4:	45504c32 	ldrbmi	r4, [r0, #-3122]	; 0xfffff3ce
 6f8:	524c434e 	subpl	r4, ip, #939524097	; 0x38000001
 6fc:	41530052 	cmpmi	r3, r2, asr r0
 700:	4b433349 	blmi	10cd42c <_start-0xbef3abd4>
 704:	524c4553 	subpl	r4, ip, #348127232	; 0x14c00000
 708:	43504d00 	cmpmi	r0, #0, 26
 70c:	4c45534b 	mcrrmi	3, 4, r5, r5, cr11
 710:	434d0052 	movtmi	r0, #53330	; 0xd052
 714:	414c4d5f 	cmpmi	ip, pc, asr sp
 718:	504c4248 	subpl	r4, ip, r8, asr #4
 71c:	4c434e45 	mcrrmi	14, 4, r4, r3, cr5
 720:	53005252 	movwpl	r5, #594	; 0x252
 724:	0052434d 	subseq	r4, r2, sp, asr #6
 728:	415f434d 	cmpmi	pc, sp, asr #6
 72c:	45344250 	ldrmi	r4, [r4, #-592]!	; 0xfffffdb0
 730:	524c434e 	subpl	r4, ip, #939524097	; 0x38000001
 734:	53480052 	movtpl	r0, #32850	; 0x8052
 738:	47464349 	strbmi	r4, [r6, -r9, asr #6]
 73c:	4e520052 	mrcmi	0, 2, r0, cr2, cr2, {2}
 740:	4b433247 	blmi	10cd064 <_start-0xbef3af9c>
 744:	524c4553 	subpl	r4, ip, #348127232	; 0x14c00000
 748:	5f504d00 	svcpl	0x00504d00
 74c:	48414c4d 	stmdami	r1, {r0, r2, r3, r6, sl, fp, lr}^
 750:	434e4542 	movtmi	r4, #58690	; 0xe542
 754:	0052524c 	subseq	r5, r2, ip, asr #4
 758:	35424841 	strbcc	r4, [r2, #-2113]	; 0xfffff7bf
 75c:	53545352 	cmppl	r4, #1207959553	; 0x48000001
 760:	00525445 	subseq	r5, r2, r5, asr #8
 764:	33425041 	movtcc	r5, #8257	; 0x2041
 768:	53545352 	cmppl	r4, #1207959553	; 0x48000001
 76c:	00525445 	subseq	r5, r2, r5, asr #8
 770:	415f434d 	cmpmi	pc, sp, asr #6
 774:	4c354248 	lfmmi	f4, 4, [r5], #-288	; 0xfffffee0
 778:	434e4550 	movtmi	r4, #58704	; 0xe550
 77c:	0052524c 	subseq	r5, r2, ip, asr #4
 780:	4c525750 	mrrcmi	7, 5, r5, r2, cr0
 784:	594c4450 	stmdbpl	ip, {r4, r6, sl, lr}^
 788:	54005243 	strpl	r5, [r0], #-579	; 0xfffffdbd
 78c:	4c455349 	mcrrmi	3, 4, r5, r5, cr9
 790:	42484100 	submi	r4, r8, #0, 2
 794:	54535233 	ldrbpl	r5, [r3], #-563	; 0xfffffdcd
 798:	52544553 	subspl	r4, r4, #348127232	; 0x14c00000
 79c:	73657200 	cmnvc	r5, #0, 4
 7a0:	4d003632 	stcmi	6, cr3, [r0, #-200]	; 0xffffff38
 7a4:	53525f43 	cmppl	r2, #268	; 0x10c
 7a8:	4c435354 	mcrrmi	3, 5, r5, r3, cr4
 7ac:	53005252 	movwpl	r5, #594	; 0x252
 7b0:	00524449 	subseq	r4, r2, r9, asr #8
 7b4:	33433249 	movtcc	r3, #12873	; 0x3249
 7b8:	534b4335 	movtpl	r4, #45877	; 0xb335
 7bc:	00524c45 	subseq	r4, r2, r5, asr #24
 7c0:	475f504d 	ldrbmi	r5, [pc, -sp, asr #32]
 7c4:	43545352 	cmpmi	r4, #1207959553	; 0x48000001
 7c8:	52544553 	subspl	r4, r4, #348127232	; 0x14c00000
 7cc:	42504100 	subsmi	r4, r0, #0, 2
 7d0:	56494433 			; <UNDEFINED> instruction: 0x56494433
 7d4:	504d0052 	subpl	r0, sp, r2, asr r0
 7d8:	4248415f 	submi	r4, r8, #-1073741801	; 0xc0000017
 7dc:	45504c34 	ldrbmi	r4, [r0, #-3124]	; 0xfffff3cc
 7e0:	5445534e 	strbpl	r5, [r5], #-846	; 0xfffffcb2
 7e4:	32490052 	subcc	r0, r9, #82	; 0x52
 7e8:	43323143 	teqmi	r2, #-1073741808	; 0xc0000010
 7ec:	4c45534b 	mcrrmi	3, 4, r5, r5, cr11
 7f0:	434d0052 	movtmi	r0, #53330	; 0xd052
 7f4:	414c4d5f 	cmpmi	ip, pc, asr sp
 7f8:	4e454248 	cdpmi	2, 4, cr4, cr5, cr8, {2}
 7fc:	52544553 	subspl	r4, r4, #348127232	; 0x14c00000
 800:	5f434d00 	svcpl	0x00434d00
 804:	33424841 	movtcc	r4, #10305	; 0x2841
 808:	45534e45 	ldrbmi	r4, [r3, #-3653]	; 0xfffff1bb
 80c:	50005254 	andpl	r5, r0, r4, asr r2
 810:	43314c4c 	teqmi	r1, #76, 24	; 0x4c00
 814:	31524746 	cmpcc	r2, r6, asr #14
 818:	4c4c5000 	marmi	acc0, r5, ip
 81c:	47464331 	smlaldxmi	r4, r6, r1, r3
 820:	4d003252 	sfmmi	f3, 4, [r0, #-328]	; 0xfffffeb8
 824:	50415f50 	subpl	r5, r1, r0, asr pc
 828:	4e453142 	dvfmism	f3, f5, f2
 82c:	52544553 	subspl	r4, r4, #348127232	; 0x14c00000
 830:	415a5400 	cmpmi	sl, r0, lsl #8
 834:	52364248 	eorspl	r4, r6, #72, 4	; 0x80000004
 838:	4c435453 	cfstrdmi	mvd5, [r3], {83}	; 0x53
 83c:	41005252 	tstmi	r0, r2, asr r2
 840:	52334248 	eorspl	r4, r3, #72, 4	; 0x80000004
 844:	4c435453 	cfstrdmi	mvd5, [r3], {83}	; 0x53
 848:	4d005252 	sfmmi	f5, 4, [r0, #-328]	; 0xfffffeb8
 84c:	5a545f50 	bpl	1518594 <_start-0xbeaefa6c>
 850:	36424841 	strbcc	r4, [r2], -r1, asr #16
 854:	4e45504c 	cdpmi	0, 4, cr5, cr5, cr12, {2}
 858:	52524c43 	subspl	r4, r2, #17152	; 0x4300
 85c:	5f434d00 	svcpl	0x00434d00
 860:	35424841 	strbcc	r4, [r2, #-2113]	; 0xfffff7bf
 864:	45534e45 	ldrbmi	r4, [r3, #-3653]	; 0xfffff1bb
 868:	4d005254 	sfmmi	f5, 4, [r0, #-336]	; 0xfffffeb0
 86c:	50415f50 	subpl	r5, r1, r0, asr pc
 870:	504c3342 	subpl	r3, ip, r2, asr #6
 874:	45534e45 	ldrbmi	r4, [r3, #-3653]	; 0xfffff1bb
 878:	53005254 	movwpl	r5, #596	; 0x254
 87c:	53324950 	teqpl	r2, #80, 18	; 0x140000
 880:	4b433332 	blmi	10cd550 <_start-0xbef3aab0>
 884:	524c4553 	subpl	r4, ip, #348127232	; 0x14c00000
 888:	45434f00 	strbmi	r4, [r3, #-3840]	; 0xfffff100
 88c:	524c434e 	subpl	r4, ip, #939524097	; 0x38000001
 890:	42440052 	submi	r0, r4, #82	; 0x52
 894:	47464347 	strbmi	r4, [r6, -r7, asr #6]
 898:	434d0052 	movtmi	r0, #53330	; 0xd052
 89c:	4250415f 	subsmi	r4, r0, #-1073741801	; 0xc0000017
 8a0:	45504c33 	ldrbmi	r4, [r0, #-3123]	; 0xfffff3cd
 8a4:	5445534e 	strbpl	r5, [r5], #-846	; 0xfffffcb2
 8a8:	434d0052 	movtmi	r0, #53330	; 0xd052
 8ac:	4643324f 	strbmi	r3, [r3], -pc, asr #4
 8b0:	4d005247 	sfmmi	f5, 4, [r0, #-284]	; 0xfffffee4
 8b4:	57495f50 	smlsldpl	r5, r9, r0, pc	; <UNPREDICTABLE>
 8b8:	5a464744 	bpl	11925d0 <_start-0xbee75a30>
 8bc:	52544553 	subspl	r4, r4, #348127232	; 0x14c00000
 8c0:	43545200 	cmpmi	r4, #0, 4
 8c4:	52564944 	subspl	r4, r6, #68, 18	; 0x110000
 8c8:	47545300 	ldrbmi	r5, [r4, -r0, lsl #6]
 8cc:	4b434e45 	blmi	10d41e8 <_start-0xbef33e18>
 8d0:	524c4553 	subpl	r4, ip, #348127232	; 0x14c00000
 8d4:	5f434d00 	svcpl	0x00434d00
 8d8:	34425041 	strbcc	r5, [r2], #-65	; 0xffffffbf
 8dc:	4e45504c 	cdpmi	0, 4, cr5, cr5, cr12, {2}
 8e0:	52544553 	subspl	r4, r4, #348127232	; 0x14c00000
 8e4:	52415500 	subpl	r5, r1, #0, 10
 8e8:	43353354 	teqmi	r5, #84, 6	; 0x50000001
 8ec:	4c45534b 	mcrrmi	3, 4, r5, r5, cr11
 8f0:	504d0052 	subpl	r0, sp, r2, asr r0
 8f4:	4250415f 	subsmi	r4, r0, #-1073741801	; 0xc0000017
 8f8:	434e4534 	movtmi	r4, #58676	; 0xe534
 8fc:	0052524c 	subseq	r5, r2, ip, asr #4
 900:	415f434d 	cmpmi	pc, sp, asr #6
 904:	45334250 	ldrmi	r4, [r3, #-592]!	; 0xfffffdb0
 908:	524c434e 	subpl	r4, ip, #939524097	; 0x38000001
 90c:	49540052 	ldmdbmi	r4, {r1, r4, r6}^
 910:	5032474d 	eorspl	r4, r2, sp, asr #14
 914:	00524552 	subseq	r4, r2, r2, asr r5
 918:	334c4c50 	movtcc	r4, #52304	; 0xcc50
 91c:	4d005243 	sfmmi	f5, 4, [r0, #-268]	; 0xfffffef4
 920:	50415f50 	subpl	r5, r1, r0, asr pc
 924:	4e453242 	cdpmi	2, 4, cr3, cr5, cr2, {2}
 928:	52544553 	subspl	r4, r4, #348127232	; 0x14c00000
 92c:	4c4c5000 	marmi	acc0, r5, ip
 930:	41524634 	cmpmi	r2, r4, lsr r6
 934:	4d005243 	sfmmi	f5, 4, [r0, #-268]	; 0xfffffef4
 938:	50415f50 	subpl	r5, r1, r0, asr pc
 93c:	504c3242 	subpl	r3, ip, r2, asr #4
 940:	4c434e45 	mcrrmi	14, 4, r4, r3, cr5
 944:	41005252 	tstmi	r0, r2, asr r2
 948:	52314250 	eorspl	r4, r1, #80, 4
 94c:	45535453 	ldrbmi	r5, [r3, #-1107]	; 0xfffffbad
 950:	4d005254 	sfmmi	f5, 4, [r0, #-336]	; 0xfffffeb0
 954:	48415f43 	stmdami	r1, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
 958:	504c3342 	subpl	r3, ip, r2, asr #6
 95c:	45534e45 	ldrbmi	r4, [r3, #-3653]	; 0xfffff1bb
 960:	4d005254 	sfmmi	f5, 4, [r0, #-336]	; 0xfffffeb0
 964:	48415f43 	stmdami	r1, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
 968:	504c3642 	subpl	r3, ip, r2, asr #12
 96c:	4c434e45 	mcrrmi	14, 4, r4, r3, cr5
 970:	52005252 	andpl	r5, r0, #536870917	; 0x20000005
 974:	49534c44 	ldmdbmi	r3, {r2, r6, sl, fp, lr}^
 978:	50005243 	andpl	r5, r0, r3, asr #4
 97c:	43344c4c 	teqmi	r4, #76, 24	; 0x4c00
 980:	43500052 	cmpmi	r0, #82	; 0x52
 984:	5332314b 	teqpl	r2, #-1073741806	; 0xc0000012
 988:	00524c45 	subseq	r4, r2, r5, asr #24
 98c:	324c4c50 	subcc	r4, ip, #80, 24	; 0x5000
 990:	52474643 	subpl	r4, r7, #70254592	; 0x4300000
 994:	4c500032 	mrrcmi	0, 3, r0, r0, cr2	; <UNPREDICTABLE>
 998:	4643344c 	strbmi	r3, [r3], -ip, asr #8
 99c:	00315247 	eorseq	r5, r1, r7, asr #4
 9a0:	32736572 	rsbscc	r6, r3, #478150656	; 0x1c800000
 9a4:	504d0034 	subpl	r0, sp, r4, lsr r0
 9a8:	4248415f 	submi	r4, r8, #-1073741801	; 0xc0000017
 9ac:	45504c35 	ldrbmi	r4, [r0, #-3125]	; 0xfffff3cb
 9b0:	5445534e 	strbpl	r5, [r5], #-846	; 0xfffffcb2
 9b4:	504d0052 	subpl	r0, sp, r2, asr r0
 9b8:	4248415f 	submi	r4, r8, #-1073741801	; 0xc0000017
 9bc:	534e4533 	movtpl	r4, #58675	; 0xe533
 9c0:	00525445 	subseq	r5, r2, r5, asr #8
 9c4:	334c4c50 	movtcc	r4, #52304	; 0xcc50
 9c8:	52475343 	subpl	r5, r7, #201326593	; 0xc000001
 9cc:	5f504d00 	svcpl	0x00504d00
 9d0:	51455253 	cmppl	r5, r3, asr r2
 9d4:	52544553 	subspl	r4, r4, #348127232	; 0x14c00000
 9d8:	5f434d00 	svcpl	0x00434d00
 9dc:	32424841 	subcc	r4, r2, #4259840	; 0x410000
 9e0:	4e45504c 	cdpmi	0, 4, cr5, cr5, cr12, {2}
 9e4:	52544553 	subspl	r4, r4, #348127232	; 0x14c00000
 9e8:	5f504d00 	svcpl	0x00504d00
 9ec:	4d495841 	stclmi	8, cr5, [r9, #-260]	; 0xfffffefc
 9f0:	4e45504c 	cdpmi	0, 4, cr5, cr5, cr12, {2}
 9f4:	52544553 	subspl	r4, r4, #348127232	; 0x14c00000
 9f8:	5f434d00 	svcpl	0x00434d00
 9fc:	33425041 	movtcc	r5, #8257	; 0x2041
 a00:	4e45504c 	cdpmi	0, 4, cr5, cr5, cr12, {2}
 a04:	52524c43 	subspl	r4, r2, #17152	; 0x4300
 a08:	5f434d00 	svcpl	0x00434d00
 a0c:	31425041 	cmpcc	r2, r1, asr #32
 a10:	45534e45 	ldrbmi	r4, [r3, #-3653]	; 0xfffff1bb
 a14:	4d005254 	sfmmi	f5, 4, [r0, #-336]	; 0xfffffeb0
 a18:	444b4350 	strbmi	r4, [fp], #-848	; 0xfffffcb0
 a1c:	00525649 	subseq	r5, r2, r9, asr #12
 a20:	49524444 	ldmdbmi	r2, {r2, r6, sl, lr}^
 a24:	52434654 	subpl	r4, r3, #84, 12	; 0x5400000
 a28:	45504300 	ldrbmi	r4, [r0, #-768]	; 0xfffffd00
 a2c:	534b4352 	movtpl	r4, #45906	; 0xb352
 a30:	00524c45 	subseq	r4, r2, r5, asr #24
 a34:	43434543 	movtmi	r4, #13635	; 0x3543
 a38:	4c45534b 	mcrrmi	3, 4, r5, r5, cr11
 a3c:	504d0052 	subpl	r0, sp, r2, asr r0
 a40:	4549435f 	strbmi	r4, [r9, #-863]	; 0xfffffca1
 a44:	44410052 	strbmi	r0, [r1], #-82	; 0xffffffae
 a48:	534b4343 	movtpl	r4, #45891	; 0xb343
 a4c:	00524c45 	subseq	r4, r2, r5, asr #24
 a50:	415f434d 	cmpmi	pc, sp, asr #6
 a54:	45334250 	ldrmi	r4, [r3, #-592]!	; 0xfffffdb0
 a58:	5445534e 	strbpl	r5, [r5], #-846	; 0xfffffcb2
 a5c:	434d0052 	movtmi	r0, #53330	; 0xd052
 a60:	4958415f 	ldmdbmi	r8, {r0, r1, r2, r3, r4, r6, r8, lr}^
 a64:	45504c4d 	ldrbmi	r4, [r0, #-3149]	; 0xfffff3b3
 a68:	524c434e 	subpl	r4, ip, #939524097	; 0x38000001
 a6c:	48410052 	stmdami	r1, {r1, r4, r6}^
 a70:	53523642 	cmppl	r2, #69206016	; 0x4200000
 a74:	54455354 	strbpl	r5, [r5], #-852	; 0xfffffcac
 a78:	504d0052 	subpl	r0, sp, r2, asr r0
 a7c:	5250415f 	subspl	r4, r0, #-1073741801	; 0xc0000017
 a80:	52435453 	subpl	r5, r3, #1392508928	; 0x53000000
 a84:	42504100 	subsmi	r4, r0, #0, 2
 a88:	54535235 	ldrbpl	r5, [r3], #-565	; 0xfffffdcb
 a8c:	52544553 	subspl	r4, r4, #348127232	; 0x14c00000
 a90:	5f434d00 	svcpl	0x00434d00
 a94:	33424841 	movtcc	r4, #10305	; 0x2841
 a98:	4c434e45 	mcrrmi	14, 4, r4, r3, cr5
 a9c:	52005252 	andpl	r5, r0, #536870917	; 0x20000005
 aa0:	53334b43 	teqpl	r3, #68608	; 0x10c00
 aa4:	00524c45 	subseq	r4, r2, r5, asr #24
 aa8:	52524556 	subspl	r4, r2, #360710144	; 0x15800000
 aac:	5f434d00 	svcpl	0x00434d00
 ab0:	35425041 	strbcc	r5, [r2, #-65]	; 0xffffffbf
 ab4:	45534e45 	ldrbmi	r4, [r3, #-3653]	; 0xfffff1bb
 ab8:	4d005254 	sfmmi	f5, 4, [r0, #-336]	; 0xfffffeb0
 abc:	48415f43 	stmdami	r1, {r0, r1, r6, r8, r9, sl, fp, ip, lr}^
 ac0:	4e453242 	cdpmi	2, 4, cr3, cr5, cr2, {2}
 ac4:	52544553 	subspl	r4, r4, #348127232	; 0x14c00000
 ac8:	5f434d00 	svcpl	0x00434d00
 acc:	35425041 	strbcc	r5, [r2, #-65]	; 0xffffffbf
 ad0:	4e45504c 	cdpmi	0, 4, cr5, cr5, cr12, {2}
 ad4:	52544553 	subspl	r4, r4, #348127232	; 0x14c00000
 ad8:	63727300 	cmnvs	r2, #0, 6
 adc:	6d77702f 	ldclvs	0, cr7, [r7, #-188]!	; 0xffffff44
 ae0:	4d00632e 	stcmi	3, cr6, [r0, #-184]	; 0xffffff48
 ae4:	49445543 	stmdbmi	r4, {r0, r1, r6, r8, sl, ip, lr}^
 ae8:	4d005256 	sfmmi	f5, 4, [r0, #-344]	; 0xfffffea8
 aec:	50415f50 	subpl	r5, r1, r0, asr pc
 af0:	4e453142 	dvfmism	f3, f5, f2
 af4:	52524c43 	subspl	r4, r2, #17152	; 0x4300
 af8:	5f504d00 	svcpl	0x00504d00
 afc:	00524347 	subseq	r4, r2, r7, asr #6
 b00:	32495053 	subcc	r5, r9, #83	; 0x53
 b04:	4b433153 	blmi	10cd058 <_start-0xbef3afa8>
 b08:	524c4553 	subpl	r4, ip, #348127232	; 0x14c00000
 b0c:	42504100 	subsmi	r4, r0, #0, 2
 b10:	56494435 			; <UNDEFINED> instruction: 0x56494435
 b14:	4c500052 	mrrcmi	0, 5, r0, r0, cr2	; <UNPREDICTABLE>
 b18:	4643334c 	strbmi	r3, [r3], -ip, asr #6
 b1c:	00325247 	eorseq	r5, r2, r7, asr #4
 b20:	415f504d 	cmpmi	pc, sp, asr #32
 b24:	4c334248 	lfmmi	f4, 4, [r3], #-288	; 0xfffffee0
 b28:	434e4550 	movtmi	r4, #58704	; 0xe550
 b2c:	0052524c 	subseq	r5, r2, ip, asr #4
 b30:	54524155 	ldrbpl	r4, [r2], #-341	; 0xfffffeab
 b34:	534b4336 	movtpl	r4, #45878	; 0xb336
 b38:	00524c45 	subseq	r4, r2, r5, asr #24
 b3c:	415f434d 	cmpmi	pc, sp, asr #6
 b40:	45354248 	ldrmi	r4, [r5, #-584]!	; 0xfffffdb8
 b44:	524c434e 	subpl	r4, ip, #939524097	; 0x38000001
 b48:	504d0052 	subpl	r0, sp, r2, asr r0
 b4c:	4250415f 	subsmi	r4, r0, #-1073741801	; 0xc0000017
 b50:	45504c33 	ldrbmi	r4, [r0, #-3123]	; 0xfffff3cd
 b54:	524c434e 	subpl	r4, ip, #939524097	; 0x38000001
 b58:	504d0052 	subpl	r0, sp, r2, asr r0
 b5c:	415a545f 	cmpmi	sl, pc, asr r4
 b60:	45364248 	ldrmi	r4, [r6, #-584]!	; 0xfffffdb8
 b64:	4c45534e 	mcrrmi	3, 4, r5, r5, cr14
 b68:	504d0052 	subpl	r0, sp, r2, asr r0
 b6c:	4250415f 	subsmi	r4, r0, #-1073741801	; 0xc0000017
 b70:	434e4532 	movtmi	r4, #58674	; 0xe532
 b74:	0052524c 	subseq	r5, r2, ip, asr #4
 b78:	324c4c50 	subcc	r4, ip, #80, 24	; 0x5000
 b7c:	4d005243 	sfmmi	f5, 4, [r0, #-268]	; 0xfffffef4
 b80:	4b435353 	blmi	10d58d4 <_start-0xbef3272c>
 b84:	524c4553 	subpl	r4, ip, #348127232	; 0x14c00000
 b88:	44505300 	ldrbmi	r5, [r0], #-768	; 0xfffffd00
 b8c:	4b434649 	blmi	10d24b8 <_start-0xbef35b48>
 b90:	524c4553 	subpl	r4, ip, #348127232	; 0x14c00000
 b94:	54504c00 	ldrbpl	r4, [r0], #-3072	; 0xfffff400
 b98:	33324d49 	teqcc	r2, #4672	; 0x1240
 b9c:	45534b43 	ldrbmi	r4, [r3, #-2883]	; 0xfffff4bd
 ba0:	4d00524c 	sfmmi	f5, 4, [r0, #-304]	; 0xfffffed0
 ba4:	48415f50 	stmdami	r1, {r4, r6, r8, r9, sl, fp, ip, lr}^
 ba8:	504c3642 	subpl	r3, ip, r2, asr #12
 bac:	45534e45 	ldrbmi	r4, [r3, #-3653]	; 0xfffff1bb
 bb0:	4d005254 	sfmmi	f5, 4, [r0, #-336]	; 0xfffffeb0
 bb4:	50415f43 	subpl	r5, r1, r3, asr #30
 bb8:	504c3242 	subpl	r3, ip, r2, asr #4
 bbc:	4c434e45 	mcrrmi	14, 4, r4, r3, cr5
 bc0:	4d005252 	sfmmi	f5, 4, [r0, #-328]	; 0xfffffeb8
 bc4:	57495f50 	smlsldpl	r5, r9, r0, pc	; <UNPREDICTABLE>
 bc8:	5a464744 	bpl	11928e0 <_start-0xbee75720>
 bcc:	52524c43 	subspl	r4, r2, #17152	; 0x4300
 bd0:	5f504d00 	svcpl	0x00504d00
 bd4:	53525041 	cmppl	r2, #65	; 0x41
 bd8:	00525354 	subseq	r5, r2, r4, asr r3
 bdc:	415f434d 	cmpmi	pc, sp, asr #6
 be0:	4c344250 	lfmmi	f4, 4, [r4], #-320	; 0xfffffec0
 be4:	434e4550 	movtmi	r4, #58704	; 0xe550
 be8:	0052524c 	subseq	r5, r2, ip, asr #4
 bec:	34424841 	strbcc	r4, [r2], #-2113	; 0xfffff7bf
 bf0:	53545352 	cmppl	r4, #1207959553	; 0x48000001
 bf4:	00525445 	subseq	r5, r2, r5, asr #8
 bf8:	32424841 	subcc	r4, r2, #4259840	; 0x410000
 bfc:	43545352 	cmpmi	r4, #1207959553	; 0x48000001
 c00:	0052524c 	subseq	r5, r2, ip, asr #4
 c04:	435f504d 	cmpmi	pc, #77	; 0x4d
 c08:	00524649 	subseq	r4, r2, r9, asr #12
 c0c:	52414d44 	subpl	r4, r1, #68, 26	; 0x1100
 c10:	5f504d00 	svcpl	0x00504d00
 c14:	32424841 	subcc	r4, r2, #4259840	; 0x410000
 c18:	45534e45 	ldrbmi	r4, [r3, #-3653]	; 0xfffff1bb
 c1c:	4d005254 	sfmmi	f5, 4, [r0, #-336]	; 0xfffffeb0
 c20:	50415f50 	subpl	r5, r1, r0, asr pc
 c24:	504c3542 	subpl	r3, ip, r2, asr #10
 c28:	45534e45 	ldrbmi	r4, [r3, #-3653]	; 0xfffff1bb
 c2c:	4d005254 	sfmmi	f5, 4, [r0, #-336]	; 0xfffffeb0
 c30:	50415f50 	subpl	r5, r1, r0, asr pc
 c34:	4e453342 	cdpmi	3, 4, cr3, cr5, cr2, {2}
 c38:	52544553 	subspl	r4, r4, #348127232	; 0x14c00000
 c3c:	42504100 	subsmi	r4, r0, #0, 2
 c40:	54535231 	ldrbpl	r5, [r3], #-561	; 0xfffffdcf
 c44:	52524c43 	subspl	r4, r2, #17152	; 0x4300
 c48:	42504100 	subsmi	r4, r0, #0, 2
 c4c:	56494432 			; <UNDEFINED> instruction: 0x56494432
 c50:	504d0052 	subpl	r0, sp, r2, asr r0
 c54:	4250415f 	subsmi	r4, r0, #-1073741801	; 0xc0000017
 c58:	534e4535 	movtpl	r4, #58677	; 0xe535
 c5c:	00525445 	subseq	r5, r2, r5, asr #8
 c60:	344c4c50 	strbcc	r4, [ip], #-3152	; 0xfffff3b0
 c64:	52474643 	subpl	r4, r7, #70254592	; 0x4300000
 c68:	504d0032 	subpl	r0, sp, r2, lsr r0
 c6c:	4248415f 	submi	r4, r8, #-1073741801	; 0xc0000017
 c70:	45504c35 	ldrbmi	r4, [r0, #-3125]	; 0xfffff3cb
 c74:	524c434e 	subpl	r4, ip, #939524097	; 0x38000001
 c78:	504d0052 	subpl	r0, sp, r2, asr r0
 c7c:	5453525f 	ldrbpl	r5, [r3], #-607	; 0xfffffda1
 c80:	4d005353 	stcmi	3, cr5, [r0, #-332]	; 0xfffffeb4
 c84:	48415f50 	stmdami	r1, {r4, r6, r8, r9, sl, fp, ip, lr}^
 c88:	4e453342 	cdpmi	3, 4, cr3, cr5, cr2, {2}
 c8c:	52524c43 	subspl	r4, r2, #17152	; 0x4300
 c90:	42504100 	subsmi	r4, r0, #0, 2
 c94:	54535233 	ldrbpl	r5, [r3], #-563	; 0xfffffdcd
 c98:	52524c43 	subspl	r4, r2, #17152	; 0x4300
 c9c:	49534300 	ldmdbmi	r3, {r8, r9, lr}^
 ca0:	52474643 	subpl	r4, r7, #70254592	; 0x4300000
 ca4:	6c616800 	stclvs	8, cr6, [r1], #-0
 ca8:	6d69745f 	cfstrdvs	mvd7, [r9, #-380]!	; 0xfffffe84
 cac:	6d5f3631 	ldclvs	6, cr3, [pc, #-196]	; bf0 <_start-0xc0007410>
 cb0:	74696e6f 	strbtvc	r6, [r9], #-3695	; 0xfffff191
 cb4:	695f726f 	ldmdbvs	pc, {r0, r1, r2, r3, r5, r6, r9, ip, sp, lr}^	; <UNPREDICTABLE>
 cb8:	0074696e 	rsbseq	r6, r4, lr, ror #18
 cbc:	535f504d 	cmppl	pc, #77	; 0x4d
 cc0:	43514552 	cmpmi	r1, #343932928	; 0x14800000
 cc4:	0052524c 	subseq	r5, r2, ip, asr #4
 cc8:	435f434d 	cmpmi	pc, #872415233	; 0x34000001
 ccc:	00524549 	subseq	r4, r2, r9, asr #10
 cd0:	415f434d 	cmpmi	pc, sp, asr #6
 cd4:	45314250 	ldrmi	r4, [r1, #-592]!	; 0xfffffdb0
 cd8:	524c434e 	subpl	r4, ip, #939524097	; 0x38000001
 cdc:	504d0052 	subpl	r0, sp, r2, asr r0
 ce0:	4248415f 	submi	r4, r8, #-1073741801	; 0xc0000017
 ce4:	434e4535 	movtmi	r4, #58677	; 0xe535
 ce8:	0052524c 	subseq	r5, r2, ip, asr #4
 cec:	415f504d 	cmpmi	pc, sp, asr #32
 cf0:	4c344250 	lfmmi	f4, 4, [r4], #-320	; 0xfffffec0
 cf4:	534e4550 	movtpl	r4, #58704	; 0xe550
 cf8:	00525445 	subseq	r5, r2, r5, asr #8
 cfc:	415f504d 	cmpmi	pc, sp, asr #32
 d00:	4c344250 	lfmmi	f4, 4, [r4], #-320	; 0xfffffec0
 d04:	434e4550 	movtmi	r4, #58704	; 0xe550
 d08:	0052524c 	subseq	r5, r2, ip, asr #4
 d0c:	32494153 	subcc	r4, r9, #-1073741804	; 0xc0000014
 d10:	45534b43 	ldrbmi	r4, [r3, #-2883]	; 0xfffff4bd
 d14:	5300524c 	movwpl	r5, #588	; 0x24c
 d18:	434d4d44 	movtmi	r4, #56644	; 0xdd44
 d1c:	4b433231 	blmi	10cd5e8 <_start-0xbef3aa18>
 d20:	524c4553 	subpl	r4, ip, #348127232	; 0x14c00000
 d24:	5f434d00 	svcpl	0x00434d00
 d28:	32424841 	subcc	r4, r2, #4259840	; 0x410000
 d2c:	4e45504c 	cdpmi	0, 4, cr5, cr5, cr12, {2}
 d30:	52524c43 	subspl	r4, r2, #17152	; 0x4300
 d34:	50535100 	subspl	r5, r3, r0, lsl #2
 d38:	534b4349 	movtpl	r4, #45897	; 0xb349
 d3c:	00524c45 	subseq	r4, r2, r5, asr #24
 d40:	34524343 	ldrbcc	r4, [r2], #-835	; 0xfffffcbd
 d44:	5f434d00 	svcpl	0x00434d00
 d48:	4d495841 	stclmi	8, cr5, [r9, #-260]	; 0xfffffefc
 d4c:	45534e45 	ldrbmi	r4, [r3, #-3653]	; 0xfffff1bb
 d50:	53005254 	movwpl	r5, #596	; 0x254
 d54:	35344950 	ldrcc	r4, [r4, #-2384]!	; 0xfffff6b0
 d58:	45534b43 	ldrbmi	r4, [r3, #-2883]	; 0xfffff4bd
 d5c:	4d00524c 	sfmmi	f5, 4, [r0, #-304]	; 0xfffffed0
 d60:	50415f50 	subpl	r5, r1, r0, asr pc
 d64:	504c3142 	subpl	r3, ip, r2, asr #2
 d68:	45534e45 	ldrbmi	r4, [r3, #-3653]	; 0xfffff1bb
 d6c:	42005254 	andmi	r5, r0, #84, 4	; 0x40000005
 d70:	00524344 	subseq	r4, r2, r4, asr #6
 d74:	35425041 	strbcc	r5, [r2, #-65]	; 0xffffffbf
 d78:	43545352 	cmpmi	r4, #1207959553	; 0x48000001
 d7c:	0052524c 	subseq	r5, r2, ip, asr #4
 d80:	31474e52 	cmpcc	r7, r2, asr lr
 d84:	45534b43 	ldrbmi	r4, [r3, #-2883]	; 0xfffff4bd
 d88:	5300524c 	movwpl	r5, #588	; 0x24c
 d8c:	43344941 	teqmi	r4, #1064960	; 0x104000
 d90:	4c45534b 	mcrrmi	3, 4, r5, r5, cr11
 d94:	32490052 	subcc	r0, r9, #82	; 0x52
 d98:	43363443 	teqmi	r6, #1124073472	; 0x43000000
 d9c:	4c45534b 	mcrrmi	3, 4, r5, r5, cr11
 da0:	434d0052 	movtmi	r0, #53330	; 0xd052
 da4:	4250415f 	subsmi	r4, r0, #-1073741801	; 0xc0000017
 da8:	434e4535 	movtmi	r4, #58677	; 0xe535
 dac:	0052524c 	subseq	r5, r2, ip, asr #4
 db0:	43425355 	movtmi	r5, #9045	; 0x2355
 db4:	4c45534b 	mcrrmi	3, 4, r5, r5, cr11
 db8:	434d0052 	movtmi	r0, #53330	; 0xd052
 dbc:	4250415f 	subsmi	r4, r0, #-1073741801	; 0xc0000017
 dc0:	45504c35 	ldrbmi	r4, [r0, #-3125]	; 0xfffff3cb
 dc4:	524c434e 	subpl	r4, ip, #939524097	; 0x38000001
 dc8:	4c500052 	mrrcmi	0, 5, r0, r0, cr2	; <UNPREDICTABLE>
 dcc:	5243314c 	subpl	r3, r3, #76, 2
 dd0:	4d495400 	cfstrdmi	mvd5, [r9, #-0]
 dd4:	52503147 	subspl	r3, r0, #-1073741807	; 0xc0000011
 dd8:	50005245 	andpl	r5, r0, r5, asr #4
 ddc:	46334c4c 	ldrtmi	r4, [r3], -ip, asr #24
 de0:	52434152 	subpl	r4, r3, #-2147483628	; 0x80000014
 de4:	4c4c5000 	marmi	acc0, r5, ip
 de8:	47464333 	smlaldxmi	r4, r6, r3, r3
 dec:	54003152 	strpl	r3, [r0], #-338	; 0xfffffeae
 df0:	0052435a 	subseq	r4, r2, sl, asr r3
 df4:	4452434f 	ldrbmi	r4, [r2], #-847	; 0xfffffcb1
 df8:	4d005259 	sfmmi	f5, 4, [r0, #-356]	; 0xfffffe9c
 dfc:	50415f50 	subpl	r5, r1, r0, asr pc
 e00:	504c3142 	subpl	r3, ip, r2, asr #2
 e04:	4c434e45 	mcrrmi	14, 4, r4, r3, cr5
 e08:	41005252 	tstmi	r0, r2, asr r2
 e0c:	4b435353 	blmi	10d5b60 <_start-0xbef324a0>
 e10:	524c4553 	subpl	r4, ip, #348127232	; 0x14c00000
 e14:	5f504d00 	svcpl	0x00504d00
 e18:	32425041 	subcc	r5, r2, #65	; 0x41
 e1c:	4e45504c 	cdpmi	0, 4, cr5, cr5, cr12, {2}
 e20:	52544553 	subspl	r4, r4, #348127232	; 0x14c00000
 e24:	5f434d00 	svcpl	0x00434d00
 e28:	34424841 	strbcc	r4, [r2], #-2113	; 0xfffff7bf
 e2c:	4e45504c 	cdpmi	0, 4, cr5, cr5, cr12, {2}
 e30:	52544553 	subspl	r4, r4, #348127232	; 0x14c00000
 e34:	42504100 	subsmi	r4, r0, #0, 2
 e38:	54535234 	ldrbpl	r5, [r3], #-564	; 0xfffffdcc
 e3c:	52544553 	subspl	r4, r4, #348127232	; 0x14c00000
 e40:	5f434d00 	svcpl	0x00434d00
 e44:	34424841 	strbcc	r4, [r2], #-2113	; 0xfffff7bf
 e48:	45534e45 	ldrbmi	r4, [r3, #-3653]	; 0xfffff1bb
 e4c:	46005254 			; <UNDEFINED> instruction: 0x46005254
 e50:	4b43434d 	blmi	10d1b8c <_start-0xbef36474>
 e54:	524c4553 	subpl	r4, ip, #348127232	; 0x14c00000
 e58:	4c4c5000 	marmi	acc0, r5, ip
 e5c:	47534332 	smmlarmi	r3, r2, r3, r4
 e60:	504d0052 	subpl	r0, sp, r2, asr r0
 e64:	4248415f 	submi	r4, r8, #-1073741801	; 0xc0000017
 e68:	45504c36 	ldrbmi	r4, [r0, #-3126]	; 0xfffff3ca
 e6c:	524c434e 	subpl	r4, ip, #939524097	; 0x38000001
 e70:	434d0052 	movtmi	r0, #53330	; 0xd052
 e74:	4649435f 			; <UNDEFINED> instruction: 0x4649435f
 e78:	43430052 	movtmi	r0, #12370	; 0x3052
 e7c:	0031524d 	eorseq	r5, r1, sp, asr #4
 e80:	31534552 	cmpcc	r3, r2, asr r5
 e84:	73657200 	cmnvc	r5, #0, 4
 e88:	4d003232 	sfmmi	f3, 4, [r0, #-200]	; 0xffffff38
 e8c:	53525f50 	cmppl	r2, #80, 30	; 0x140
 e90:	00525354 	subseq	r5, r2, r4, asr r3
 e94:	34534552 	ldrbcc	r4, [r3], #-1362	; 0xfffffaae
 e98:	5f434d00 	svcpl	0x00434d00
 e9c:	36424841 	strbcc	r4, [r2], -r1, asr #16
 ea0:	45534e45 	ldrbmi	r4, [r3, #-3653]	; 0xfffff1bb
 ea4:	6d005254 	sfmvs	f5, 4, [r0, #-336]	; 0xfffffeb0
 ea8:	2e6e6961 	vnmulcs.f16	s13, s28, s3	; <UNPREDICTABLE>
 eac:	616d0063 	cmnvs	sp, r3, rrx
 eb0:	地址 0x00000eb0 越界。


Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  10:	0000001c 	andeq	r0, r0, ip, lsl r0
  14:	00000000 	andeq	r0, r0, r0
  18:	c000835c 	andgt	r8, r0, ip, asr r3
  1c:	00000050 	andeq	r0, r0, r0, asr r0
  20:	8b040e42 	blhi	103930 <_start-0xbff046d0>
  24:	0b0d4201 	bleq	350830 <_start-0xbfcb77d0>
  28:	420d0d60 	andmi	r0, sp, #96, 26	; 0x1800
  2c:	00000ecb 	andeq	r0, r0, fp, asr #29
  30:	0000001c 	andeq	r0, r0, ip, lsl r0
  34:	00000000 	andeq	r0, r0, r0
  38:	c00083ac 	andgt	r8, r0, ip, lsr #7
  3c:	000001b8 			; <UNDEFINED> instruction: 0x000001b8
  40:	8b080e42 	blhi	203950 <_start-0xbfe046b0>
  44:	42018e02 	andmi	r8, r1, #2, 28
  48:	02040b0c 	andeq	r0, r4, #12, 22	; 0x3000
  4c:	080d0cd6 	stmdaeq	sp, {r1, r2, r4, r6, r7, sl, fp}
  50:	0000001c 	andeq	r0, r0, ip, lsl r0
  54:	00000000 	andeq	r0, r0, r0
  58:	c0008564 	andgt	r8, r0, r4, ror #10
  5c:	0000006c 	andeq	r0, r0, ip, rrx
  60:	8b080e42 	blhi	203970 <_start-0xbfe04690>
  64:	42018e02 	andmi	r8, r1, #2, 28
  68:	70040b0c 	andvc	r0, r4, ip, lsl #22
  6c:	00080d0c 	andeq	r0, r8, ip, lsl #26
  70:	0000001c 	andeq	r0, r0, ip, lsl r0
  74:	00000000 	andeq	r0, r0, r0
  78:	c00085d0 	ldrdgt	r8, [r0], -r0
  7c:	00000094 	muleq	r0, r4, r0
  80:	8b040e42 	blhi	103990 <_start-0xbff04670>
  84:	0b0d4201 	bleq	350890 <_start-0xbfcb7770>
  88:	0d0d4202 	sfmeq	f4, 4, [sp, #-8]
  8c:	000ecb42 	andeq	ip, lr, r2, asr #22
  90:	00000020 	andeq	r0, r0, r0, lsr #32
  94:	00000000 	andeq	r0, r0, r0
  98:	c0008664 	andgt	r8, r0, r4, ror #12
  9c:	000003e4 	andeq	r0, r0, r4, ror #7
  a0:	8b080e42 	blhi	2039b0 <_start-0xbfe04650>
  a4:	42018e02 	andmi	r8, r1, #2, 28
  a8:	03040b0c 	movweq	r0, #19212	; 0x4b0c
  ac:	0d0c01ec 	stfeqs	f0, [ip, #-944]	; 0xfffffc50
  b0:	00000008 	andeq	r0, r0, r8
  b4:	0000001c 	andeq	r0, r0, ip, lsl r0
  b8:	00000000 	andeq	r0, r0, r0
  bc:	c0008a48 	andgt	r8, r0, r8, asr #20
  c0:	0000006c 	andeq	r0, r0, ip, rrx
  c4:	8b040e42 	blhi	1039d4 <_start-0xbff0462c>
  c8:	0b0d4201 	bleq	3508d4 <_start-0xbfcb772c>
  cc:	420d0d6e 	andmi	r0, sp, #7040	; 0x1b80
  d0:	00000ecb 	andeq	r0, r0, fp, asr #29
  d4:	00000020 	andeq	r0, r0, r0, lsr #32
  d8:	00000000 	andeq	r0, r0, r0
  dc:	c0008ab4 			; <UNDEFINED> instruction: 0xc0008ab4
  e0:	000008c8 	andeq	r0, r0, r8, asr #17
  e4:	8b080e42 	blhi	2039f4 <_start-0xbfe0460c>
  e8:	42018e02 	andmi	r8, r1, #2, 28
  ec:	03040b0c 	movweq	r0, #19212	; 0x4b0c
  f0:	0d0c045e 	cfstrseq	mvf0, [ip, #-376]	; 0xfffffe88
  f4:	00000008 	andeq	r0, r0, r8
  f8:	00000030 	andeq	r0, r0, r0, lsr r0
  fc:	00000000 	andeq	r0, r0, r0
 100:	c000937c 	andgt	r9, r0, ip, ror r3
 104:	0000004c 	andeq	r0, r0, ip, asr #32
 108:	810c0e42 	tsthi	ip, r2, asr #28
 10c:	83028203 	movwhi	r8, #8707	; 0x2203
 110:	140e4201 	strne	r4, [lr], #-513	; 0xfffffdff
 114:	048e058b 	streq	r0, [lr], #1419	; 0x58b
 118:	100b0c42 	andne	r0, fp, r2, asr #24
 11c:	140d0c5a 	strne	r0, [sp], #-3162	; 0xfffff3a6
 120:	0ecbce42 	cdpeq	14, 12, cr12, cr11, cr2, {2}
 124:	c2c3420c 	sbcgt	r4, r3, #12, 4	; 0xc0000000
 128:	00000ec1 	andeq	r0, r0, r1, asr #29
 12c:	00000034 	andeq	r0, r0, r4, lsr r0
 130:	00000000 	andeq	r0, r0, r0
 134:	c00093c8 	andgt	r9, r0, r8, asr #7
 138:	0000004c 	andeq	r0, r0, ip, asr #32
 13c:	80100e42 	andshi	r0, r0, r2, asr #28
 140:	82038104 	andhi	r8, r3, #4, 2
 144:	42018302 	andmi	r8, r1, #134217728	; 0x8000000
 148:	068b180e 	streq	r1, [fp], lr, lsl #16
 14c:	0c42058e 	cfstr64eq	mvdx0, [r2], {142}	; 0x8e
 150:	0c5a140b 	cfldrdeq	mvd1, [sl], {11}
 154:	ce42180d 	cdpgt	8, 4, cr1, cr2, cr13, {0}
 158:	42100ecb 	andsmi	r0, r0, #3248	; 0xcb0
 15c:	c0c1c2c3 	sbcgt	ip, r1, r3, asr #5
 160:	0000000e 	andeq	r0, r0, lr
 164:	0000000c 	andeq	r0, r0, ip
 168:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 16c:	7c020001 	stcvc	0, cr0, [r2], {1}
 170:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 174:	0000001c 	andeq	r0, r0, ip, lsl r0
 178:	00000164 	andeq	r0, r0, r4, ror #2
 17c:	c0009414 	andgt	r9, r0, r4, lsl r4
 180:	000001e8 	andeq	r0, r0, r8, ror #3
 184:	8b040e42 	blhi	103a94 <_start-0xbff0456c>
 188:	0b0d4201 	bleq	350994 <_start-0xbfcb766c>
 18c:	0d0dec02 	stceq	12, cr14, [sp, #-8]
 190:	000ecb42 	andeq	ip, lr, r2, asr #22
 194:	0000001c 	andeq	r0, r0, ip, lsl r0
 198:	00000164 	andeq	r0, r0, r4, ror #2
 19c:	c00095fc 	strdgt	r9, [r0], -ip
 1a0:	00000060 	andeq	r0, r0, r0, rrx
 1a4:	8b080e42 	blhi	203ab4 <_start-0xbfe0454c>
 1a8:	42018e02 	andmi	r8, r1, #2, 28
 1ac:	6a040b0c 	bvs	102de4 <_start-0xbff0521c>
 1b0:	00080d0c 	andeq	r0, r8, ip, lsl #26
 1b4:	0000001c 	andeq	r0, r0, ip, lsl r0
 1b8:	00000164 	andeq	r0, r0, r4, ror #2
 1bc:	c000965c 	andgt	r9, r0, ip, asr r6
 1c0:	00000048 	andeq	r0, r0, r8, asr #32
 1c4:	8b080e42 	blhi	203ad4 <_start-0xbfe0452c>
 1c8:	42018e02 	andmi	r8, r1, #2, 28
 1cc:	5e040b0c 	vmlapl.f64	d0, d4, d12
 1d0:	00080d0c 	andeq	r0, r8, ip, lsl #26
 1d4:	0000001c 	andeq	r0, r0, ip, lsl r0
 1d8:	00000164 	andeq	r0, r0, r4, ror #2
 1dc:	c00096a4 	andgt	r9, r0, r4, lsr #13
 1e0:	0000004c 	andeq	r0, r0, ip, asr #32
 1e4:	8b040e42 	blhi	103af4 <_start-0xbff0450c>
 1e8:	0b0d4201 	bleq	3509f4 <_start-0xbfcb760c>
 1ec:	420d0d5e 	andmi	r0, sp, #6016	; 0x1780
 1f0:	00000ecb 	andeq	r0, r0, fp, asr #29
 1f4:	0000000c 	andeq	r0, r0, ip
 1f8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 1fc:	7c020001 	stcvc	0, cr0, [r2], {1}
 200:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 204:	0000001c 	andeq	r0, r0, ip, lsl r0
 208:	000001f4 	strdeq	r0, [r0], -r4
 20c:	c00096f0 	strdgt	r9, [r0], -r0
 210:	00000018 	andeq	r0, r0, r8, lsl r0
 214:	8b040e42 	blhi	103b24 <_start-0xbff044dc>
 218:	0b0d4201 	bleq	350a24 <_start-0xbfcb75dc>
 21c:	420d0d44 	andmi	r0, sp, #68, 26	; 0x1100
 220:	00000ecb 	andeq	r0, r0, fp, asr #29
 224:	0000000c 	andeq	r0, r0, ip
 228:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 22c:	7c020001 	stcvc	0, cr0, [r2], {1}
 230:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 234:	00000020 	andeq	r0, r0, r0, lsr #32
 238:	00000224 	andeq	r0, r0, r4, lsr #4
 23c:	c0009708 	andgt	r9, r0, r8, lsl #14
 240:	00000298 	muleq	r0, r8, r2
 244:	8b040e42 	blhi	103b54 <_start-0xbff044ac>
 248:	0b0d4201 	bleq	350a54 <_start-0xbfcb75ac>
 24c:	0d014403 	cfstrseq	mvf4, [r1, #-12]
 250:	0ecb420d 	cdpeq	2, 12, cr4, cr11, cr13, {0}
 254:	00000000 	andeq	r0, r0, r0
 258:	0000001c 	andeq	r0, r0, ip, lsl r0
 25c:	00000224 	andeq	r0, r0, r4, lsr #4
 260:	c00099a0 	andgt	r9, r0, r0, lsr #19
 264:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
 268:	8b040e42 	blhi	103b78 <_start-0xbff04488>
 26c:	0b0d4201 	bleq	350a78 <_start-0xbfcb7588>
 270:	0d0d5002 	stceq	0, cr5, [sp, #-8]
 274:	000ecb42 	andeq	ip, lr, r2, asr #22
 278:	0000001c 	andeq	r0, r0, ip, lsl r0
 27c:	00000224 	andeq	r0, r0, r4, lsr #4
 280:	c0009a50 	andgt	r9, r0, r0, asr sl
 284:	000000b0 	strheq	r0, [r0], -r0	; <UNPREDICTABLE>
 288:	8b040e42 	blhi	103b98 <_start-0xbff04468>
 28c:	0b0d4201 	bleq	350a98 <_start-0xbfcb7568>
 290:	0d0d5002 	stceq	0, cr5, [sp, #-8]
 294:	000ecb42 	andeq	ip, lr, r2, asr #22
 298:	0000000c 	andeq	r0, r0, ip
 29c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 2a0:	7c020001 	stcvc	0, cr0, [r2], {1}
 2a4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 2a8:	00000018 	andeq	r0, r0, r8, lsl r0
 2ac:	00000298 	muleq	r0, r8, r2
 2b0:	c0009b00 	andgt	r9, r0, r0, lsl #22
 2b4:	00000010 	andeq	r0, r0, r0, lsl r0
 2b8:	8b080e42 	blhi	203bc8 <_start-0xbfe04438>
 2bc:	42018e02 	andmi	r8, r1, #2, 28
 2c0:	00040b0c 	andeq	r0, r4, ip, lsl #22
